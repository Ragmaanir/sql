crystal_doc_search_index_callback({"repository_name":"github.com/atomframework/model","body":"> ⚠️ Master branch requires Crystal master to compile. See [installation instructions for Crystal](https://crystal-lang.org/docs/installation/from_source_repository.html).\n\n# Atom::Model\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Build status](https://img.shields.io/travis/atomframework/model/master.svg?style=flat-square)](https://travis-ci.org/atomframework/model)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg?style=flat-square)](http://api.model.atomframework.org)\n[![Releases](https://img.shields.io/github/release/atomframework/model.svg?style=flat-square)](https://github.com/atomframework/model/releases)\n[![Awesome](https://github.com/vladfaust/awesome/blob/badge-flat-alternative/media/badge-flat-alternative.svg)](https://github.com/veelenga/awesome-crystal)\n\nThe official SQL ORM for [Atom Framework](https://github.com/atomframework/atom).\n\n## Projects using Atom::Model\n\n* [Crystal Jobs](https://crystaljobs.org)\n* [Crystal World](https://github.com/vladfaust/crystalworld)\n* *add yours!*\n\n## About\n\nAtom::Model is a [crystal-db](https://github.com/crystal-lang/crystal-db) ORM which does not follow Active Record pattern, it's more like a data-mapping solution. There is a concept of Repository, which is basically a gateway to the database. For example:\n\n```crystal\nrepo = Atom::Repository.new(db)\nusers = repo.query(User.where(id: 42)).first\nusers.class # => User\n```\n\nAtom::Model also has a plently of features, including:\n\n- Expressive and **type-safe** Query builder, allowing to use constructions like `Post.join(:author).where(author: user)`, which turns into a plain SQL\n- References preloader (the example above would return a `Post` which has `#author = <User @id=42>` attribute set)\n- Beautiful schema definition syntax\n\nHowever, Atom::Model is designed to be minimal, so it doesn't perform tasks you may got used to, for example, it doesn't do database migrations itself. You may use [migrate](https://github.com/vladfaust/migrate.cr) instead. Also its Query builder is not intended to fully replace SQL but instead to help a developer to write less and safer code.\n\nAlso note that although Atom::Model code is designed to be abstract sutiable for any [crystal-db](https://github.com/crystal-lang/crystal-db) driver, it currently works with PostgreSQL only. But it's fairly easy to implement other drivers like MySQL or SQLite (see `/src/model/ext/pg` and `/src/model/repository.cr`).\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  atom-model:\n    github: atomframework/model\n    version: ~> 0.5.0\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/atomframework/model/releases) and change the `version` accordingly.\n\n## Using\n\n### Basic example\n\nAssuming following database migration:\n\n```sql\nCREATE TABLE users(\n  uuid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  name VARCHAR(100) NOT NULL,\n  age INT,\n  created_at TIMESTAMPTZ  NOT NULL DEFAULT NOW()\n);\n\nCREATE TABLE posts(\n  id SERIAL PRIMARY KEY,\n  author_uuid INT NOT NULL REFERENCES users (uuid),\n  content TEXT NOT NULL,\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ\n);\n```\n\nCrystal code:\n\n```crystal\nrequire \"pg\"\nrequire \"atom-model\"\n\nclass User\n  include Atom::Model\n\n  schema users do\n    pkey uuid : UUID # UUIDs are supported out of the box\n\n    type name : String                   # Has NOT NULL in the column definition\n    type age : Union(Int32 | Nil)        # Does not have NULL in the column definition\n    type created_at : Time = DB::Default # Has DEFAULT in the column definition\n\n    type posts : Array(Post), foreign_key: \"author_uuid\" # That is an implicit reference\n  end\nend\n\nclass Post\n  include Atom::Model\n\n  schema posts do\n    pkey id : Int32\n\n    type author : User, key: \"author_id\" # That is an explicit reference\n    type content : String\n\n    type created_at : Time = DB::Default\n    type updated_at : Union(Time | Nil)\n  end\nend\n\nlogger = Atom::Repository::Logger::IO.new(STDOUT)\nrepo = Atom::Repository.new(DB.open(ENV[\"DATABASE_URL\"]), logger)\n\n# Most of the query builder methods (e.g. insert) are type-safe\nuser = repo.query(User.insert(name: \"Vlad\")).first\n\n# You can use object-oriented approach as well\npost = Post.new(author: user, content: \"What a beauteful day!\") # Oops\n\npost = repo.query(post.insert).first\n# Logging to STDOUT:\n# [postgresql] INSERT INTO posts (author_uuid, content) VALUES (?, ?) RETURNING *\n# 1.708ms\n# [map] Post\n# 126μs\n\n# #to_s returns raw SQL string, so for superiour performance you may want to store it in constants\nQUERY = Post.update.set(content: \"placeholder\").where(id: 0).to_s\n# UPDATE posts SET content = ? WHERE (id = ?)\n\n# However, such approach doesn't check for incoming params types, `post.id` could be anything\nrepo.exec(QUERY, \"What a beautiful day!\", post.id)\n\n# Join with preloading references!\nposts = repo.query(Post.where(author: user).join(:author, select: {\"uuid\", \"name\"}))\n\nputs posts.first.inspect\n# => <Post @id=42 @author=<User @name=\"Vlad\" @uuid=\"...\"> @content=\"What a beautiful day!\">\n```\n\n### With [Atom](https://github.com/atomframework/atom)\n\nDefine your models just as above, but with [`Validations`](https://github.com/vladfaust/validations.cr) included by default. You also don't need to initialize repository explicitly when using Atom:\n\n```crystal\nrequire \"pg\"\nrequire \"atom\"\nrequire \"atom/model\"\n\nclass User\n  include Atom::Model\n\n  schema do\n    type name : String\n  end\n\n  validate name, size: (3..50)\nend\n\nusers = Atom.query(User.all) # Atom-level `query`, `exec` and `scalar` methods\nUser.new(\"Jo\").valid?        # Validations\n```\n\n## Testing\n\n1. Run generic specs with `crystal spec`\n2. Apply migrations from `./db_spec/*/migration.sql`\n3. Run DB-specific specs with `env POSTGRESQL_URL=postgres://postgres:postgres@localhost:5432/model crystal spec db_spec`\n4. Optionally run benchmarks with `crystal bench.cr --release`\n\n## Contributing\n\n1. Fork it ( https://github.com/atomframework/model/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'Add some feature')\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [@vladfaust](https://github.com/vladfaust) Vlad Faust - creator, maintainer\n","program":{"html_id":"github.com/atomframework/model/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/atomframework/model","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/atomframework/model/Atom","path":"Atom.html","kind":"class","full_name":"Atom","name":"Atom","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/model/changes.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/changes.cr"},{"filename":"atom/model/db_mapping.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/db_mapping.cr"},{"filename":"atom/model/declaration.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/declaration.cr"},{"filename":"atom/model/errors.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/errors.cr"},{"filename":"atom/model/initializer.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/initializer.cr"},{"filename":"atom/model/query_enums.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/query_enums.cr"},{"filename":"atom/model/query_shortcuts.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/query_shortcuts.cr"},{"filename":"atom/model.cr","line_number":3,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr"},{"filename":"atom/query/group_by.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/group_by.cr"},{"filename":"atom/query/having.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr"},{"filename":"atom/query/insert.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/insert.cr"},{"filename":"atom/query/join.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr"},{"filename":"atom/query/limit.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/limit.cr"},{"filename":"atom/query/offset.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/offset.cr"},{"filename":"atom/query/order_by.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr"},{"filename":"atom/query/returning.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr"},{"filename":"atom/query/select.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/select.cr"},{"filename":"atom/query/set.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr"},{"filename":"atom/query/where.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr"},{"filename":"atom/query.cr","line_number":3,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr"},{"filename":"atom/repository/exec.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr"},{"filename":"atom/repository/query.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr"},{"filename":"atom/repository/scalar.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr"},{"filename":"atom/repository.cr","line_number":12,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/atomframework/model/Atom/Model","path":"Atom/Model.html","kind":"module","full_name":"Atom::Model","name":"Model","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"atom/model/changes.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/changes.cr"},{"filename":"atom/model/db_mapping.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/db_mapping.cr"},{"filename":"atom/model/declaration.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/declaration.cr"},{"filename":"atom/model/errors.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/errors.cr"},{"filename":"atom/model/initializer.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/initializer.cr"},{"filename":"atom/model/query_enums.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/query_enums.cr"},{"filename":"atom/model/query_shortcuts.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/query_shortcuts.cr"},{"filename":"atom/model.cr","line_number":69,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom","kind":"class","full_name":"Atom","name":"Atom"},"doc":"When included, allows to define mapping from DB to a model.\n\nBe sure to fill it thouroughly with all databse columns, otherwise errors may occure.\n\n**Example:**\n\nGiven SQL:\n\n```sql\nCREATE TABLE users (\n  id SERIAL PRIMARY KEY,\n  name TEXT NOT NULL,\n  active BOOLEAN NOT NULL DEFAULT true,\n  age INT\n);\n\nCREATE TABLE posts (\n  id SERIAL PRIMARY KEY,\n  author_id INT NOT NULL REFERENCES users (id),\n  content TEXT NOT NULL,\n  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMPTZ\n);\n```\n\nA proper schema for it:\n\n```\nclass User\n  include Atom::Model\n\n  schema users do\n    pkey id : Int32\n    type name : String\n    type active : Bool = DB::Default\n    type age : Union(Int32 | Nil)\n    type posts : Array(Post) # Implicit reference\n  end\nend\n\nclass Post\n  include Atom::Model\n\n  schema posts do\n    pkey id : Int32\n    type author : User, key: \"author_id\" # Explicit reference\n    type content : String\n    type created_at : Time = DB::Default\n    type updated_at : Union(Time | Nil)\n  end\nend\n```\n\nWould also define special enums `Attribute` and `Reference`, e.g. `Attribute::Id` and `Reference::Author`.\n\n`Attribute` enums have `#key` method which returns table key for this attribute.\n\n`Reference` enums have multiple methods:\n\n- `#direct?` - whether is this reference direct (e.g. `true` for `Reference::Author`)\n- `#foreign?` - whether is this reference foreign (e.g. `true` for `Reference::Posts`)\n- `#table` - returns table name (e.g. `\"users\"` for `Reference::Author`)\n- `#key` - returns table key (e.g. `\"author_id\"` for `Reference::Author`)\n- `#foreign_key` - returns foreign table key (e.g. `\"author_id\"` for `Reference::Posts`)\n- `#primary_key` - returns table key for this reference's primary key (e.g. `\"id\"` for both refrences in this case)","summary":"<p>When included, allows to define mapping from DB to a model.</p>","class_methods":[{"id":"from_rs:Array(self)-class-method","html_id":"from_rs:Array(self)-class-method","name":"from_rs","doc":"Method to map instances from `DB::ResultSet`; will be defined after `.schema` call.","summary":"<p>Method to map instances from <code>DB::ResultSet</code>; will be defined after <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> call.</p>","abstract":false,"args":[],"args_string":" : Array(self)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L99","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L99","def":{"name":"from_rs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":"{% raise(NotImplementedError) %}"}},{"id":"primary_key-class-method","html_id":"primary_key-class-method","name":"primary_key","doc":"Would return a `Schema::Attribute` for shema's primary key; will be defined after `.schema` call.","summary":"<p>Would return a <code>Schema::Attribute</code> for shema's primary key; will be defined after <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> call.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L104","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L104","def":{"name":"primary_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(NotImplementedError) %}"}}],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":"Will be defined after `.schema` call. It would accept named arguments only, e.g. `User.new(id: 42)`.","summary":"<p>Will be defined after <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> call.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L93","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L93","def":{"name":"new","args":[],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**nargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Would check two instances for equality by their `primary_key` values; will be defined after `.schema` call. Would raise `ArgumentError` if any of instances had primary key value not set.","summary":"<p>Would check two instances for equality by their <code><a href=\"../Atom/Model.html#primary_key-instance-method\">#primary_key</a></code> values; will be defined after <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> call.</p>","abstract":true,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : self)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L115","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L115","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"changes-instance-method","html_id":"changes-instance-method","name":"changes","doc":"A storage for instance changes; will be defined after `.schema` call. Would not track foreign references changes.","summary":"<p>A storage for instance changes; will be defined after <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> call.</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L96","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L96","def":{"name":"changes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"primary_key-instance-method","html_id":"primary_key-instance-method","name":"primary_key","doc":"Would return instance primary key or raise `ArgumentError` if not set; will be defined after `.schema` call.","summary":"<p>Would return instance primary key or raise <code>ArgumentError</code> if not set; will be defined after <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> call.</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L112","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L112","def":{"name":"primary_key","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"primary_key?-instance-method","html_id":"primary_key?-instance-method","name":"primary_key?","doc":"Would safely return instance primary key or `nil` if not set; will be defined after `.schema` call.","summary":"<p>Would safely return instance primary key or <code>nil</code> if not set; will be defined after <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> call.</p>","abstract":true,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L109","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L109","def":{"name":"primary_key?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[{"id":"pkey(declaration,**options)-macro","html_id":"pkey(declaration,**options)-macro","name":"pkey","doc":"Declare a primary key attribute. Supported syntaxes:\n\n- `pkey id` - alias of `type id : Int32 = DB::Default, primary_key: true`\n- `pkey id : UUID` or `pkey id : UUID = UUID.random` - adds `primary_key: true` and `= DB::Default` if no default value","summary":"<p>Declare a primary key attribute.</p>","abstract":false,"args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"args_string":"(declaration, **options)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/declaration.cr#L227","def":{"name":"pkey","args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n# `pkey id`\n\n      \n{% if declaration.is_a?(Call) %}\n        type({{ declaration }}{{ \" : Int32 = DB::Default\".id }}, primary_key: true, {{ **options }})\n\n      # `pkey id : Int32 (= value)`\n      {% else %}{% if declaration.is_a?(TypeDeclaration) %}\n        type({{ declaration.var }} : {{ declaration.type }} = {{ declaration.value ? declaration.value : DB::Default }}, primary_key: true, {{ **options }})\n\n      {% else %}\n        {% raise(\"Unsupported pkey definition. Possible variants are 'pkey name' or 'pkey name : Type( = default_value)'\") %}\n      {% end %}{% end %}\n\n    \n"}},{"id":"schema(table)-macro","html_id":"schema(table)-macro","name":"schema","doc":"Define mapping from DB to model (and vice-versa) for the *table*.","summary":"<p>Define mapping from DB to model (and vice-versa) for the <em>table</em>.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":""}],"args_string":"(table)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model.cr#L71","def":{"name":"schema","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"      MODEL_TABLE = \n{{ table.id.stringify }}\n\n\n      def self.table\n        \n{{ table.id.stringify }}\n\n      \nend\n\n      MODEL_ATTRIBUTES = [] of NamedTuple\n      MODEL_REFERENCES = [] of NamedTuple\n\n      macro finished\n        \n{{ (yield).id }}\n\n\n        define_initializer\n        define_changes\n        define_query_enums\n        define_query_shortcuts\n        define_db_mapping\n      \nend\n    \n"}},{"id":"type(declaration,**options)-macro","html_id":"type(declaration,**options)-macro","name":"type","doc":"Declare schema attribute or reference, it must be called within the `.schema` block:\n\n```\nclass User\n  include Atom::Model\n\n  schema users do\n    type id : Int32 = DB::Default, primary_key: true   # It's the *primary key*\n    type name : String                                 # It's a mandatory attribute\n    type age : Union(Int32 | Nil)                      # It's a nilable attribute\n    type posts : Array(Post), foreign_key: \"author_id\" # It's an *implicit foreign reference*\n  end\nend\n\nclass Post\n  include Atom::Model\n\n  schema posts do\n    type id : Int32 = DB::Default, primary_key: true # It's the *primary key*\n    type author : User, key: \"author_id\"             # It's a mandatory *explicit direct reference*\n    type content : String                            # It's a mandatory attribute\n    type created_at : Time = DB::Default             # It's an attribute with default value set on DB side\n    type updated_at : Union(Time | Nil)              # It's a nilable attribute\n  end\nend\n```\n\nBasically, `.type` mirrors the table column. It can be any Crystal type as long as it's an another `Schema` or has `#to_db` method defined. Also special `Union(Type | Nil)` is supported to mark the attribute as nilable.\n\nSupported *options*:\n\n- `primary_key` - whether is this type a primary key. There must be exactly **one** primary key for a single schema\n- `key` - table key for this type *if it differs from the name*, e.g. `type encrypted_password : String, key: \"password\"`. If it's present for a reference, the type is considered *direct reference*\n- `foreign_key` - foreign table key for this type, e.g. `type posts : Array(Post), foreign_key: \"author_id\"`. If it's present, the type is treated as *foreign reference*\n\nIf the type is either nilable attribute or a nilable direct reference or a foreign reference, a `Model#type` method will be generated for it, returning a nilable value, as expected.\n\nIf the type is non-nilable attribute or a non-nilable direct reference, a `Model#type` and `Model#type?` methods are generated, the first one returning `@type.not_nil!` and the second one just `@type`.\n\nThe initializer generated would require all non-nilable and non-foreign-reference types to be set.","summary":"<p>Declare schema attribute or reference, it must be called within the <code><a href=\"../Atom/Model.html#schema%28table%29-macro\">.schema</a></code> block:</p>","abstract":false,"args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"args_string":"(declaration, **options)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/declaration.cr#L43","def":{"name":"type","args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"      \n{% if MODEL_ATTRIBUTES.find(&.[](\"primary_key\")) && options[\"primary_key\"]\n  raise(\"A schema cannot contain multiple primary keys\")\nend\nunless declaration.is_a?(TypeDeclaration)\n  raise(\"Invalid schema type declaration syntax. The valid one is 'type name : Type( = default)', e.g. 'type id : Int32 = rand(100)'\")\nend\nenumerable = false\nreference = nil\nif (type = declaration.type.resolve).union?\n  unless (type.union_types.size == 2) && type.nilable?\n    raise(\"Only two-sized Unions with Nil (e.g. 'Int32 | Nil') are allowed on Schema attribute definition. Given: '#{declaration.type.resolve}'\")\n  end\n  type = type.union_types.find do |t|\n    t != Nil\n  end\n  if type < Atom::Model\n    reference = type\n  else\n    if type < Enumerable\n      enumerable = type.name\n      if (      (type.type_vars.size == 1) && (type = type.type_vars.first) < Atom::Model)\n        reference = type\n      end\n    end\n  end\nelse\n  if (type = declaration.type.resolve) < Atom::Model\n    reference = type\n  else\n    if (enu = declaration.type.resolve) < Enumerable\n      enumerable = declaration.type.name\n      if (      (enu.type_vars.size == 1) && (type = enu.type_vars.first) < Atom::Model)\n        reference = type\n      end\n    end\n  end\nend\nif reference && options[\"primary_key\"]\n  raise(\"A reference attribute cannot be a primary key\")\nend\nif enumerable && options[\"primary_key\"]\n  raise(\"An enumerable attribute cannot be a primary key\")\nend\ntrue_type = declaration.type.resolve.union? ? declaration.type.resolve.union_types.find do |t|\n  t != Nil\nend : declaration.type.resolve\ndb_nilable = declaration.type.resolve.union? && declaration.type.resolve.nilable?\ndb_default = declaration.value && (declaration.value.resolve == DB::Default)\ndefault_instance_value = (if declaration.value\n  declaration.value.resolve\nend) || nil\nkey = options[\"key\"] || (unless options[\"foreign_key\"]\n  declaration.var.stringify\nend)\n %}\n\n\n      @\n{{ declaration.var }}\n : \n{{ declaration.type }}\n{{ if db_default\n  \" | DB::Default.class\".id\nend }}\n | Nil = \n{{ default_instance_value }}\n\n\n      \n{% if db_nilable %}\n        def {{ declaration.var }}\n          raise DefaultValueError.new({{ @type.stringify }}, {{ declaration.var.stringify }}) if @{{ declaration.var }}.is_a?(DB::Default.class)\n          @{{ declaration.var }}.as({{ declaration.type.resolve }})\n        end\n      {% else %}{% if !(reference && options[\"foreign_key\"]) %}\n        def {{ declaration.var }}?\n          raise DefaultValueError.new({{ @type.stringify }}, {{ declaration.var.stringify }}) if @{{ declaration.var }}.is_a?(DB::Default.class)\n          @{{ declaration.var }}.as({{ declaration.type.resolve }} | Nil)\n        end\n\n        def {{ declaration.var }}\n          {{ declaration.var }}?.not_nil!\n        end\n      {% end %}{% end %}\n\n\n      \n{% if reference && options[\"foreign_key\"] %}\n        def {{ declaration.var }}=(value : {{ declaration.type }})\n          @{{ declaration.var }} = value\n        end\n\n        def {{ declaration.var }}\n          @{{ declaration.var }}.as({{ declaration.type.resolve }} | Nil)\n        end\n      {% end %}\n\n\n      \n{% if key %}\n        # Return table key for `#{{ declaration.var }}`.\n        def self.{{ declaration.var }}\n          {{ key }}\n        end\n      {% end %}\n\n\n      \n{% if options[\"primary_key\"] %}\n        MODEL_PRIMARY_KEY = {{ declaration.var.stringify }}\n        MODEL_PRIMARY_KEY_TYPE = {{ declaration.type.resolve }}\n\n        # Return primary key `Attribute` enum.\n        def self.primary_key\n          Attribute::{{ declaration.var.camelcase }}\n        end\n\n        # Safely check for instance's primary key. Returns `nil` if not set.\n        def primary_key?\n          {{ declaration.var }}?\n        end\n\n        # Strictly check for instance's primary key. Raises `\"Nil assertion failed\"` if not set.\n        def primary_key\n          {{ declaration.var }}\n        end\n\n        def raw_primary_key\n          @{{ declaration.var }}\n        end\n\n        # Equality check between two instances by their raw `primary_key`s (allowing `DB::Default`).\n        def ==(other : self)\n          self.raw_primary_key == other.raw_primary_key\n        end\n      {% end %}\n\n\n      \n{% if reference\n  MODEL_REFERENCES.push({is_reference: true, is_attribute: false, name: declaration.var, type: declaration.type.resolve, true_type: true_type, reference_type: reference, enumerable: enumerable, direct: (!(!key)) && (!options[\"foreign_key\"]), foreign: (!key) && (!(!options[\"foreign_key\"])), default_instance_value: default_instance_value, db_nilable: db_nilable, db_default: db_default, key: key, foreign_key: options[\"foreign_key\"]})\nelse\n  MODEL_ATTRIBUTES.push({is_reference: false, is_attribute: true, name: declaration.var, type: declaration.type.resolve, true_type: true_type, enumerable: enumerable, type_var_db_any: (  (enumerable && ((declaration.type.resolve.type_vars.size) == 1)) && (declaration.type.resolve.type_vars.first <= DB::Any)), default_instance_value: default_instance_value, db_nilable: db_nilable, db_default: db_default, primary_key: options[\"primary_key\"], key: key})\nend %}\n\n    \n"}}],"types":[{"html_id":"github.com/atomframework/model/Atom/Model/DefaultValueError","path":"Atom/Model/DefaultValueError.html","kind":"class","full_name":"Atom::Model::DefaultValueError","name":"DefaultValueError","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/atomframework/model/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/model/errors.cr","line_number":3,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/errors.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Model","kind":"module","full_name":"Atom::Model","name":"Model"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(classklass:String,attribute:String)forallT-class-method","html_id":"new(classklass:String,attribute:String)forallT-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"class","restriction":"String"},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"String"}],"args_string":"(class klass : String, attribute : String) forall T","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/errors.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/model/errors.cr#L4","def":{"name":"new","args":[{"name":"klass","doc":null,"default_value":"","external_name":"class","restriction":"String"},{"name":"attribute","doc":null,"default_value":"","external_name":"attribute","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(klass, attribute)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/atomframework/model/Atom/Query","path":"Atom/Query.html","kind":"struct","full_name":"Atom::Query(T)","name":"Query","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/atomframework/model/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/atomframework/model/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/query/group_by.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/group_by.cr"},{"filename":"atom/query/having.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr"},{"filename":"atom/query/insert.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/insert.cr"},{"filename":"atom/query/join.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr"},{"filename":"atom/query/limit.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/limit.cr"},{"filename":"atom/query/offset.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/offset.cr"},{"filename":"atom/query/order_by.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr"},{"filename":"atom/query/returning.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr"},{"filename":"atom/query/select.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/select.cr"},{"filename":"atom/query/set.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr"},{"filename":"atom/query/where.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr"},{"filename":"atom/query.cr","line_number":20,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom","kind":"class","full_name":"Atom","name":"Atom"},"doc":"A powerful and type-safe SQL Query builder. Can be used either as a separate struct:\n\n```\nAtom::Query(Post).new.where(id: 42)\n```\n\nor like an included module (included by default in `Atom::Model`):\n\n```\nPost.where(id: 42)\n```\n\nQueries can be either select (default), insert, update or delete, just like an actual SQL query.\nQuery calls are chainable: `Post.where(id: 42).join(:author).select('*')`.\n\nCall `#to_s` to build up the Query into SQL String. `#params` are filled up while building.","summary":"<p>A powerful and type-safe SQL Query builder.</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/group_by.cr#L2","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/group_by.cr#L2","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"id":"all-instance-method","html_id":"all-instance-method","name":"all","doc":"Alias of `#limit(nil)`.","summary":"<p>Alias of <code><a href=\"../Atom/Query.html#limit%28limit%3AInt32%3F%3Dnil%29-instance-method\">#limit(nil)</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L59","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L59","def":{"name":"all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(nil)"}},{"id":"and-instance-method","html_id":"and-instance-method","name":"and","doc":"A shorthand for calling `and_where` or `and_having` depending on the latest call.","summary":"<p>A shorthand for calling <code><a href=\"../Atom/Query.html#and_where-instance-method\">#and_where</a></code> or <code><a href=\"../Atom/Query.html#and_having%28clause%3AString%2C%2Aparams%29-instance-method\">#and_having</a></code> depending on the latest call.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","def":{"name":"and","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"Cannot call 'Atom::Query(#{T})#having with named arguments'\")\nelse\n  and_where(**args)\nend"}},{"id":"and_having(clause:String,*params)-instance-method","html_id":"and_having(clause:String,*params)-instance-method","name":"and_having","doc":"Add `AND` *clause* with *params* to `HAVING`.\n\n```\nand_having(\"count = ?\", 42)\n# HAVING (...) AND (count = ?)\n```","summary":"<p>Add <code>AND</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"and_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: false, not: false)"}},{"id":"and_having(clause:String)-instance-method","html_id":"and_having(clause:String)-instance-method","name":"and_having","doc":"Add `AND` *clause* to `HAVING`.\n\n```\nand_having(\"count = 42\")\n# HAVING (...) AND (count = 42)\n```","summary":"<p>Add <code>AND</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"and_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: false, not: false)"}},{"id":"and_having_not(clause:String,*params)-instance-method","html_id":"and_having_not(clause:String,*params)-instance-method","name":"and_having_not","doc":"Add `AND NOT` *clause* with *params* to `HAVING`.\n\n```\nand_having_not(\"count = ?\", 42)\n# HAVING (...) AND NOT (count = ?)\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"and_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: false, not: true)"}},{"id":"and_having_not(clause:String)-instance-method","html_id":"and_having_not(clause:String)-instance-method","name":"and_having_not","doc":"Add `AND NOT` *clause* to `HAVING`.\n\n```\nand_having_not(\"count = 42\")\n# HAVING (...) AND NOT (count = 42)\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"and_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: false, not: true)"}},{"id":"and_not-instance-method","html_id":"and_not-instance-method","name":"and_not","doc":"A shorthand for calling `and_where_not` or `and_having_not` depending on the latest call.","summary":"<p>A shorthand for calling <code><a href=\"../Atom/Query.html#and_where_not-instance-method\">#and_where_not</a></code> or <code><a href=\"../Atom/Query.html#and_having_not%28clause%3AString%2C%2Aparams%29-instance-method\">#and_having_not</a></code> depending on the latest call.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","def":{"name":"and_not","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"Cannot call 'Atom::Query(#{T})#having with named arguments'\")\nelse\n  and_where_not(**args)\nend"}},{"id":"and_where-instance-method","html_id":"and_where-instance-method","name":"and_where","doc":"Add `AND` clause with named arguments to `WHERE`.\n\n```\nand_where(id: 42)\n# WHERE (...) AND (id = ?)\n```","summary":"<p>Add <code>AND</code> clause with named arguments to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"and_where","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: false, not: false)"}},{"id":"and_where(clause:String,*params)-instance-method","html_id":"and_where(clause:String,*params)-instance-method","name":"and_where","doc":"Add `AND` *clause* with *params* to `WHERE`.\n\n```\nand_where(\"id = ?\", 42)\n# WHERE (...) AND (id = ?)\n```","summary":"<p>Add <code>AND</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"and_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: false, not: false)"}},{"id":"and_where(clause:String)-instance-method","html_id":"and_where(clause:String)-instance-method","name":"and_where","doc":"Add `AND` *clause* to `WHERE`.\n\n```\nand_where(\"id = 42\")\n# WHERE (...) AND (id = 42)\n```","summary":"<p>Add <code>AND</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"and_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: false, not: false)"}},{"id":"and_where_not-instance-method","html_id":"and_where_not-instance-method","name":"and_where_not","doc":"Add `AND NOT` clause with named arguments to `WHERE`.\n\n```\nand_where_not(id: 42)\n# WHERE (...) AND NOT (id = ?)\n```","summary":"<p>Add <code>AND NOT</code> clause with named arguments to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"and_where_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: false, not: true)"}},{"id":"and_where_not(clause:String,*params)-instance-method","html_id":"and_where_not(clause:String,*params)-instance-method","name":"and_where_not","doc":"Add `AND NOT` *clause* with *params* to `WHERE`.\n\n```\nand_where_not(\"id = ?\", 42)\n# WHERE (...) AND NOT (id = ?)\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"and_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: false, not: true)"}},{"id":"and_where_not(clause:String)-instance-method","html_id":"and_where_not(clause:String)-instance-method","name":"and_where_not","doc":"Add `AND NOT` *clause* to `WHERE`.\n\n```\nand_where_not(\"id = 42\")\n# WHERE (...) AND NOT (id = 42)\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"and_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: false, not: true)"}},{"id":"delete-instance-method","html_id":"delete-instance-method","name":"delete","doc":"Mark this query as delete one. You may want to call `#where` afterwards.","summary":"<p>Mark this query as delete one.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L39","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L39","def":{"name":"delete","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.type = :delete\nself\n"}},{"id":"dup-instance-method","html_id":"dup-instance-method","name":"dup","doc":"Duplicates this query.","summary":"<p>Duplicates this query.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L48","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L48","def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dup = self.class.new\n{% for m in [\"group_by\", \"having\", \"insert\", \"join\", \"limit\", \"offset\", \"order_by\", \"returning\", \"select\", \"set\", \"where\"] of ::String %}\n        dup.{{ m.id }} = @{{ m.id }}.dup\n      {% end %}\nreturn dup\n"}},{"id":"first-instance-method","html_id":"first-instance-method","name":"first","doc":"Alias of `#order_by(T.primary_key, :asc).one`.","summary":"<p>Alias of <code><a href=\"../Atom/Query.html#order_by%28value%3AT%3A%3AAttribute%7CString%2Corder%3AOrder%3F%3DOrder%3A%3AAsc%29-instance-method\">#order_by(T.primary_key, :asc)</a><a href=\"../Atom/Query.html#one-instance-method\">.one</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L69","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L69","def":{"name":"first","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(order_by(T.primary_key, :asc)).one"}},{"id":"full_join(reference:T::Reference,**nargs)-instance-method","html_id":"full_join(reference:T::Reference,**nargs)-instance-method","name":"full_join","doc":"Alias of `#join(reference, type: :full)`.","summary":"<p>Alias of <code>#join(reference, type: :full)</code>.</p>","abstract":false,"args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"}],"args_string":"(reference : T::Reference, **nargs)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","def":{"name":"full_join","args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"join(reference, **nargs, type: :full)"}},{"id":"full_join(table:String,on:String)-instance-method","html_id":"full_join(table:String,on:String)-instance-method","name":"full_join","doc":"Alias of `#join(table, on, type: :full)`.","summary":"<p>Alias of <code>#join(table, on, type: :full)</code>.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"}],"args_string":"(table : String, on : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","def":{"name":"full_join","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"join(table, on, type: :full)"}},{"id":"group_by(*values:String)-instance-method","html_id":"group_by(*values:String)-instance-method","name":"group_by","doc":"Add `GROUP_BY` clause.","summary":"<p>Add <code>GROUP_BY</code> clause.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"args_string":"(*values : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/group_by.cr#L7","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/group_by.cr#L7","def":{"name":"group_by","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @group_by.nil?\n  @group_by = Array(String).new\nend\n@group_by.not_nil!.concat(values)\nself\n"}},{"id":"having(clause:String,*params:DB::Any|Array(DB::Any),or:Bool=false,not:Bool=false)-instance-method","html_id":"having(clause:String,*params:DB::Any|Array(DB::Any),or:Bool=false,not:Bool=false)-instance-method","name":"having","doc":"Add `HAVING` *clause* with *params*.\n\n```\nquery.having(\"COUNT(tags.id) > ?\", 5) # HAVING (COUNT(tags.id) > ?)\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery.having(\"COUNT(tags.id) > ?\", 5).having(\"foo = ?\", \"bar\")\n# HAVING (COUNT(tags.id) > ?) AND (foo = ?)\n```\n\nSee also `#and`, `#or`, `#and_having`, `#and_having_not`, `#or_having`, `#or_having_not`.","summary":"<p>Add <code>HAVING</code> <em>clause</em> with <em>params</em>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, *params : DB::Any | Array(DB::Any), or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L32","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L32","def":{"name":"having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_having << Having.new(clause: clause, params: params.to_a.map do |param|\n  if param.is_a?(Array)\n    param.map do |__arg0|\n      __arg0.as(DB::Any)\n    end\n  else\n    param.as(DB::Any | Array(DB::Any))\n  end\nend, or: or, not: not)\n@latest_wherish_clause = :having\nself\n"}},{"id":"having(clause:String,or:Bool=false,not:Bool=false)-instance-method","html_id":"having(clause:String,or:Bool=false,not:Bool=false)-instance-method","name":"having","doc":"Add `HAVING` *clause* without params.\n\n```\nquery.having(\"COUNT(tags.id) > 5\") # HAVING (COUNT(tags.id) > 5)\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery.having(\"COUNT(tags.id) > 5\").having(\"foo = 'bar'\")\n# HAVING (COUNT(tags.id) > 5) AND (foo = 'bar')\n```\n\nSee also `#and`, `#or`, `#and_having`, `#and_having_not`, `#or_having`, `#or_having_not`.","summary":"<p>Add <code>HAVING</code> <em>clause</em> without params.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L65","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L65","def":{"name":"having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_having << Having.new(clause: clause, params: nil, or: or, not: not)\n@latest_wherish_clause = :having\nself\n"}},{"id":"having_not(clause,*params)-instance-method","html_id":"having_not(clause,*params)-instance-method","name":"having_not","doc":"Add `NOT` *clause* with *params* to `HAVING`.\n\n```\nhaving_not(\"count = ?\", 42)\n# HAVING (...) AND NOT (count = ?)\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L84","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L84","def":{"name":"having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, not: true)"}},{"id":"having_not(clause)-instance-method","html_id":"having_not(clause)-instance-method","name":"having_not","doc":"Add `NOT` *clause* to `HAVING`.\n\n```\nhaving_not(\"count = 42\")\n# HAVING (...) AND NOT (count = 42)\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"args_string":"(clause)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L94","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L94","def":{"name":"having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, not: true)"}},{"id":"insert:selfforallValues-instance-method","html_id":"insert:selfforallValues-instance-method","name":"insert","doc":"Add `INSERT` clause. Marks the query as insert one.\n\nArguments are validated at compilation time. To pass the validation, an argument type must be `<=` compared to the defined attribute type:\n\n```\nclass User\n  schema users do\n    type id : Int32 = DB::Default\n    type active : Bool\n  end\nend\n\nUser.insert(id: 42, active: true)  # INSERT INTO users (id, active) VALUES (?, ?)\nUser.insert(unknown: \"foo\")        # Compilation time error\nUser.insert(id: 42, active: \"foo\") # Compilation time error\n```\n\nSpecial value `DB::Default` is allowed too, however, it's to be skipped in the final INSERT clause:\n\n```\nUser.insert(id: DB::Default, active: false) # INSERT INTO users (active) VALUES (?)\n```\n\nThis method expects **all** non-nilable and non-default values to be set:\n\n```\nUser.insert(id: 42) # Compilation time error because `active` is not set\n```\n\nNOTE: If all values to insert are default, please use `INSERT INTO table DEFAULT VALUES` SQL instead.\n\nTODO: Allow insert all defaults (change from skipping to `(key) VALUES (DEFAULT)`).","summary":"<p>Add <code>INSERT</code> clause.</p>","abstract":false,"args":[],"args_string":" : self forall Values","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/insert.cr#L53","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/insert.cr#L53","def":{"name":"insert","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**Values"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if true %}\n        {% required_attributes = T::MODEL_ATTRIBUTES.select do |a|\n  (!a[\"db_nilable\"]) && (!a[\"db_default\"])\nend.map(&.[](\"name\")).reduce({} of Object => Bool) do |h, e|\n  h[e] = false\n  h\nend %}\n\n        {% for key, value in Values %}\n          {% found = false %}\n\n          {% for type in (T::MODEL_ATTRIBUTES + T::MODEL_REFERENCES.select do |t|\n  t[\"direct\"]\nend) %}\n            {% type = type %}\n            {% key = key %}\n            {% value = value %}\n\n            # In cases like `#insert(author_id: 42)` check against reference's primary key type\n            {% _type = (type[\"is_reference\"] && (key.stringify == type[\"key\"])) ? type[\"reference_type\"].constant(\"MODEL_PRIMARY_KEY_TYPE\") : type[\"type\"] %}\n\n            # First case is `#insert(id: 42)` or `#insert(author: user)` and the second is `#insert(author_id: 42)` mentioned above\n            {% if (key == type[\"name\"]) || ((key.stringify == type[\"key\"]) && type[\"is_reference\"])\n  if type[\"db_default\"]\n    unless (value <= _type || (value == DB::Default.class)) || (value.union? && value.union_types.all? do |t|\n      t <= _type || (t == DB::Default.class)\n    end)\n      raise(\"Invalid compile-time type '#{value}' for argument '#{type[\"name\"]}' in 'Query#where' call. Expected: '#{_type} | DB::Default.class'\")\n    end\n    found = true\n    required_attributes[key] = true\n  else\n    unless value <= _type\n      raise(\"Invalid compile-time type '#{value}' for argument '#{type[\"name\"]}' in 'Query#where' call. Expected: '#{_type}'\")\n    end\n    found = true\n    required_attributes[key] = true\n  end\nend %}\n          {% end %}\n\n          {% unless found\n  raise(\"Class '#{T}' doesn't have an attribute with name or key '#{key}' defined in its Schema eligible for 'Atom::Query(#{T})#insert' call\")\nend %}\n        {% end %}\n\n        {% unsatisfied_attributes = {} of Object => Bool\nrequired_attributes.map do |k, v|\n  unless v\n    unsatisfied_attributes[k] = v\n  end\n  nil\nend\nif unsatisfied_attributes.size > 0\n  raise((\"Class '#{T}' requires \" + (unsatisfied_attributes.keys.map do |a|\n    \"'#{a}'\"\n  end.join(\", \"))) + \" attribute(s) to be set on 'Atom::Query(#{T})#insert' call\")\nend\n %}\n\n        values.each_with_index do |key, value, index|\n          if value.nil? || value.is_a?(DB::Default.class)\n            next # Skip if inserting DEFAULT or NULL\n          end\n\n          case key\n            {% for type in T::MODEL_ATTRIBUTES.select(&.[](\"key\")) %}\n              # insert(id: 42) # \"INSERT INTO posts (id) VALUES (?)\", 42\n              when {{ type[\"name\"].symbolize }}{{ unless type[\"name\"].stringify == type[\"key\"]\n  \", #{type[\"key\"].id.symbolize}\".id\nend }}\n                ensure_insert << Insert.new(\n                  name: {{ type[\"key\"] }},\n                  value: {% if type[\"enumerable\"] %}\n                    value.unsafe_as({{ type[\"true_type\"] }}).to_db({{ type[\"true_type\"] }})\n                  {% else %}\n                    value.unsafe_as({{ type[\"true_type\"] }}).to_db\n                  {% end %}\n                )\n            {% end %}\n\n            {% for type in T::MODEL_REFERENCES.select do |t|\n  t[\"direct\"]\nend %}\n              {% pk_type = type[\"reference_type\"].constant(\"MODEL_PRIMARY_KEY_TYPE\") %}\n\n              # insert(author: user) # \"INSERT INTO posts (author_id) VALUES (?)\", user.primary_key\n              when {{ type[\"name\"].symbolize }}\n                {% if type[\"enumerable\"] %}\n                  pkeys = value.unsafe_as(Enumerable({{ type[\"reference_type\"] }})).map(&.raw_primary_key)\n\n                  raise ArgumentError.new(\"A 'Query#insert' enumerable reference argument cannot have any of its elements' primary key values equal to 'DB::Default' in the runtime\") if pkeys.any? &.is_a?(DB::Default.class)\n\n                  raise ArgumentError.new(\"A 'Query#insert' enumerable reference argument cannot have any of its elements' primary key values equal to Nil in the runtime\") if pkeys.any? &.nil?\n\n                  value = pkeys.map(&.as({{ pk_type }})).to_db(Enumerable({{ pk_type }}))\n                {% else %}\n                  pkey = value.unsafe_as({{ type[\"reference_type\"] }}).raw_primary_key\n\n                  raise ArgumentError.new(\"A 'Query#insert' reference argument cannot have its primary key value equal to 'DB::Default' in the runtime\") if pkey.is_a?(DB::Default.class)\n\n                  raise ArgumentError.new(\"A 'Query#insert' reference argument cannot have its primary key value equal to Nil in the runtime\") if pkey.nil?\n\n                  value = pkey.as({{ pk_type }}).to_db\n                {% end %}\n\n                ensure_insert << Insert.new(\n                  name: {{ type[\"key\"] }},\n                  value: value\n                )\n\n              # insert(author_id: 42) # \"INSERT INTO posts (author_id) VALUES (?)\", 42\n              when {{ type[\"key\"].id.symbolize }}\n                ensure_insert << Insert.new(\n                  name: {{ type[\"key\"] }},\n                  value: {% if type[\"enumerable\"] %}\n                    value.unsafe_as({{ pk_type }}).to_db,\n                  {% else %}\n                    value.unsafe_as(Enumerable({{ pk_type }})).to_db(Enumerable({{ pk_type }}))\n                  {% end %}\n                )\n            {% end %}\n          else\n            raise \"Bug: unexpected key '#{key}'\"\n          end\n        end\n      {% end %}\nself.type = :insert\nself\n"}},{"id":"join(reference:T::Reference,*,type_type:JoinType=:inner,as_as:String=reference.to_s.underscore,select_select:Char|String|Enumerable(String|Char)|Nil=nil)-instance-method","html_id":"join(reference:T::Reference,*,type_type:JoinType=:inner,as_as:String=reference.to_s.underscore,select_select:Char|String|Enumerable(String|Char)|Nil=nil)-instance-method","name":"join","doc":"Add `JOIN` clause by *reference*.\n\n```\nclass User\n  schema users do\n    pkey id : Int32\n    type posts : Array(Post), foreign_key: \"author_id\"\n  end\nend\n\nclass Post\n  schema posts do\n    pkey id : Int32\n    type author : User, key: \"author_id\"\n    type content : String\n  end\nend\n\nPost.join(:author)\n# SELECT posts.* FROM posts JOIN users ON posts.author_id = author.id AS author\n\nUser.join(:posts, select: {Post.id, Post.content})\n# SELECT users.*, '' AS _posts, posts.id, posts.content FROM users JOIN posts ON posts.author_id = users.id\n```\n\nIf `#select` hasn't been called before, a `#select(T)` call is made to ensure the model itself is selected along with the joined reference.\n\nNote that if you call `#select` with any of curent model columns **after** `#join` for the first time, it will lead to repeated columns and therefore to `DB::MappingException`:\n\n```\nPost.join(:author, select: {\"id\"}).select(:id)\n# SELECT posts.*, '' AS author, author.id, posts.id ...\n#                                                ^ error\n\nPost.select(:id).join(:author, select: {\"id\"})\n# SELECT posts.id, '' AS author, author.id\n# OK                                        ^ error\n\nPost.select(:id).join(:author, select: {\"id\"}).select(:content)\n# SELECT posts.id, '' AS author, author.id, posts.content\n# OK, but may lead to confusion if author has \"content\" column\n```\n\nNOTE: Direct enumerable reference joins are forbidden at the moment, e.g. you can't join `:tags` with `type tags : Array(Tag), key: \"tag_ids\"`.\n\nNOTE: *select*s are modified like `\"{as}.{select}\"`.\n\nTODO: Allow to `select:` by *reference* `Attrubute`, e.g. `select: {:content}`.","summary":"<p>Add <code>JOIN</code> clause by <em>reference</em>.</p>","abstract":false,"args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"_type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"_select","doc":null,"default_value":"nil","external_name":"select","restriction":"Char | String | Enumerable(String | Char) | Nil"}],"args_string":"(reference : T::Reference, *, type _type : JoinType = <span class=\"n\">:inner</span>, as _as : String = reference.to_s.underscore, select _select : Char | String | Enumerable(String | Char) | Nil = <span class=\"n\">nil</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L96","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L96","def":{"name":"join","args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"_type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"_select","doc":null,"default_value":"nil","external_name":"select","restriction":"Char | String | Enumerable(String | Char) | Nil"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"on = if reference.direct?\n  \"#{T.table}.#{reference.key} = #{_as}.#{reference.primary_key}\"\nelse\n  \"#{_as}.#{reference.foreign_key} = #{T.table}.#{T.primary_key.key}\"\nend\nif _select\n  if self.select.empty?\n    self.select(T)\n  end\n  self.select(\"'' AS _#{reference.to_s.underscore}\")\n  if _select.is_a?(Enumerable)\n    _select.each do |s|\n      self.select(_as ? (_as + '.') + s : s)\n    end\n  else\n    self.select(_as ? (_as + '.') + _select : _select)\n  end\nend\njoin(reference.table, on, type: _type, as: _as)\n"}},{"id":"join(table:String,on:String,*,type_type:JoinType=:inner,as_as:String?=nil)-instance-method","html_id":"join(table:String,on:String,*,type_type:JoinType=:inner,as_as:String?=nil)-instance-method","name":"join","doc":"Add `JOIN` clause by *table* *on*.\n\n```\nPost.join(\"users\", \"author.id = posts.author_id\", as: \"author\")\n# SELECT FROM posts JOIN users ON author.id = posts.author_id AS author\n```","summary":"<p>Add <code>JOIN</code> clause by <em>table</em> <em>on</em>.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"_type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | Nil"}],"args_string":"(table : String, on : String, *, type _type : JoinType = <span class=\"n\">:inner</span>, as _as : String? = <span class=\"n\">nil</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L36","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L36","def":{"name":"join","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"_type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | Nil"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @join.nil?\n  @join = Array(Join).new\nend\n@join.not_nil! << Join.new(type: _type, table: table, alias: _as, on: on)\nself\n"}},{"id":"last-instance-method","html_id":"last-instance-method","name":"last","doc":"Alias of `#order_by(T.primary_key, :desc).one`.","summary":"<p>Alias of <code><a href=\"../Atom/Query.html#order_by%28value%3AT%3A%3AAttribute%7CString%2Corder%3AOrder%3F%3DOrder%3A%3AAsc%29-instance-method\">#order_by(T.primary_key, :desc)</a><a href=\"../Atom/Query.html#one-instance-method\">.one</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L74","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L74","def":{"name":"last","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(order_by(T.primary_key, :desc)).one"}},{"id":"left_join(reference:T::Reference,**nargs)-instance-method","html_id":"left_join(reference:T::Reference,**nargs)-instance-method","name":"left_join","doc":"Alias of `#join(reference, type: :left)`.","summary":"<p>Alias of <code>#join(reference, type: :left)</code>.</p>","abstract":false,"args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"}],"args_string":"(reference : T::Reference, **nargs)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","def":{"name":"left_join","args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"join(reference, **nargs, type: :left)"}},{"id":"left_join(table:String,on:String)-instance-method","html_id":"left_join(table:String,on:String)-instance-method","name":"left_join","doc":"Alias of `#join(table, on, type: :left)`.","summary":"<p>Alias of <code>#join(table, on, type: :left)</code>.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"}],"args_string":"(table : String, on : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","def":{"name":"left_join","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"join(table, on, type: :left)"}},{"id":"limit(limit:Int32?=nil)-instance-method","html_id":"limit(limit:Int32?=nil)-instance-method","name":"limit","doc":"Add `LIMIT` clause. Unset with `nil`.","summary":"<p>Add <code>LIMIT</code> clause.</p>","abstract":false,"args":[{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | Nil"}],"args_string":"(limit : Int32? = <span class=\"n\">nil</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/limit.cr#L7","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/limit.cr#L7","def":{"name":"limit","args":[{"name":"limit","doc":null,"default_value":"nil","external_name":"limit","restriction":"Int32 | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@limit = limit\nself\n"}},{"id":"offset(offset:Int32?)-instance-method","html_id":"offset(offset:Int32?)-instance-method","name":"offset","doc":"Add `OFFSET` clause. Unset with `nil`.","summary":"<p>Add <code>OFFSET</code> clause.</p>","abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Int32 | Nil"}],"args_string":"(offset : Int32?)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/offset.cr#L7","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/offset.cr#L7","def":{"name":"offset","args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Int32 | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@offset = offset\nself\n"}},{"id":"one-instance-method","html_id":"one-instance-method","name":"one","doc":"Alias of `#limit(1)`.","summary":"<p>Alias of <code><a href=\"../Atom/Query.html#limit%28limit%3AInt32%3F%3Dnil%29-instance-method\">#limit(1)</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L64","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L64","def":{"name":"one","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(1)"}},{"id":"or-instance-method","html_id":"or-instance-method","name":"or","doc":"A shorthand for calling `or_where` or `or_having` depending on the latest call.","summary":"<p>A shorthand for calling <code><a href=\"../Atom/Query.html#or_where-instance-method\">#or_where</a></code> or <code><a href=\"../Atom/Query.html#or_having%28clause%3AString%29-instance-method\">#or_having</a></code> depending on the latest call.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","def":{"name":"or","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"Cannot call 'Atom::Query(#{T})#having with named arguments'\")\nelse\n  or_where(**args)\nend"}},{"id":"or_having(clause:String)-instance-method","html_id":"or_having(clause:String)-instance-method","name":"or_having","doc":"Add `OR` *clause* to `HAVING`.\n\n```\nor_having(\"count = 42\")\n# HAVING (...) OR (count = 42)\n```","summary":"<p>Add <code>OR</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"or_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: true, not: false)"}},{"id":"or_having(clause:String,*params)-instance-method","html_id":"or_having(clause:String,*params)-instance-method","name":"or_having","doc":"Add `OR` *clause* with *params* to `HAVING`.\n\n```\nor_having(\"count = ?\", 42)\n# HAVING (...) OR (count = ?)\n```","summary":"<p>Add <code>OR</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"or_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: true, not: false)"}},{"id":"or_having_not(clause:String)-instance-method","html_id":"or_having_not(clause:String)-instance-method","name":"or_having_not","doc":"Add `OR NOT` *clause* to `HAVING`.\n\n```\nor_having_not(\"count = 42\")\n# HAVING (...) OR NOT (count = 42)\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"or_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: true, not: true)"}},{"id":"or_having_not(clause:String,*params)-instance-method","html_id":"or_having_not(clause:String,*params)-instance-method","name":"or_having_not","doc":"Add `OR NOT` *clause* with *params* to `HAVING`.\n\n```\nor_having_not(\"count = ?\", 42)\n# HAVING (...) OR NOT (count = ?)\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L98","def":{"name":"or_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: true, not: true)"}},{"id":"or_not-instance-method","html_id":"or_not-instance-method","name":"or_not","doc":"A shorthand for calling `or_where_not` or `or_having_not` depending on the latest call.","summary":"<p>A shorthand for calling <code><a href=\"../Atom/Query.html#or_where_not-instance-method\">#or_where_not</a></code> or <code><a href=\"../Atom/Query.html#or_having_not%28clause%3AString%29-instance-method\">#or_having_not</a></code> depending on the latest call.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L138","def":{"name":"or_not","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"Cannot call 'Atom::Query(#{T})#having with named arguments'\")\nelse\n  or_where_not(**args)\nend"}},{"id":"or_where(clause:String)-instance-method","html_id":"or_where(clause:String)-instance-method","name":"or_where","doc":"Add `OR` *clause* to `WHERE`.\n\n```\nor_where(\"id = 42\")\n# WHERE (...) OR (id = 42)\n```","summary":"<p>Add <code>OR</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"or_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: true, not: false)"}},{"id":"or_where(clause:String,*params)-instance-method","html_id":"or_where(clause:String,*params)-instance-method","name":"or_where","doc":"Add `OR` *clause* with *params* to `WHERE`.\n\n```\nor_where(\"id = ?\", 42)\n# WHERE (...) OR (id = ?)\n```","summary":"<p>Add <code>OR</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"or_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: true, not: false)"}},{"id":"or_where-instance-method","html_id":"or_where-instance-method","name":"or_where","doc":"Add `OR` clause with named arguments to `WHERE`.\n\n```\nor_where(id: 42)\n# WHERE (...) OR (id = ?)\n```","summary":"<p>Add <code>OR</code> clause with named arguments to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"or_where","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: true, not: false)"}},{"id":"or_where_not(clause:String)-instance-method","html_id":"or_where_not(clause:String)-instance-method","name":"or_where_not","doc":"Add `OR NOT` *clause* to `WHERE`.\n\n```\nor_where_not(\"id = 42\")\n# WHERE (...) OR NOT (id = 42)\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"or_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: true, not: true)"}},{"id":"or_where_not(clause:String,*params)-instance-method","html_id":"or_where_not(clause:String,*params)-instance-method","name":"or_where_not","doc":"Add `OR NOT` *clause* with *params* to `WHERE`.\n\n```\nor_where_not(\"id = ?\", 42)\n# WHERE (...) OR NOT (id = ?)\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"or_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: true, not: true)"}},{"id":"or_where_not-instance-method","html_id":"or_where_not-instance-method","name":"or_where_not","doc":"Add `OR NOT` clause with named arguments to `WHERE`.\n\n```\nor_where_not(id: 42)\n# WHERE (...) OR NOT (id = ?)\n```","summary":"<p>Add <code>OR NOT</code> clause with named arguments to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L227","def":{"name":"or_where_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: true, not: true)"}},{"id":"order_by(value:T::Attribute|String,order:Order?=Order::Asc)-instance-method","html_id":"order_by(value:T::Attribute|String,order:Order?=Order::Asc)-instance-method","name":"order_by","doc":"Add `ORDER BY` clause. Similar to `#select` and `#returning`, if *value* is a Schema attribute, it's checked in compile-time:\n\n```\nUser.order_by(:uuid, :desc) # Would raise if `User` doesn't have attribute named `uuid`\n# ORDER BY uuid DESC\n\nUser.order_by(\"foo\") # Will not checked at compile-time\n# ORDER BY foo ASC\n```","summary":"<p>Add <code>ORDER BY</code> clause.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T::Attribute | String"},{"name":"order","doc":null,"default_value":"Order::Asc","external_name":"order","restriction":"Order | Nil"}],"args_string":"(value : T::Attribute | String, order : Order? = <span class=\"t\">Order</span><span class=\"t\">::</span><span class=\"t\">Asc</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L35","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L35","def":{"name":"order_by","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T::Attribute | String"},{"name":"order","doc":null,"default_value":"Order::Asc","external_name":"order","restriction":"Order | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @order_by.nil?\n  @order_by = Array(OrderBy).new\nend\n@order_by.not_nil! << OrderBy.new(column: value.is_a?(String) ? value : (\"#{T.table}.#{value.key}\"), order: order)\nself\n"}},{"id":"params:Array(DB::Any|Array(DB::Any))?-instance-method","html_id":"params:Array(DB::Any|Array(DB::Any))?-instance-method","name":"params","doc":"An array of DB params for this query. It's filled up only after `#to_s` call.","summary":"<p>An array of DB params for this query.</p>","abstract":false,"args":[],"args_string":" : Array(DB::Any | Array(DB::Any))?","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L45","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L45","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(DB::Any | Array(DB::Any)) | Nil","visibility":"Public","body":"@params"}},{"id":"returning-instance-method","html_id":"returning-instance-method","name":"returning","doc":"It's a public property because it's smart to allow repository to change `returning` based on query type (query, exec or scalar).","summary":"<p>It's a public property because it's smart to allow repository to change <code><a href=\"../Atom/Query.html#returning-instance-method\">#returning</a></code> based on query type (query, exec or scalar).</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr#L6","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr#L6","def":{"name":"returning","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@returning"}},{"id":"returning(*values:T::Attribute|String|Char)-instance-method","html_id":"returning(*values:T::Attribute|String|Char)-instance-method","name":"returning","doc":"Add `RETURNING` clause.\n\nSimilar to `#select` and `#order_by`, if *value* is a Schema attribute, it's checked in compile-time:\n\n```\nUser.insert(name: \"Foo\").returning(:id) # Would raise in compile-time if `User` doesn't have attribute named `id`\n# INSERT INTO users (name) VALUES (?) RETURNING users.id\n```","summary":"<p>Add <code>RETURNING</code> clause.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Attribute | String | Char"}],"args_string":"(*values : T::Attribute | String | Char)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr#L16","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr#L16","def":{"name":"returning","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Attribute | String | Char"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @returning.nil?\n  @returning = Array(String | Char).new\nend\n@returning.not_nil!.concat(values.map do |value|\n  case value\n  when T::Attribute\n    \"#{T.table}.#{value.key}\"\n  else\n    value\n  end\nend)\nself\n"}},{"id":"returning=(returning)-instance-method","html_id":"returning=(returning)-instance-method","name":"returning=","doc":"It's a public property because it's smart to allow repository to change `returning` based on query type (query, exec or scalar).","summary":"<p>It's a public property because it's smart to allow repository to change <code><a href=\"../Atom/Query.html#returning-instance-method\">#returning</a></code> based on query type (query, exec or scalar).</p>","abstract":false,"args":[{"name":"returning","doc":null,"default_value":"","external_name":"returning","restriction":""}],"args_string":"(returning)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr#L6","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/returning.cr#L6","def":{"name":"returning=","args":[{"name":"returning","doc":null,"default_value":"","external_name":"returning","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@returning = returning"}},{"id":"right_join(table:String,on:String)-instance-method","html_id":"right_join(table:String,on:String)-instance-method","name":"right_join","doc":"Alias of `#join(table, on, type: :right)`.","summary":"<p>Alias of <code>#join(table, on, type: :right)</code>.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"}],"args_string":"(table : String, on : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","def":{"name":"right_join","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"join(table, on, type: :right)"}},{"id":"right_join(reference:T::Reference,**nargs)-instance-method","html_id":"right_join(reference:T::Reference,**nargs)-instance-method","name":"right_join","doc":"Alias of `#join(reference, type: :right)`.","summary":"<p>Alias of <code>#join(reference, type: :right)</code>.</p>","abstract":false,"args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"}],"args_string":"(reference : T::Reference, **nargs)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L128","def":{"name":"right_join","args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"join(reference, **nargs, type: :right)"}},{"id":"select(*values:T.class|T::Attribute|String|Char)-instance-method","html_id":"select(*values:T.class|T::Attribute|String|Char)-instance-method","name":"select","doc":"Add `SELECT` clause. Marks the query as select one.\n\nSimilar to `#returning` and `#order_by`, if *value* is a Schema attribute, it's checked in compile-time:\n\n```\nUser.select(:id) # Would raise in compile-time if `User` doesn't have attribute named `id`\n# SELECT user.id FROM users\n\nUser.select(\"foo\")\n# SELECT foo FROM users\n```\n\nIf `#select` is not called and the query type is select, a default `SELECT table.*` is appended.","summary":"<p>Add <code>SELECT</code> clause.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T.class | T::Attribute | String | Char"}],"args_string":"(*values : T.class | T::Attribute | String | Char)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/select.cr#L19","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/select.cr#L19","def":{"name":"select","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T.class | T::Attribute | String | Char"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@select.concat(values.map do |value|\n  case value\n  when T.class\n    \"#{T.table}.*\"\n  when T::Attribute\n    \"#{T.table}.#{value.key}\"\n  else\n    value\n  end\nend)\nself.type = :select\nself\n"}},{"id":"set(clause:String)-instance-method","html_id":"set(clause:String)-instance-method","name":"set","doc":"Add `SET` clause without params.\n\nMarks the query as update one, however, should be called after `#update` for readability.\n\n```\nUser.update.set(\"updated_at = NOW()\")\n# UPDATE users SET updated_at = NOW()\n\nUser.set(\"updated_at = NOW()\")\n# ditto\n```","summary":"<p>Add <code>SET</code> clause without params.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr#L53","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr#L53","def":{"name":"set","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_set << SetStruct.new(clause: clause, params: nil)\nself.update\n"}},{"id":"set(clause:String,*params:DB::Any|Array(DB::Any))-instance-method","html_id":"set(clause:String,*params:DB::Any|Array(DB::Any))-instance-method","name":"set","doc":"Add `SET` clause with params.\n\nMarks the query as update one, however, should be called after `#update` for readability.\n\n```\nUser.update.set(\"name = ?\", \"foo\").where(id: 42)\n# UPDATE users SET name = ? WHERE id = ?\n\nUser.set(\"name = ?\", \"foo\").where(id: 42)\n# ditto\n```","summary":"<p>Add <code>SET</code> clause with params.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"args_string":"(clause : String, *params : DB::Any | Array(DB::Any))","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr#L27","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr#L27","def":{"name":"set","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_set << SetStruct.new(clause: clause, params: params.to_a.map do |param|\n  if param.is_a?(Array)\n    param.map do |__arg0|\n      __arg0.as(DB::Any)\n    end\n  else\n    param.as(DB::Any | Array(DB::Any))\n  end\nend)\nself.update\n"}},{"id":"set:selfforallValues-instance-method","html_id":"set:selfforallValues-instance-method","name":"set","doc":"Add `SET` clause with named arguments. Marks the query as update one.\n\nArguments are validated at compilation time. To pass the validation, an argument type must be `<=` compared to the defined attribute type:\n\n```\nclass User\n  schema users do\n    type id : Int32\n    type active : Bool = DB::Default\n  end\nend\n\nUser.update.set(active: false).where(id: 42)\n# UPDATE users SET active = ? WHERE id = ?\n\nUser.update.set(unknown: \"foo\") # Compilation time error\nUser.update.set(active: \"foo\")  # Compilation time error\n```\n\nSpecial value `DB::Default` is allowed as well:\n\n```\nUser.update.set(active: DB::Default) # UPDATE users SET active = DEFAULT\n```","summary":"<p>Add <code>SET</code> clause with named arguments.</p>","abstract":false,"args":[],"args_string":" : self forall Values","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr#L86","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/set.cr#L86","def":{"name":"set","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**Values"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% for key, value in Values %}\n        {% found = false %}\n\n        {% for type in (T::MODEL_ATTRIBUTES + T::MODEL_REFERENCES.select do |t|\n  t[\"direct\"]\nend) %}\n          {% type = type %}\n          {% value = value %}\n\n          # In cases like `#insert(author_id: 42)` check against reference's primary key type\n          {% _type = (type[\"is_reference\"] && (key.stringify == type[\"key\"])) ? type[\"reference_type\"].constant(\"MODEL_PRIMARY_KEY_TYPE\") : type[\"type\"] %}\n\n          # First case is `#insert(id: 42)` or `#insert(author: user)` and the second is `#insert(author_id: 42)` mentioned above\n          {% if (key == type[\"name\"]) || ((key.stringify == type[\"key\"]) && type[\"is_reference\"])\n  if type[\"db_default\"]\n    unless (value <= _type || (value == DB::Default.class)) || (value.union? && value.union_types.all? do |t|\n      t <= _type || (t == DB::Default.class)\n    end)\n      raise(\"Invalid compile-time type '#{value}' for argument '#{type[\"name\"]}' in 'Query#where' call. Expected: '#{_type} | DB::Default.class'\")\n    end\n    found = true\n  else\n    unless value <= _type\n      raise(\"Invalid compile-time type '#{value}' for argument '#{type[\"name\"]}' in 'Query#where' call. Expected: '#{_type}'\")\n    end\n    found = true\n  end\nend %}\n        {% end %}\n\n        {% unless found\n  raise(\"Class '#{T}' doesn't have an attribute with key '#{key}' defined in its Schema eligible for 'Action::Model::Query(#{T})#set' call\")\nend %}\n      {% end %}\n{% if true %}\n        values.each do |key, value|\n          case key\n            {% for type in T::MODEL_ATTRIBUTES.select(&.[](\"key\")) %}\n              # set(id: 42) # \"SET posts.id = ?\", 42\n              when {{ type[\"name\"].symbolize }}{{ unless type[\"name\"].stringify == type[\"key\"]\n  \", #{type[\"key\"].id.symbolize}\".id\nend }}\n                if value.is_a?(DB::Default.class)\n                  set({{ type[\"key\"] }} + \" = DEFAULT\")\n                elsif value.nil?\n                  set({{ type[\"key\"] }} + \" = NULL\")\n                else\n                  set({{ type[\"key\"] }} + \" = ?\",\n                    {% if type[\"enumerable\"] %}\n                      value.unsafe_as({{ type[\"true_type\"] }}).to_db({{ type[\"true_type\"] }}),\n                    {% else %}\n                      value.unsafe_as({{ type[\"true_type\"] }}).to_db,\n                    {% end %}\n                  )\n                end\n            {% end %}\n\n            # Only allow direct references\n            {% for type in T::MODEL_REFERENCES.select do |t|\n  t[\"direct\"]\nend %}\n              {% pk_type = type[\"reference_type\"].constant(\"MODEL_PRIMARY_KEY_TYPE\") %}\n\n              # set(author: user) # \"SET posts.author_id = ?\", user.primary_key\n              when {{ type[\"name\"].symbolize }}\n                if value.is_a?(DB::Default.class)\n                  set({{ type[\"key\"] }} + \" = DEFAULT\")\n                elsif value.nil?\n                  set({{ type[\"key\"] }} + \" = NULL\")\n                else\n                  {% if type[\"enumerable\"] %}\n                    pkeys = value.unsafe_as(Enumerable({{ type[\"reference_type\"] }})).map(&.raw_primary_key)\n\n                    raise ArgumentError.new(\"A 'Query#set' enumerable reference argument cannot have any of its elements' primary key values equal to 'DB::Default' in the runtime\") if pkeys.any? &.is_a?(DB::Default.class)\n\n                    raise ArgumentError.new(\"A 'Query#set' enumerable reference argument cannot have any of its elements' primary key values equal to Nil in the runtime\") if pkeys.any? &.nil?\n\n                    value = pkeys.map(&.as({{ pk_type }})).to_db(Enumerable({{ pk_type }}))\n                  {% else %}\n                    pkey = value.unsafe_as({{ type[\"reference_type\"] }}).raw_primary_key\n\n                    raise ArgumentError.new(\"A 'Query#set' reference argument cannot have its primary key value equal to 'DB::Default' in the runtime\") if pkey.is_a?(DB::Default.class)\n\n                    raise ArgumentError.new(\"A 'Query#set' reference argument cannot have its primary key value equal to Nil in the runtime\") if pkey.nil?\n\n                    value = pkey.as({{ pk_type }}).to_db\n                  {% end %}\n\n                  set(\n                    {{ type[\"key\"] }} + \" = ?\",\n                    value\n                  )\n                end\n\n              # set(author_id: 42) # \"SET posts.author_id = ?\", 42\n              when {{ type[\"key\"].id.symbolize }}\n                if value.is_a?(DB::Default.class)\n                  set({{ type[\"key\"] }} + \" = DEFAULT\")\n                elsif value.nil?\n                  set({{ type[\"key\"] }} + \" = NULL\")\n                else\n                  set(\n                    {{ type[\"key\"] }} + \" = ?\",\n                    {% if type[\"enumerable\"] %}\n                      value.unsafe_as({{ pk_type }}).to_db,\n                    {% else %}\n                      value.unsafe_as(Enumerable({{ pk_type }})).to_db(Enumerable({{ pk_type }}))\n                    {% end %}\n                  )\n                end\n            {% end %}\n          else\n            raise \"Bug: unexpected key '#{key}'\"\n          end\n        end\n      {% end %}\nself.update\n"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Build this query into plain SQL string. `#params` are set after the query is built.\n\nDepending on query `#type`, a list blocks to append differs:\n\n- Insert query would append `#insert` and `#returning` clauses\n- Select query would append `#select`, `#join`, `#where`, `#group_by`, `#having`, `#order_by`, `#limit` and `#offset` clauses\n- Update query would append `#set`, `#where` and `#returning` clauses\n- Delete query would append `#where` and `#returning` clauses\n\nNOTE: When calling `Atom::Repository#exec` with insert, update or delete query, its `#returning` is forced to be `nil`. Similarly, when calling `Atom::Repository#query` with insert, update or delete query, `#returning` is called with `'*'` if not set before.","summary":"<p>Build this query into plain SQL string.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L88","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L88","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @params.nil?\nelse\n  @params.not_nil!.clear\nend\nquery = \"\"\ncase type\nwhen Type::Insert\n  query = query + \"INSERT INTO #{T.table}\"\n  append_insert(query)\n  append_returning(query)\nwhen Type::Select\n  append_select(query)\n  query = query + \" FROM #{T.table}\"\n  append_join(query)\n  append_where(query)\n  append_group_by(query)\n  append_having(query)\n  append_order_by(query)\n  append_limit(query)\n  append_offset(query)\nwhen Type::Update\n  query = query + \"UPDATE #{T.table} SET\"\n  append_set(query)\n  append_where(query)\n  append_returning(query)\nwhen Type::Delete\n  query = query + \"DELETE FROM #{T.table}\"\n  append_where(query)\n  append_returning(query)\nend\nquery.strip\n"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":"This query `Type`.","summary":"<p>This query <code><a href=\"../Atom/Query/Type.html\">Type</a></code>.</p>","abstract":false,"args":[],"args_string":" : Type","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L30","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L30","def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@type"}},{"id":"type=(type:Type)-instance-method","html_id":"type=(type:Type)-instance-method","name":"type=","doc":"This query `Type`.","summary":"<p>This query <code><a href=\"../Atom/Query/Type.html\">Type</a></code>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"args_string":"(type : Type)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L30","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L30","def":{"name":"type=","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Type"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = type"}},{"id":"update-instance-method","html_id":"update-instance-method","name":"update","doc":"Mark this query as update one. Call `#set` afterwards.","summary":"<p>Mark this query as update one.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L33","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L33","def":{"name":"update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.type = :update\nself\n"}},{"id":"where(clause:String,*params:DB::Any|Array(DB::Any),or:Bool=false,not:Bool=false)-instance-method","html_id":"where(clause:String,*params:DB::Any|Array(DB::Any),or:Bool=false,not:Bool=false)-instance-method","name":"where","doc":"Add `WHERE` *clause* with *params*.\n\n```\nquery.where(\"id = ?\", 42) # WHERE (id = ?)\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery.where(\"id = ?\", 42).where(\"foo = ?\", \"bar\")\n# WHERE (id = ?) AND (foo = ?)\n```\n\nSee also `#and`, `#or`, `#and_where`, `#and_where_not`, `#or_where`, `#or_where_not`.","summary":"<p>Add <code>WHERE</code> <em>clause</em> with <em>params</em>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, *params : DB::Any | Array(DB::Any), or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L32","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L32","def":{"name":"where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_where << Where.new(clause: clause, params: params.to_a.map do |param|\n  if param.is_a?(Array)\n    param.map do |__arg0|\n      __arg0.as(DB::Any)\n    end\n  else\n    param.as(DB::Any | Array(DB::Any))\n  end\nend, or: or, not: not)\n@latest_wherish_clause = :where\nself\n"}},{"id":"where(or:Bool=false,not:Bool=false,**values:**Values):selfforallValues-instance-method","html_id":"where(or:Bool=false,not:Bool=false,**values:**Values):selfforallValues-instance-method","name":"where","doc":"Add `WHERE` clause with named arguments. All clauses in a single call are concatenated with `AND`.\n\nArguments are validated at compilation time. To pass the validation, an argument type must be `<=` compared to the defined attribute type:\n\n```\nclass User\n  schema users do\n    type id : Int32\n    type active : Bool = DB::Default\n    type age : Int32\n  end\nend\n\nUser.where(active: true, age: 18)\n# SELECT users.* FROM users WHERE (active = ? AND age = ?)\n\nUser.where(unknown: \"foo\") # Compilation time error\nUser.where(age: \"foo\")     # Compilation time error\n```\n\nSee also `#and`, `#or`, `#and_where`, `#and_where_not`, `#or_where`, `#or_where_not`.","summary":"<p>Add <code>WHERE</code> clause with named arguments.</p>","abstract":false,"args":[{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>, **values : **Values) : self forall Values","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L99","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L99","def":{"name":"where","args":[{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**Values"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% for key, value in Values %}\n        {% found = false %}\n\n        {% for type in (T::MODEL_ATTRIBUTES + T::MODEL_REFERENCES.select do |t|\n  t[\"direct\"] && (!t[\"enumerable\"])\nend) %}\n          {% type = type %} # Say hi to a Crystal bug, \"begin\" doesn't help :)\n          {% value = value %}\n\n          # In cases like `#where(author_id: 42)` check against reference's primary key type\n          {% _type = (type[\"is_reference\"] && (key.stringify == type[\"key\"])) ? type[\"reference_type\"].constant(\"MODEL_PRIMARY_KEY_TYPE\") : type[\"type\"] %}\n\n          # First case is `#where(id: 42)` or `#where(author: user)` and the second is `#where(author_id: 42)` mentioned above\n          {% if (key == type[\"name\"]) || ((key.stringify == type[\"key\"]) && type[\"is_reference\"])\n  unless value <= _type\n    raise(\"Invalid compile-time type '#{value}' for argument '#{type[\"name\"]}' in 'Query#where' call. Expected: '#{_type}'\")\n  end\n  found = true\nend %}\n        {% end %}\n\n        {% unless found\n  raise(\"Class '#{T}' doesn't have an attribute with key '#{key}' defined in its Schema eligible for 'Action::Model::Query(#{T})#where' call\")\nend %}\n      {% end %}\n{% if true %}\n        internal_clauses = uninitialized String[{{ Values.size }}]\n        internal_params = Array(DB::Any | Array(DB::Any)).new\n\n        values.each_with_index do |key, value, index|\n          if value.nil?\n            case key\n              # where(id: nil) # \"WHERE posts.id IS NULL\"\n              {% for type in T::MODEL_ATTRIBUTES.select(&.[](\"key\")) %}\n                when {{ type[\"name\"].symbolize }}{{ unless type[\"name\"].stringify == type[\"key\"]\n  \", #{type[\"key\"].id.symbolize}\".id\nend }}\n                  internal_clauses[index] = \"#{T.table}.#{{{ type[\"key\"] }}} IS NULL\"\n              {% end %}\n\n              {% for type in T::MODEL_REFERENCES.select do |t|\n  t[\"direct\"] && (!t[\"enumerable\"])\nend %}\n                # where(author: nil) # \"WHERE posts.author_id IS NULL\"\n                when {{ type[\"name\"].symbolize }}\n                  internal_clauses[index] = \"#{T.table}.#{{{ type[\"key\"] }}} IS NULL\"\n\n                # where(author_id: nil) # \"WHERE posts.author_id IS NULL\"\n                when {{ type[\"key\"].id.symbolize }}\n                  internal_clauses[index] = \"#{T.table}.#{{{ type[\"key\"] }}} IS NULL\"\n              {% end %}\n            else\n              raise \"Bug: unexpected key '#{key}'\"\n            end\n          else\n            case key\n              {% for type in T::MODEL_ATTRIBUTES.select(&.[](\"key\")) %}\n                # where(id: 42) # \"WHERE posts.id = ?\", 42\n                when {{ type[\"name\"].symbolize }}{{ unless type[\"name\"].stringify == type[\"key\"]\n  \", #{type[\"key\"].id.symbolize}\".id\nend }}\n                  internal_clauses[index] = \"#{T.table}.#{{{ type[\"key\"] }}} = ?\"\n\n                  internal_params << {% if type[\"enumerable\"] %}\n                    value.unsafe_as({{ type[\"true_type\"] }}).to_db({{ type[\"true_type\"] }})\n                  {% else %}\n                    value.unsafe_as({{ type[\"true_type\"] }}).to_db\n                  {% end %}\n              {% end %}\n\n              # Only allow direct non-enumerable references\n              {% for type in T::MODEL_REFERENCES.select do |t|\n  t[\"direct\"] && (!t[\"enumerable\"])\nend %}\n                # where(author: user) # \"WHERE posts.author_id = ?\", user.primary_key\n                when {{ type[\"name\"].symbolize }}\n                  internal_clauses[index] = \"#{T.table}.#{{{ type[\"key\"] }}} = ?\"\n                  internal_params << value.unsafe_as({{ type[\"reference_type\"] }}).primary_key.to_db\n\n                # where(author_id: 42) # \"WHERE posts.author_id = ?\", 42\n                when {{ type[\"key\"].id.symbolize }}\n                  {% pk_type = type[\"reference_type\"].constant(\"MODEL_PRIMARY_KEY_TYPE\") %}\n\n                  internal_clauses[index] = \"#{T.table}.#{{{ type[\"key\"] }}} = ?\"\n                  internal_params << value.unsafe_as({{ pk_type }}).to_db\n              {% end %}\n            else\n              raise \"Bug: unexpected key '#{key}'\"\n            end\n          end\n        end\n\n        ensure_where << Where.new(\n          clause: internal_clauses.join(\" AND \"),\n          params: internal_params,\n          or: or,\n          not: not\n        )\n\n        @latest_wherish_clause = :where\n\n        self\n      {% end %}\n"}},{"id":"where(clause:String,or:Bool=false,not:Bool=false)-instance-method","html_id":"where(clause:String,or:Bool=false,not:Bool=false)-instance-method","name":"where","doc":"Add `WHERE` *clause* without params.\n\n```\nquery.where(\"id = 42\") # WHERE (id = 42)\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery.where(\"id = ?=42\").where(\"foo = 'bar'\")\n# WHERE (id = 42) AND (foo = 'bar')\n```\n\nSee also `#and`, `#or`, `#and_where`, `#and_where_not`, `#or_where`, `#or_where_not`.","summary":"<p>Add <code>WHERE</code> <em>clause</em> without params.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L65","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L65","def":{"name":"where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_where << Where.new(clause: clause, params: nil, or: or, not: not)\n@latest_wherish_clause = :where\nself\n"}},{"id":"where_not-instance-method","html_id":"where_not-instance-method","name":"where_not","doc":"Add `NOT` clause with named arguments to `WHERE`.\n\n```\nwhere_not(id: 42)\n# WHERE (...) AND NOT (id = ?)\n```","summary":"<p>Add <code>NOT</code> clause with named arguments to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L223","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L223","def":{"name":"where_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, not: true)"}},{"id":"where_not(clause,*params)-instance-method","html_id":"where_not(clause,*params)-instance-method","name":"where_not","doc":"Add `NOT` *clause* with *params* to `WHERE`.\n\n```\nwhere_not(\"id = ?\", 42)\n# WHERE (...) AND NOT (id = ?)\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause, *params)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L203","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L203","def":{"name":"where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, not: true)"}},{"id":"where_not(clause)-instance-method","html_id":"where_not(clause)-instance-method","name":"where_not","doc":"Add `NOT` *clause* to `WHERE`.\n\n```\nwhere_not(\"id = 42\")\n# WHERE (...) AND NOT (id = 42)\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"args_string":"(clause)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L213","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/where.cr#L213","def":{"name":"where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, not: true)"}}],"macros":[],"types":[{"html_id":"github.com/atomframework/model/Atom/Query/Having","path":"Atom/Query/Having.html","kind":"struct","full_name":"Atom::Query::Having","name":"Having","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/atomframework/model/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/atomframework/model/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/query/having.cr","line_number":3,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Query","kind":"struct","full_name":"Atom::Query(T)","name":"Query"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(clause:String,params:Array(DB::Any|Array(DB::Any))?=nil,or:Bool=false,not:Bool=false)-class-method","html_id":"new(clause:String,params:Array(DB::Any|Array(DB::Any))?=nil,or:Bool=false,not:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Array(DB::Any | Array(DB::Any)) | Nil"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, params : Array(DB::Any | Array(DB::Any))? = <span class=\"n\">nil</span>, or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L6","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L6","def":{"name":"new","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Array(DB::Any | Array(DB::Any)) | Nil"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(clause, params, or, not)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"clause:String-instance-method","html_id":"clause:String-instance-method","name":"clause","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","def":{"name":"clause","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@clause"}},{"id":"not:Bool-instance-method","html_id":"not:Bool-instance-method","name":"not","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","def":{"name":"not","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@not"}},{"id":"or:Bool-instance-method","html_id":"or:Bool-instance-method","name":"or","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","def":{"name":"or","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@or"}},{"id":"params:Array(Array(Bool|Float32|Float64|Int32|Int64|Slice(UInt8)|String|Time|Nil)|Bool|Float32|Float64|Int32|Int64|Slice(UInt8)|String|Time|Nil)?-instance-method","html_id":"params:Array(Array(Bool|Float32|Float64|Int32|Int64|Slice(UInt8)|String|Time|Nil)|Bool|Float32|Float64|Int32|Int64|Slice(UInt8)|String|Time|Nil)?-instance-method","name":"params","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Array(Bool | Float32 | Float64 | Int32 | Int64 | Slice(UInt8) | String | Time | Nil) | Bool | Float32 | Float64 | Int32 | Int64 | Slice(UInt8) | String | Time | Nil)?","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/having.cr#L4","def":{"name":"params","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@params"}}],"macros":[],"types":[]},{"html_id":"github.com/atomframework/model/Atom/Query/JoinType","path":"Atom/Query/JoinType.html","kind":"enum","full_name":"Atom::Query::JoinType","name":"JoinType","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/atomframework/model/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/atomframework/model/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/atomframework/model/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/query/join.cr","line_number":4,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Inner","name":"Inner","value":"0","doc":null,"summary":null},{"id":"Left","name":"Left","value":"1","doc":null,"summary":null},{"id":"Right","name":"Right","value":"2","doc":null,"summary":null},{"id":"Full","name":"Full","value":"3","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Query","kind":"struct","full_name":"Atom::Query(T)","name":"Query"},"doc":"Supported join types.","summary":"<p>Supported join types.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"full?-instance-method","html_id":"full?-instance-method","name":"full?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L8","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L8","def":{"name":"full?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Full"}},{"id":"inner?-instance-method","html_id":"inner?-instance-method","name":"inner?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L5","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L5","def":{"name":"inner?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Inner"}},{"id":"left?-instance-method","html_id":"left?-instance-method","name":"left?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L6","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L6","def":{"name":"left?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Left"}},{"id":"right?-instance-method","html_id":"right?-instance-method","name":"right?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L7","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L7","def":{"name":"right?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Right"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L10","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/join.cr#L10","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().upcase"}}],"macros":[],"types":[]},{"html_id":"github.com/atomframework/model/Atom/Query/LatestWherishClause","path":"Atom/Query/LatestWherishClause.html","kind":"enum","full_name":"Atom::Query::LatestWherishClause","name":"LatestWherishClause","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/atomframework/model/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/atomframework/model/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/atomframework/model/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/query.cr","line_number":131,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Where","name":"Where","value":"0","doc":null,"summary":null},{"id":"Having","name":"Having","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Query","kind":"struct","full_name":"Atom::Query(T)","name":"Query"},"doc":"Which clause - `WHERE` or `HAVING` was called the latest?\n:nodoc:","summary":"<p>Which clause - <code>WHERE</code> or <code>HAVING</code> was called the latest? :nodoc:</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"having?-instance-method","html_id":"having?-instance-method","name":"having?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L133","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L133","def":{"name":"having?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Having"}},{"id":"where?-instance-method","html_id":"where?-instance-method","name":"where?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L132","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L132","def":{"name":"where?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Where"}}],"macros":[],"types":[]},{"html_id":"github.com/atomframework/model/Atom/Query/Order","path":"Atom/Query/Order.html","kind":"enum","full_name":"Atom::Query::Order","name":"Order","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/atomframework/model/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/atomframework/model/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/atomframework/model/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/query/order_by.cr","line_number":4,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Asc","name":"Asc","value":"0","doc":null,"summary":null},{"id":"Desc","name":"Desc","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Query","kind":"struct","full_name":"Atom::Query(T)","name":"Query"},"doc":"Possible orders for `ORDER BY` clauses.","summary":"<p>Possible orders for <code>ORDER BY</code> clauses.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"asc?-instance-method","html_id":"asc?-instance-method","name":"asc?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L5","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L5","def":{"name":"asc?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Asc"}},{"id":"desc?-instance-method","html_id":"desc?-instance-method","name":"desc?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L6","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L6","def":{"name":"desc?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Desc"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L8","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query/order_by.cr#L8","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"super().upcase"}}],"macros":[],"types":[]},{"html_id":"github.com/atomframework/model/Atom/Query/Type","path":"Atom/Query/Type.html","kind":"enum","full_name":"Atom::Query::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/atomframework/model/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/atomframework/model/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/atomframework/model/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/query.cr","line_number":22,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Insert","name":"Insert","value":"0","doc":null,"summary":null},{"id":"Select","name":"Select","value":"1","doc":null,"summary":null},{"id":"Update","name":"Update","value":"2","doc":null,"summary":null},{"id":"Delete","name":"Delete","value":"3","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Query","kind":"struct","full_name":"Atom::Query(T)","name":"Query"},"doc":"Possible query SQL types.","summary":"<p>Possible query SQL types.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"delete?-instance-method","html_id":"delete?-instance-method","name":"delete?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L26","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L26","def":{"name":"delete?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Delete"}},{"id":"insert?-instance-method","html_id":"insert?-instance-method","name":"insert?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L23","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L23","def":{"name":"insert?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Insert"}},{"id":"select?-instance-method","html_id":"select?-instance-method","name":"select?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L24","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L24","def":{"name":"select?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Select"}},{"id":"update?-instance-method","html_id":"update?-instance-method","name":"update?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L25","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/query.cr#L25","def":{"name":"update?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Update"}}],"macros":[],"types":[]}]},{"html_id":"github.com/atomframework/model/Atom/Repository","path":"Atom/Repository.html","kind":"class","full_name":"Atom::Repository","name":"Repository","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/repository/exec.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr"},{"filename":"atom/repository/query.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr"},{"filename":"atom/repository/scalar.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr"},{"filename":"atom/repository.cr","line_number":33,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom","kind":"class","full_name":"Atom","name":"Atom"},"doc":"A gateway between models and DB. Its main features are logging, expanding `Atom::Query` instances and mapping models from resulting `DB::ResultSet`.\n\n```\nrepo = Atom::Repository.new(DB.open(ENV[\"DATABASE_URL\"]), Atom::Atom::Repository::Logger::IO.new(STDOUT))\n\nrepo.scalar(\"SELECT 1\").as(Int32)\n# [postgresql] SELECT 1\n# 593μs\n\nrepo.scalar(\"SELECT ?::int\", 1).as(Int32)\n# ditto\n\nrepo.query(\"SELECT * FROM users\")       # Returns raw `DB::ResultSet`\nrepo.query(User, \"SELECT * FROM users\") # Returns `Array(User)`\nrepo.query(User.all)                    # Returns `Array(User)` as well\n# [postgresql] SELECT users.* FROM users\n# 442μs\n# [map] User\n# 101μs\n```","summary":"<p>A gateway between models and DB.</p>","class_methods":[],"constructors":[{"id":"new(db:DB::Database,logger:Atom::Repository::Logger=Atom::Repository::Logger::Dummy.new)-class-method","html_id":"new(db:DB::Database,logger:Atom::Repository::Logger=Atom::Repository::Logger::Dummy.new)-class-method","name":"new","doc":"Initialize the repository.","summary":"<p>Initialize the repository.</p>","abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"DB::Database"},{"name":"logger","doc":null,"default_value":"Atom::Repository::Logger::Dummy.new","external_name":"logger","restriction":"Atom::Repository::Logger"}],"args_string":"(db : DB::Database, logger : Atom::Repository::Logger = <span class=\"t\">Atom</span><span class=\"t\">::</span><span class=\"t\">Repository</span><span class=\"t\">::</span><span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">Dummy</span>.<span class=\"k\">new</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L41","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L41","def":{"name":"new","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"DB::Database"},{"name":"logger","doc":null,"default_value":"Atom::Repository::Logger::Dummy.new","external_name":"logger","restriction":"Atom::Repository::Logger"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(db, logger)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"db:DB::Database-instance-method","html_id":"db:DB::Database-instance-method","name":"db","doc":"A `DB::Database` instance for this repository.","summary":"<p>A <code>DB::Database</code> instance for this repository.</p>","abstract":false,"args":[],"args_string":" : DB::Database","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L35","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L35","def":{"name":"db","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@db"}},{"id":"db=(db)-instance-method","html_id":"db=(db)-instance-method","name":"db=","doc":"A `DB::Database` instance for this repository.","summary":"<p>A <code>DB::Database</code> instance for this repository.</p>","abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"args_string":"(db)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L35","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L35","def":{"name":"db=","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@db = db"}},{"id":"driver_name-instance-method","html_id":"driver_name-instance-method","name":"driver_name","doc":"Return `#db` driver name, e.g. `\"postgresql\"` for `PG::Driver`.","summary":"<p>Return <code><a href=\"../Atom/Repository.html#db%3ADB%3A%3ADatabase-instance-method\">#db</a></code> driver name, e.g.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L59","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L59","def":{"name":"driver_name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n        case db.driver\n        {% if @type.has_constant?(\"PGDefined\") %}\n          when PG::Driver then \"postgresql\"\n        {% end %}\n        else \"sql\"\n        end\n      {% end %}"}},{"id":"exec(sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil):DB::ExecResult-instance-method","html_id":"exec(sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil):DB::ExecResult-instance-method","name":"exec","doc":"Call `db.exec(sql, params)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#exec%28sql%3AString%2Cparams%3AEnumerable%28DB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29%3F%3Dnil%29%3ADB%3A%3AExecResult-instance-method\">.exec(sql, params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"args_string":"(sql : String, params : Enumerable(DB::Any | Array(DB::Any))? = <span class=\"n\">nil</span>) : DB::ExecResult","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr#L13","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr#L13","def":{"name":"exec","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::ExecResult","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver_name}] #{sql}\") do\n  if params\n    db.exec(sql, params.to_a)\n  else\n    db.exec(sql)\n  end\nend\n"}},{"id":"exec(sql:String,*params:DB::Any|Array(DB::Any)):DB::ExecResult-instance-method","html_id":"exec(sql:String,*params:DB::Any|Array(DB::Any)):DB::ExecResult-instance-method","name":"exec","doc":"Call `db.exec(sql, *params)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#exec%28sql%3AString%2Cparams%3AEnumerable%28DB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29%3F%3Dnil%29%3ADB%3A%3AExecResult-instance-method\">.exec(sql, *params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"args_string":"(sql : String, *params : DB::Any | Array(DB::Any)) : DB::ExecResult","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr#L4","def":{"name":"exec","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"DB::ExecResult","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver_name}] #{sql}\") do\n  db.exec(sql, *params)\nend\n"}},{"id":"exec(query:Query)-instance-method","html_id":"exec(query:Query)-instance-method","name":"exec","doc":"Build *query* and call `db.exec(query.to_s, query.params)`.","summary":"<p>Build <em>query</em> and call <code>db<a href=\"../Atom/Repository.html#exec%28sql%3AString%2Cparams%3AEnumerable%28DB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29%3F%3Dnil%29%3ADB%3A%3AExecResult-instance-method\">.exec(query.to_s, query.params)</a></code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"args_string":"(query : Query)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr#L26","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/exec.cr#L26","def":{"name":"exec","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if query.type == (:select)\n  raise(ArgumentError.new(\"Must not call 'Repository#exec' with SELECT Query. Consider using 'Repository#scalar' or 'Repository#query' instead\"))\nend\nquery.returning = nil\nsql = prepare_query(query.to_s)\nif query.params.try(&.any?)\n  exec(sql, query.params)\nelse\n  exec(sql)\nend\n"}},{"id":"logger:Atom::Repository::Logger-instance-method","html_id":"logger:Atom::Repository::Logger-instance-method","name":"logger","doc":"A `Core::Logger` instance for this repository.","summary":"<p>A <code>Core::Logger</code> instance for this repository.</p>","abstract":false,"args":[],"args_string":" : Atom::Repository::Logger","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L38","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L38","def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logger"}},{"id":"logger=(logger)-instance-method","html_id":"logger=(logger)-instance-method","name":"logger=","doc":"A `Core::Logger` instance for this repository.","summary":"<p>A <code>Core::Logger</code> instance for this repository.</p>","abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":""}],"args_string":"(logger)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L38","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L38","def":{"name":"logger=","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logger = logger"}},{"id":"prepare_query(sql_query:String)-instance-method","html_id":"prepare_query(sql_query:String)-instance-method","name":"prepare_query","doc":"Prepare query for initialization.\n\nIf the `#db` driver is `PG::Driver`, replace all `?` with `$1`, `$2` etc. Otherwise return *sql_query* untouched.","summary":"<p>Prepare query for initialization.</p>","abstract":false,"args":[{"name":"sql_query","doc":null,"default_value":"","external_name":"sql_query","restriction":"String"}],"args_string":"(sql_query : String)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L47","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository.cr#L47","def":{"name":"prepare_query","args":[{"name":"sql_query","doc":null,"default_value":"","external_name":"sql_query","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if @type.has_constant?(\"PGDefined\") %}\n        if db.driver.is_a?(PG::Driver)\n          counter = 0\n          sql_query = sql_query.gsub(\"?\") { '$' + (counter += 1).to_s }\n        end\n      {% end %}\nsql_query\n"}},{"id":"query(klass:T.class,sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil):Array(T)forallT-instance-method","html_id":"query(klass:T.class,sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil):Array(T)forallT-instance-method","name":"query","doc":"Call `db.query(sql, params)` and map the result to `Array(T)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.query(sql, params)</a></code> and map the result to <code>Array(T)</code>.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"args_string":"(klass : T.class, sql : String, params : Enumerable(DB::Any | Array(DB::Any))? = <span class=\"n\">nil</span>) : Array(T) forall T","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L35","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L35","def":{"name":"query","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"rs = query(sql, params)\n@logger.wrap(\"[map] #{{{ T.name.stringify }}}\") do\n  T.from_rs(rs)\nend\n"}},{"id":"query(query:Atom::Query(T)):Array(T)forallT-instance-method","html_id":"query(query:Atom::Query(T)):Array(T)forallT-instance-method","name":"query","doc":"Build *query*, call `db.query(sql, params)` and map the result it to `Array(T)` afterwards.","summary":"<p>Build <em>query</em>, call <code>db<a href=\"../Atom/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.query(sql, params)</a></code> and map the result it to <code>Array(T)</code> afterwards.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query(T)"}],"args_string":"(query : Atom::Query(T)) : Array(T) forall T","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L44","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L44","def":{"name":"query","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"if (query.type != (:select)) && query.returning.nil?\n  query.returning = ['*'.as(String | Char)]\nend\nsql = query.to_s\nif query.params.try(&.any?)\n  query(T, sql, query.params)\nelse\n  query(T, sql)\nend\n"}},{"id":"query(sql:String,*params:DB::Any|Array(DB::Any))-instance-method","html_id":"query(sql:String,*params:DB::Any|Array(DB::Any))-instance-method","name":"query","doc":"Call `db.query(sql, *params)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.query(sql, *params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"args_string":"(sql : String, *params : DB::Any | Array(DB::Any))","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L4","def":{"name":"query","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver_name}] #{sql}\") do\n  db.query(sql, *params)\nend\n"}},{"id":"query(klass:T.class,sql:String,*params:DB::Any|Array(DB::Any)):Array(T)forallT-instance-method","html_id":"query(klass:T.class,sql:String,*params:DB::Any|Array(DB::Any)):Array(T)forallT-instance-method","name":"query","doc":"Call `db.query(sql, *params)` and map the result to `Array(T)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.query(sql, *params)</a></code> and map the result to <code>Array(T)</code>.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"args_string":"(klass : T.class, sql : String, *params : DB::Any | Array(DB::Any)) : Array(T) forall T","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L26","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L26","def":{"name":"query","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"rs = query(sql, *params)\n@logger.wrap(\"[map] #{{{ T.name.stringify }}}\") do\n  T.from_rs(rs)\nend\n"}},{"id":"query(sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil)-instance-method","html_id":"query(sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil)-instance-method","name":"query","doc":"Call `db.query(sql, params)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.query(sql, params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"args_string":"(sql : String, params : Enumerable(DB::Any | Array(DB::Any))? = <span class=\"n\">nil</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L13","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/query.cr#L13","def":{"name":"query","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver_name}] #{sql}\") do\n  if params\n    db.query(sql, params.to_a)\n  else\n    db.query(sql)\n  end\nend\n"}},{"id":"scalar(query:Query)-instance-method","html_id":"scalar(query:Query)-instance-method","name":"scalar","doc":"Build *query* and call `db.scalar(query.to_s, query.params)`.","summary":"<p>Build <em>query</em> and call <code>db<a href=\"../Atom/Repository.html#scalar%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.scalar(query.to_s, query.params)</a></code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"args_string":"(query : Query)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr#L26","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr#L26","def":{"name":"scalar","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sql = prepare_query(query.to_s)\nif query.params.try(&.any?)\n  scalar(sql, query.params)\nelse\n  scalar(sql)\nend\n"}},{"id":"scalar(sql:String,*params:DB::Any|Array(DB::Any))-instance-method","html_id":"scalar(sql:String,*params:DB::Any|Array(DB::Any))-instance-method","name":"scalar","doc":"Call `db.scalar(sql, *params)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#scalar%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.scalar(sql, *params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"args_string":"(sql : String, *params : DB::Any | Array(DB::Any))","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr#L4","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr#L4","def":{"name":"scalar","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any | Array(DB::Any)"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver_name}] #{sql}\") do\n  db.scalar(sql, *params)\nend\n"}},{"id":"scalar(sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil)-instance-method","html_id":"scalar(sql:String,params:Enumerable(DB::Any|Array(DB::Any))?=nil)-instance-method","name":"scalar","doc":"Call `db.scalar(sql, params)`.","summary":"<p>Call <code>db<a href=\"../Atom/Repository.html#scalar%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%7CArray%28DB%3A%3AAny%29%29-instance-method\">.scalar(sql, params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"args_string":"(sql : String, params : Enumerable(DB::Any | Array(DB::Any))? = <span class=\"n\">nil</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr#L13","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/scalar.cr#L13","def":{"name":"scalar","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any | Array(DB::Any)) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver_name}] #{sql}\") do\n  if params\n    db.scalar(sql, params.to_a)\n  else\n    db.scalar(sql)\n  end\nend\n"}}],"macros":[],"types":[{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","path":"Atom/Repository/Logger.html","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger","abstract":true,"superclass":{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/repository/logger.cr","line_number":2,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/atomframework/model/Atom/Repository/Logger/Dummy","kind":"class","full_name":"Atom::Repository::Logger::Dummy","name":"Dummy"},{"html_id":"github.com/atomframework/model/Atom/Repository/Logger/IO","kind":"class","full_name":"Atom::Repository::Logger::IO","name":"IO"},{"html_id":"github.com/atomframework/model/Atom/Repository/Logger/Standard","kind":"class","full_name":"Atom::Repository::Logger::Standard","name":"Standard"}],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Repository","kind":"class","full_name":"Atom::Repository","name":"Repository"},"doc":"Logs back-end requests (presumably from `Repository`).","summary":"<p>Logs back-end requests (presumably from <code><a href=\"../../Atom/Repository.html\">Repository</a></code>).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":null,"summary":null,"abstract":true,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger.cr#L3","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger.cr#L3","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"github.com/atomframework/model/Atom/Repository/Logger/Dummy","path":"Atom/Repository/Logger/Dummy.html","kind":"class","full_name":"Atom::Repository::Logger::Dummy","name":"Dummy","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},"ancestors":[{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/repository/logger/dummy.cr","line_number":4,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/dummy.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},"doc":"Does not log anything.","summary":"<p>Does not log anything.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":"Does nothing except yielding the *block*.","summary":"<p>Does nothing except yielding the <em>block</em>.</p>","abstract":false,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/dummy.cr#L6","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/dummy.cr#L6","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"yield"}}],"macros":[],"types":[]},{"html_id":"github.com/atomframework/model/Atom/Repository/Logger/IO","path":"Atom/Repository/Logger/IO.html","kind":"class","full_name":"Atom::Repository::Logger::IO","name":"IO","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},"ancestors":[{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/repository/logger/io.cr","line_number":17,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/io.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},"doc":"Logs anything followed by time elapsed by the block run into the specified `IO`.\n```\nlogger = Atom::Repository::Logger::IO.new(STDOUT)\n\nresult = logger.wrap(\"SELECT * FROM users\") do\n  db.query(\"SELECT * FROM users\")\nend\n\n# => SELECT * FROM users\n# => 501μs\n```","summary":"<p>Logs anything followed by time elapsed by the block run into the specified <code><a href=\"../../../Atom/Repository/Logger/IO.html\">IO</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(io:::IO,colors=true)-class-method","html_id":"new(io:::IO,colors=true)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"::IO"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"args_string":"(io : ::IO, colors = <span class=\"n\">true</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/io.cr#L18","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/io.cr#L18","def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"::IO"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, colors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":"Wrap a block, logging elapsed time and returning the result.","summary":"<p>Wrap a block, logging elapsed time and returning the result.</p>","abstract":false,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/io.cr#L22","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/io.cr#L22","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"log(data_to_log)\nstarted_at = Time.monotonic\nresult = yield\nlog_elapsed(TimeFormat.auto(Time.monotonic - started_at))\nresult\n"}}],"macros":[],"types":[]},{"html_id":"github.com/atomframework/model/Atom/Repository/Logger/Standard","path":"Atom/Repository/Logger/Standard.html","kind":"class","full_name":"Atom::Repository::Logger::Standard","name":"Standard","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},"ancestors":[{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},{"html_id":"github.com/atomframework/model/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/repository/logger/standard.cr","line_number":20,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/standard.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/Atom/Repository/Logger","kind":"class","full_name":"Atom::Repository::Logger","name":"Logger"},"doc":"Logs anything followed by elapsed time by the block into a standard `Logger`.\n\n```\nlogger = Logger.new(STDOUT, Logger::Severity::DEBUG)\ncore_logger = Atom::Repository::Logger::Standard(Logger::Severity::INFO).new(logger)\n\nresult = core_logger.wrap(\"SELECT * FROM users\") do\n  db.query(\"SELECT * FROM users\")\nend\n\n# [21:54:51:068]  INFO > SELECT * FROM users\n# [21:54:51:068]  INFO > 501μs\n```","summary":"<p>Logs anything followed by elapsed time by the block into a standard <code><a href=\"../../../Atom/Repository/Logger.html\">Logger</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(logger:::Logger,log_level:::Logger::Severity,colors=true)-class-method","html_id":"new(logger:::Logger,log_level:::Logger::Severity,colors=true)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"::Logger"},{"name":"log_level","doc":null,"default_value":"","external_name":"log_level","restriction":"::Logger::Severity"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"args_string":"(logger : ::Logger, log_level : ::Logger::Severity, colors = <span class=\"n\">true</span>)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/standard.cr#L21","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/standard.cr#L21","def":{"name":"new","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":"::Logger"},{"name":"log_level","doc":null,"default_value":"","external_name":"log_level","restriction":"::Logger::Severity"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(logger, log_level, colors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":"Wrap a block, logging elapsed time at *log_level* and returning the result.","summary":"<p>Wrap a block, logging elapsed time at <em>log_level</em> and returning the result.</p>","abstract":false,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/standard.cr#L25","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/repository/logger/standard.cr#L25","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"log(data_to_log)\nstarted_at = Time.monotonic\nresult = yield\nlog_elapsed(TimeFormat.auto(Time.monotonic - started_at))\nresult\n"}}],"macros":[],"types":[]}]}]}]},{"html_id":"github.com/atomframework/model/DB","path":"DB.html","kind":"module","full_name":"DB","name":"DB","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"lib/db/src/db.cr","line_number":68,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db.cr"},{"filename":"lib/db/src/db/pool.cr","line_number":3,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/pool.cr"},{"filename":"lib/db/src/db/string_key_cache.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/string_key_cache.cr"},{"filename":"lib/db/src/db/query_methods.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/query_methods.cr"},{"filename":"lib/db/src/db/session_methods.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/session_methods.cr"},{"filename":"lib/db/src/db/disposable.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/disposable.cr"},{"filename":"lib/db/src/db/driver.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/driver.cr"},{"filename":"lib/db/src/db/statement.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/statement.cr"},{"filename":"lib/db/src/db/begin_transaction.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/begin_transaction.cr"},{"filename":"lib/db/src/db/connection_context.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/connection_context.cr"},{"filename":"lib/db/src/db/connection.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/connection.cr"},{"filename":"lib/db/src/db/transaction.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/transaction.cr"},{"filename":"lib/db/src/db/pool_statement.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/pool_statement.cr"},{"filename":"lib/db/src/db/database.cr","line_number":4,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/database.cr"},{"filename":"lib/db/src/db/pool_prepared_statement.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/pool_prepared_statement.cr"},{"filename":"lib/db/src/db/pool_unprepared_statement.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/pool_unprepared_statement.cr"},{"filename":"lib/db/src/db/result_set.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/result_set.cr"},{"filename":"lib/db/src/db/error.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/error.cr"},{"filename":"lib/db/src/db/mapping.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/lib/db/src/db/mapping.cr"},{"filename":"atom/ext/db/default.cr","line_number":1,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/ext/db/default.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"The DB module is a unified interface to database access.\nDatabase dialects is supported by custom database driver shards.\nCheck [crystal-lang/crystal-sqlite3](https://github.com/crystal-lang/crystal-sqlite3) for example.\n\nDrivers implementors check `Driver` class.\n\nDB manage a connection pool. The connection pool can be configured by `URI` query. See `Database`.\n\n### Usage\n\nAssuming `crystal-sqlite3` is included a sqlite3 database can be opened with `#open`.\n\n```\ndb = DB.open \"sqlite3:./path/to/db/file.db\"\ndb.close\n```\n\nIf a block is given to `#open` the database is closed automatically\n\n```\nDB.open \"sqlite3:./file.db\" do |db|\n  # work with db\nend # db is closed\n```\n\nIn the code above `db` is a `Database`. Methods available for querying it are described in `QueryMethods`.\n\nThree kind of statements can be performed:\n1. `Database#exec` waits no response from the database.\n2. `Database#scalar` reads a single value of the response.\n3. `Database#query` returns a ResultSet that allows iteration over the rows in the response and column information.\n\nAll of the above methods allows parametrised query. Either positional or named arguments.\n\nCheck a full working version:\n\n```\nrequire \"db\"\nrequire \"sqlite3\"\n\nDB.open \"sqlite3:./file.db\" do |db|\n  db.exec \"create table contacts (name text, age integer)\"\n  db.exec \"insert into contacts values (?, ?)\", \"John Doe\", 30\n\n  args = [] of DB::Any\n  args << \"Sarah\"\n  args << 33\n  db.exec \"insert into contacts values (?, ?)\", args\n\n  puts \"max age:\"\n  puts db.scalar \"select max(age) from contacts\" # => 33\n\n  puts \"contacts:\"\n  db.query \"select name, age from contacts order by age desc\" do |rs|\n    puts \"#{rs.column_name(0)} (#{rs.column_name(1)})\"\n    # => name (age)\n    rs.each do\n      puts \"#{rs.read(String)} (#{rs.read(Int32)})\"\n      # => Sarah (33)\n      # => John Doe (30)\n    end\n  end\nend\n```\n","summary":"<p>The DB module is a unified interface to database access.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/atomframework/model/DB/Default","path":"DB/Default.html","kind":"struct","full_name":"DB::Default","name":"Default","abstract":false,"superclass":{"html_id":"github.com/atomframework/model/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/atomframework/model/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/atomframework/model/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/atomframework/model/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"atom/ext/db/default.cr","line_number":3,"url":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/ext/db/default.cr"}],"repository_name":"github.com/atomframework/model","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/atomframework/model/DB","kind":"module","full_name":"DB","name":"DB"},"doc":"A special type that should be considered as the SQL `DEFAULT` keyword","summary":"<p>A special type that should be considered as the SQL <code>DEFAULT</code> keyword</p>","class_methods":[],"constructors":[{"id":"new-class-method","html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/ext/db/default.cr#L3","source_link":"https://github.com/atomframework/model/blob/68602d567fc6305034bdf8ce6a34a496c45e624b/src/atom/ext/db/default.cr#L3","def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[],"macros":[],"types":[]}]}]}})