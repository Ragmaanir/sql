{"repository_name":"github.com/onyxframework/sql","body":"<a href=\"https://onyxframework.org\"><img width=\"100\" height=\"100\" src=\"https://onyxframework.org/img/logo.svg\"></a>\n\n# Onyx::SQL\n\n[![Built with Crystal](https://img.shields.io/badge/built%20with-crystal-000000.svg?style=flat-square)](https://crystal-lang.org/)\n[![Travis CI build](https://img.shields.io/travis/onyxframework/sql/master.svg?style=flat-square)](https://travis-ci.org/onyxframework/sql)\n[![Docs](https://img.shields.io/badge/docs-online-brightgreen.svg?style=flat-square)](https://docs.onyxframework.org/sql)\n[![API docs](https://img.shields.io/badge/api_docs-online-brightgreen.svg?style=flat-square)](https://api.onyxframework.org/sql)\n[![Latest release](https://img.shields.io/github/release/onyxframework/sql.svg?style=flat-square)](https://github.com/onyxframework/sql/releases)\n\nA deligtful SQL ORM.\n\n## About üëã\n\nOnyx::SQL is a deligthful database-agnostic SQL ORM for [Crystal language](https://crystal-lang.org/). It features a convenient schema definition DSL, type-safe SQL query builder, clean architecture with Repository and more!\n\n## Installation üì•\n\nAdd these lines to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  onyx:\n    github: onyxframework/onyx\n    version: ~> 0.3.0\n  onyx-sql:\n    github: onyxframework/sql\n    version: ~> 0.7.0\n```\n\nThis shard follows [Semantic Versioning v2.0.0](http://semver.org/), so check [releases](https://github.com/onyxframework/rest/releases) and change the `version` accordingly. Please visit [github.com/crystal-lang/shards](https://github.com/crystal-lang/shards) to know more about Crystal shards.\n\nYou'd also need to add a database dependency conforming to the [crystal-db](https://github.com/crystal-lang/crystal-db) interface. For example, [pg](https://github.com/will/crystal-pg):\n\n```diff\ndependencies:\n  onyx:\n    github: onyxframework/onyx\n    version: ~> 0.3.0\n  onyx-sql:\n    github: onyxframework/sql\n    version: ~> 0.7.0\n+ pg:\n+   github: will/crystal-pg\n+   version: ~> 0.15.0\n```\n\n## Usage üíª\n\nFor this PostgreSQL table:\n\n```sql\nCREATE TABLE users (\n  id          SERIAL      PRIMARY KEY,\n  name        TEXT        NOT NULL\n  created_at  TIMESTAMPTZ NOT NULL  DEFAULT now()\n);\n```\n\nDefine the user schema:\n\n```crystal\nrequire \"onyx/sql\"\n\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32\n    type name : String, not_null: true\n    type created_at : Time, not_null: true, default: true\n  end\nend\n```\n\nInsert a new user instance:\n\n```crystal\nuser = User.new(name: \"John\")\nuser = Onyx.query(user.insert.returning(\"*\")).first\n\npp user # => #<User @id=1, @name=\"John\", @created_at=#<Time ...>>\n```\n\nQuery the user:\n\n```crystal\nuser = Onyx.query(User.where(id: 1)).first?\n```\n\nWith another PostgreSQL table:\n\n```sql\nCREATE TABLE posts (\n  id          SERIAL      PRIMARY KEY,\n  author_id   INT         NOT NULL  REFERENCES  users(id),\n  content     TEXT        NOT NULL\n  created_at  TIMESTAMPTZ NOT NULL  DEFAULT now()\n);\n```\n\nDefine the post schema:\n\n```crystal\nclass Post\n  include Onyx::SQL::Model\n\n  schema posts do\n    pkey id : Int32\n    type author : User, not_null: true, key: \"author_id\"\n    type content : String, not_null: true\n    type created_at : Time, not_null: true, default: true\n  end\nend\n```\n\nAdd the posts reference to the user schema:\n\n```diff\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32\n    type name : String, not_null: true\n    type created_at : Time, not_null: true, default: true\n+   type authored_posts : Array(Post), foreign_key: \"author_id\"\n  end\nend\n```\n\nCreate a new post:\n\n```crystal\nuser = User.new(id: 1)\npost = Post.new(author: user, content: \"Hello, world!\")\nOnyx.exec(post.insert)\n```\n\nQuery all the posts by a user with name \"John\":\n\n```crystal\nposts = Onyx.query(Post\n  .join(author: true) do |x|\n    x.select(:id, :name)\n    x.where(name: \"John\")\n  end\n)\n\nposts.first # => #<Post @id=1, @author=#<User @id=1 @name=\"John\">, @content=\"Hello, world!\">\n```\n\n## Documentation üìö\n\nThe documentation is available online at [docs.onyxframework.org/sql](https://docs.onyxframework.org/sql).\n\n## Community üç™\n\nThere are multiple places to talk about Onyx:\n\n* [Gitter](https://gitter.im/onyxframework)\n* [Twitter](https://twitter.com/onyxframework)\n\n## Support üïä\n\nThis shard is maintained by me, [Vlad Faust](https://vladfaust.com), a passionate developer with years of programming and product experience. I love creating Open-Source and I want to be able to work full-time on Open-Source projects.\n\nI will do my best to answer your questions in the free communication channels above, but if you want prioritized support, then please consider becoming my patron. Your issues will be labeled with your patronage status, and if you have a sponsor tier, then you and your team be able to communicate with me privately in [Twist](https://twist.com). There are other perks to consider, so please, don't hesistate to check my Patreon page:\n\n<a href=\"https://www.patreon.com/vladfaust\"><img height=\"50\" src=\"https://onyxframework.org/img/patreon-button.svg\"></a>\n\nYou could also help me a lot if you leave a star to this GitHub repository and spread the word about Crystal and Onyx! üì£\n\n## Contributing\n\n1. Fork it ( https://github.com/onyxframework/sql/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Commit your changes (git commit -am 'feat: some feature') using [Angular style commits](https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit)\n4. Push to the branch (git push origin my-new-feature)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Vlad Faust](https://github.com/vladfaust) - creator and maintainer\n\n## Licensing\n\nThis software is licensed under [MIT License](LICENSE).\n\n[![Open Source Initiative](https://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Opensource.svg/100px-Opensource.svg.png)](https://opensource.org/licenses/MIT)\n","program":{"html_id":"github.com/onyxframework/sql/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/onyxframework/sql","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx","path":"Onyx.html","kind":"module","full_name":"Onyx","name":"Onyx","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL","path":"Onyx/SQL.html","kind":"module","full_name":"Onyx::SQL","name":"SQL","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters.cr"},{"filename":"onyx-sql/query/delete.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/delete.cr"},{"filename":"onyx-sql/query/group_by.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/group_by.cr"},{"filename":"onyx-sql/query/having.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/having.cr"},{"filename":"onyx-sql/query/insert.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/insert.cr"},{"filename":"onyx-sql/query/join.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr"},{"filename":"onyx-sql/query/limit.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/limit.cr"},{"filename":"onyx-sql/query/offset.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/offset.cr"},{"filename":"onyx-sql/query/order_by.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/order_by.cr"},{"filename":"onyx-sql/query/returning.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/returning.cr"},{"filename":"onyx-sql/query/select.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/select.cr"},{"filename":"onyx-sql/query/set.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/set.cr"},{"filename":"onyx-sql/query/update.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/update.cr"},{"filename":"onyx-sql/query/where.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr"},{"filename":"onyx-sql/query/wherish.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr"},{"filename":"onyx-sql/query.cr","line_number":3,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr"},{"filename":"onyx-sql/repository/exec.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/exec.cr"},{"filename":"onyx-sql/repository/logger.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger.cr"},{"filename":"onyx-sql/repository/query.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/query.cr"},{"filename":"onyx-sql/repository/scalar.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/scalar.cr"},{"filename":"onyx-sql/repository.cr","line_number":3,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr"},{"filename":"onyx-sql.cr","line_number":5,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx","kind":"module","full_name":"Onyx","name":"Onyx"},"doc":"An SQL ORM for Crystal.","summary":"<p>An SQL ORM for Crystal.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters","path":"Onyx/SQL/Converters.html","kind":"module","full_name":"Onyx::SQL::Converters","name":"Converters","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model","kind":"module","full_name":"Onyx::SQL::Model","name":"Model"},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Serializable","kind":"module","full_name":"Onyx::SQL::Serializable","name":"Serializable"}],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL","kind":"module","full_name":"Onyx::SQL","name":"SQL"},"doc":"A collection of modules to convert between arbitrary Crystal types and [`DB::Any`](http://crystal-lang.github.io/crystal-db/api/latest/DB/Any.html).","summary":"<p>A collection of modules to convert between arbitrary Crystal types and <a href=\"http://crystal-lang.github.io/crystal-db/api/latest/DB/Any.html\" target=\"_blank\"><code>DB::Any</code></a>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG","path":"Onyx/SQL/Converters/PG.html","kind":"module","full_name":"Onyx::SQL::Converters::PG","name":"PG","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/pg.cr","line_number":5,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters","kind":"module","full_name":"Onyx::SQL::Converters","name":"Converters"},"doc":"A collection of modules to convert to and from `PG` database values.\nDepends on <https://github.com/will/crystal-pg>.","summary":"<p>A collection of modules to convert to and from <code><a href=\"../../../Onyx/SQL/Converters/PG.html\">PG</a></code> database values.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG/Any","path":"Onyx/SQL/Converters/PG/Any.html","kind":"module","full_name":"Onyx::SQL::Converters::PG::Any(T)","name":"Any","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/pg/any.cr","line_number":33,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/any.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG","kind":"module","full_name":"Onyx::SQL::Converters::PG","name":"PG"},"doc":"Converts between the PostgreSQL values (`Nil`, `Bytes`, `Number`, `Bool`, `String`, `Array`,\n`Time` and also [`PG::Geo`](https://github.com/will/crystal-pg/blob/master/src/pg/geo.cr))\nand native Crystal types. It automatically handles enumerables.\nSee `Field` to read about of how to apply converters.\n\nNOTE: Although PostgreSQL natively supports arrays, some databases don't (for example, SQLite).\nThat's why you have to explicitly declare a converter on a variable which is (or may be) an array.\n\n```sql\nCREATE TABLE users (\n  id              INTEGER,\n  favorite_movies TEXT[]\n);\n```\n\n```\nrequire \"onyx-sql/converters/pg\"\n\nclass User\n  include Onyx::SQL::Model\n\n  schema do\n    type id : Int32, converter: PG::Any(Int32)\n    type favorite_movies : Array(String), converter: PG::Any(String)\n  end\nend\n\nOnyx::SQL::Converters::PG::Any(Int32).new.to_db([42, 43]) # => Bytes\n```","summary":"<p>Converts between the PostgreSQL values (<code>Nil</code>, <code>Bytes</code>, <code>Number</code>, <code>Bool</code>, <code>String</code>, <code>Array</code>, <code>Time</code> and also <a href=\"https://github.com/will/crystal-pg/blob/master/src/pg/geo.cr\" target=\"_blank\"><code>PG::Geo</code></a>) and native Crystal types.</p>","class_methods":[{"id":"from_rs(rs:DB::ResultSet):T?-class-method","html_id":"from_rs(rs:DB::ResultSet):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/any.cr#L57","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"rs.read(T | Nil)"}},{"id":"from_rs_array(rs:DB::ResultSet):Array(T)?-class-method","html_id":"from_rs_array(rs:DB::ResultSet):Array(T)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : Array(T)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/any.cr#L61","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T) | ::Nil","visibility":"Public","body":"rs.read(Array(T) | Nil)"}},{"id":"to_db(value:T):DB::Any-class-method","html_id":"to_db(value:T):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/any.cr#L49","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"to_db(x: value)"}},{"id":"to_db(values:Enumerable(T)):DB::Any-class-method","html_id":"to_db(values:Enumerable(T)):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"args_string":"(values : Enumerable(T)) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/any.cr#L53","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"to_db(x: values.to_a)"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG/Enum","path":"Onyx/SQL/Converters/PG/Enum.html","kind":"module","full_name":"Onyx::SQL::Converters::PG::Enum(T)","name":"Enum","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/pg/enum.cr","line_number":40,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/enum.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG","kind":"module","full_name":"Onyx::SQL::Converters::PG","name":"PG"},"doc":"Converts between the PostgreSQL `ENUM` type and Crystal `Enum`s.\nSee `Field` to read about of how to apply converters.\n\n```sql\nCREATE TYPE users_role AS ENUM ('writer', 'moderator', 'admin');\nCREATE TYPE users_permissions AS ENUM ('create_posts', 'edit_posts');\n\nCREATE TABLE users (\n  role        users_role          NOT NULL  DEFAULT 'writer',\n  permissions users_permissions[] NOT NULL  DEFAULT '{create_posts}'\n);\n```\n\n```\nrequire \"onyx-sql/converters/pg\"\n\nclass User\n  include Onyx::SQL::Model\n\n  enum Role\n    Writer\n    Moderator\n    Admin\n  end\n\n  enum Permission\n    CreatePosts\n    EditPosts\n  end\n\n  schema do\n    type role : Role, converter: PG::Enum(User::Role)\n    type permissions : Array(Permission), converter: PG::Enum(User::Permission)\n  end\nend\n```","summary":"<p>Converts between the PostgreSQL <code>ENUM</code> type and Crystal <code><a href=\"../../../../Onyx/SQL/Converters/PG/Enum.html\">Enum</a></code>s.</p>","class_methods":[{"id":"from_rs(rs:DB::ResultSet):T?-class-method","html_id":"from_rs(rs:DB::ResultSet):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/enum.cr#L49","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"(rs.read(Bytes | Nil)).try do |bytes|\n  T.parse(String.new(bytes))\nend"}},{"id":"from_rs_array(rs:DB::ResultSet):Array(T)?-class-method","html_id":"from_rs_array(rs:DB::ResultSet):Array(T)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : Array(T)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/enum.cr#L53","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T) | ::Nil","visibility":"Public","body":"rs.read_raw.try do |bytes|\n  (((String.new(bytes)).delete(\"^a-z_\\n\")).split(\"\\n\")).map do |s|\n    T.parse(s)\n  end\nend"}},{"id":"to_db(value:T):DB::Any-class-method","html_id":"to_db(value:T):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/enum.cr#L41","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"value.to_s.underscore"}},{"id":"to_db(values:Enumerable(T)):DB::Any-class-method","html_id":"to_db(values:Enumerable(T)):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"args_string":"(values : Enumerable(T)) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/enum.cr#L45","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"(values.map do |v|\n  to_db(v)\nend.join(',')).try do |x|\n  \"{#{x}}\"\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG/JSON","path":"Onyx/SQL/Converters/PG/JSON.html","kind":"module","full_name":"Onyx::SQL::Converters::PG::JSON(T)","name":"JSON","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/pg/json.cr","line_number":31,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/json.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG","kind":"module","full_name":"Onyx::SQL::Converters::PG","name":"PG"},"doc":"Converts between the PostgreSQL's native `\"JSON\"` column type and Crystal objects with\n`#to_json` and `.from_json` methods (e.g. `JSON::Serializable` or `Hash`).\nSee `Field` to read about of how to apply converters.\n\n```sql\nCREATE TABLE users (\n  meta  JSON NOT NULL DEFAULT \"{}\"\n);\n```\n\n```\nrequire \"onyx-sql/converters/pg/json\"\n\nclass User\n  include Onyx::SQL::Model\n\n  struct Meta\n    include JSON::Serilalizable\n    property foo : String\n  end\n\n  schema do\n    type meta : Meta, converter: PG::JSON(Meta)\n  end\nend\n```","summary":"<p>Converts between the PostgreSQL's native <code>\"<a href=\"../../../../Onyx/SQL/Converters/PG/JSON.html\">JSON</a>\"</code> column type and Crystal objects with <code>#to_json</code> and <code>.from_json</code> methods (e.g.</p>","class_methods":[{"id":"from_rs(rs:DB::ResultSet):T?-class-method","html_id":"from_rs(rs:DB::ResultSet):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/json.cr#L36","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"bytes = rs.read_raw\nbytes.try do |bytes|\n  T.from_json(String.new(bytes))\nend\n"}},{"id":"to_db(value:T):DB::Any-class-method","html_id":"to_db(value:T):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/json.cr#L32","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"value.to_json"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG/JSONB","path":"Onyx/SQL/Converters/PG/JSONB.html","kind":"module","full_name":"Onyx::SQL::Converters::PG::JSONB(T)","name":"JSONB","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/pg/jsonb.cr","line_number":9,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/jsonb.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG","kind":"module","full_name":"Onyx::SQL::Converters::PG","name":"PG"},"doc":"Converts between the PostgreSQL's `\"JSONB\"` type and Crystal objects.\nIt works the same way as the `JSON` converter does, but with `\"JSONB\"` type.\n\nOPTIMIZE: Refactor to extend the `JSON` module. Currently impossible due to https://github.com/crystal-lang/crystal/issues/7167.","summary":"<p>Converts between the PostgreSQL's <code>\"<a href=\"../../../../Onyx/SQL/Converters/PG/JSONB.html\">JSONB</a>\"</code> type and Crystal objects.</p>","class_methods":[{"id":"from_rs(rs:DB::ResultSet):T?-class-method","html_id":"from_rs(rs:DB::ResultSet):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/jsonb.cr#L14","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"bytes = rs.read_raw\nbytes.try do |bytes|\n  T.from_json(String.new(bytes[1, bytes.bytesize - 1]))\nend\n"}},{"id":"from_rs_array(rs):T?-class-method","html_id":"from_rs_array(rs):T?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/jsonb.cr#L21","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"from_rs(rs)"}},{"id":"to_db(value:T):DB::Any-class-method","html_id":"to_db(value:T):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/jsonb.cr#L10","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"value.to_json"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG/UUID","path":"Onyx/SQL/Converters/PG/UUID.html","kind":"module","full_name":"Onyx::SQL::Converters::PG::UUID","name":"UUID","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/pg/uuid.cr","line_number":25,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/uuid.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/PG","kind":"module","full_name":"Onyx::SQL::Converters::PG","name":"PG"},"doc":"Converts between the PostgreSQL's `UUID` type and Crystal's `UUID`.\nSee `Field` to read about of how to apply converters.\n\n```sql\nCREATE EXTENSION pgcrypto;\nCREATE TABLE users (\n  uuid  UUID PRIMARY KEY  DEFAULT gen_random_uuid(),\n);\n```\n\n```\nrequire \"onyx-sql/converters/pg/uuid\"\n\nclass User\n  include Onyx::SQL::Model\n\n  schema do\n    pkey uuid : UUID, converter: PG::UUID\n  end\nend\n```","summary":"<p>Converts between the PostgreSQL's <code><a href=\"../../../../Onyx/SQL/Converters/PG/UUID.html\">UUID</a></code> type and Crystal's <code><a href=\"../../../../Onyx/SQL/Converters/PG/UUID.html\">UUID</a></code>.</p>","class_methods":[{"id":"from_rs(rs):::UUID?-class-method","html_id":"from_rs(rs):::UUID?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : ::UUID?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/uuid.cr#L34","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::UUID | ::Nil","visibility":"Public","body":"(rs.read(String | Nil)).try do |s|\n  ::UUID.new(s)\nend"}},{"id":"from_rs_array(rs):::Array(::UUID)?-class-method","html_id":"from_rs_array(rs):::Array(::UUID)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : ::Array(::UUID)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/uuid.cr#L38","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Array(::UUID) | ::Nil","visibility":"Public","body":"(rs.read(::Array(String) | Nil)).try(&.map do |s|\n  ::UUID.new(s)\nend)"}},{"id":"to_db(value:::UUID):DB::Any-class-method","html_id":"to_db(value:::UUID):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"::UUID"}],"args_string":"(value : ::UUID) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/uuid.cr#L26","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"::UUID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"value.to_s"}},{"id":"to_db(values:Enumerable(::UUID)):DB::Any-class-method","html_id":"to_db(values:Enumerable(::UUID)):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(::UUID)"}],"args_string":"(values : Enumerable(::UUID)) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/pg/uuid.cr#L30","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(::UUID)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"(values.map do |v|\n  to_db(v)\nend.join(',')).try do |x|\n  \"{#{x}}\"\nend"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3","path":"Onyx/SQL/Converters/SQLite3.html","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3","name":"SQLite3","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/sqlite3.cr","line_number":5,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters","kind":"module","full_name":"Onyx::SQL::Converters","name":"Converters"},"doc":"A collection of modules to convert to and from `SQLite3` database values.\nDepends on <https://github.com/crystal-lang/crystal-sqlite3>.","summary":"<p>A collection of modules to convert to and from <code><a href=\"../../../Onyx/SQL/Converters/SQLite3.html\">SQLite3</a></code> database values.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3/Any","path":"Onyx/SQL/Converters/SQLite3/Any.html","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3::Any(T)","name":"Any","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/sqlite3/any.cr","line_number":43,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/any.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3","name":"SQLite3"},"doc":"Converts between the SQLite3 types (`NULL`, `INTEGER`, `REAL`, `TEXT` and `BLOB`)\nand native Crystal types.\nSee `Field` to read about of how to apply converters.\n\nSQLite3 does **not** natively support neither arrays nor `Time` nor `Bool`. This converters\nimplements the following workarounds:\n\n* `Time` is stored as string in the following format: `\"%F %H:%M:%S.%L\"`.\nFor example, `\"2019-02-13 22:58:28.942\"`.\n* `Bool`s are stored as `\"1\"` and `\"0\"`\n* Enumerable types are stored as `\"{x,y}\"` strings. For example, `[42, 43]` will be stored as\n`\"{42,43\"`, `[Time]` as `\"{2019-02-13 14:17:59.228}\"` and empty arrays as `\"{}\"`\n\nAs this converter is two-way, the implications above apply to values set by the developer as well.\nFor example, if a bool value is set to `\"true\"` by default in the database,\nthe converter would raise upon parsing.\n\n```sql\nCREATE TABLE users (\n  id              INTEGER,\n  favorite_movies STRING  NOT NULL DEFAULT '{}'\n);\n```\n\n```\nrequire \"onyx-sql/converters/sqlite3\"\n\nclass User\n  include Onyx::SQL::Model\n\n  schema do\n    type id : Int32, converter: SQLite3::Any(Int32)\n    type favorite_movies : Array(String), converter: SQLite3::Any(String)\n  end\nend\n\nOnyx::SQL::Converters::SQLite3::Any(Int32).new.to_db(42)       # => 42\nOnyx::SQL::Converters::SQLite3::Any(Int32).new.to_db([42, 43]) # => \"{42, 43}\"\nOnyx::SQL::Converters::SQLite3::Any(Int32).new.to_db(true)     # => \"{1}\"\n```","summary":"<p>Converts between the SQLite3 types (<code>NULL</code>, <code>INTEGER</code>, <code>REAL</code>, <code>TEXT</code> and <code>BLOB</code>) and native Crystal types.</p>","class_methods":[{"id":"from_rs(rs:DB::ResultSet):T?-class-method","html_id":"from_rs(rs:DB::ResultSet):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/any.cr#L73","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"check\nrs.read(T | Nil)\n"}},{"id":"from_rs_array(rs:DB::ResultSet):::Array(T)?-class-method","html_id":"from_rs_array(rs:DB::ResultSet):::Array(T)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : ::Array(T)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/any.cr#L78","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Array(T) | ::Nil","visibility":"Public","body":"check\n(rs.read(String | Nil)).try do |string|\n  sub = begin\n    string[1..-2]\n  rescue\n    \"\"\n  end\n  if sub.empty?\n    return ::Array(T).new\n  else\n    (sub.split(',')).map do |s|\n      {% if T <= Int32 %}\n            s.to_i32\n          {% else %}{% if T <= Int64 %}\n            s.to_i64\n          {% else %}{% if T <= Float32 %}\n            s.to_f32\n          {% else %}{% if T <= Float64 %}\n            s.to_f64\n          {% else %}{% if T <= Nil %}\n            s == \"\" ? nil : raise \"Unexpected non-empty SQLite3 array entry '#{s}'\"\n          {% else %}{% if T <= String %}\n            s\n          {% else %}{% if T <= Bool %}\n            case s\n            when '1' then true\n            when '0' then false\n            else\n              raise \"Unexpected non-bit SQLite3 array entry '#{s}'\"\n            end\n          {% else %}{% if T <= Bytes %}\n            {% raise(\"Must not use Bytes type with #{@type}. Consider using another specialized converter\") %}\n          {% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}{% end %}\n    end\n  end\nend\n"}},{"id":"to_db(value:T):DB::Any-class-method","html_id":"to_db(value:T):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/any.cr#L50","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"check\nvalue\n"}},{"id":"to_db(values:Array(T)):DB::Any-class-method","html_id":"to_db(values:Array(T)):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(T)"}],"args_string":"(values : Array(T)) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/any.cr#L55","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Array(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"check\n(values.join(',') do |value|\n  {% if T <= Number || T <= String %}\n        value.to_s\n      {% else %}{% if T <= Bool %}\n        value ? '1' : '0'\n      {% else %}{% if T <= Time %}\n        value.in(::SQLite3::TIME_ZONE).to_s(::SQLite3::DATE_FORMAT)\n      {% else %}{% if T <= Nil %}\n        \"\"\n      {% else %}{% if T <= Bytes %}\n        {% raise(\"Must not use Bytes type with #{@type}. Consider using another specialized converter\") %}\n      {% end %}{% end %}{% end %}{% end %}{% end %}\nend).try do |v|\n  \"{#{v}}\"\nend\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3/EnumInt","path":"Onyx/SQL/Converters/SQLite3/EnumInt.html","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3::EnumInt(T)","name":"EnumInt","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/sqlite3/enum_int.cr","line_number":43,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_int.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3","name":"SQLite3"},"doc":"Converts between the SQLite3 `INTEGER` (or `TEXT` for arrays) type and Crystal `Enum`s.\nSee `Field` to read about of how to apply converters.\n\nComparison of `Converters::SQLite3::EnumInt` and `Converters::SQLite3::EnumText`:\n\n```text\n|                       | EnumInt | EnumText |\n| --------------------- | ------- | -------- |\n| Bytes needed to store | Less    | More     |\n| Depends on enum index | Yes     | No       |\n```\n\nIn a nutshell, if you modify a `Enum` values in the further cycles of application development,\nit will be harder to migrate changes in the database if you use `EnumInt` converter, but it takes less bytes.\n\n```sql\nCREATE TABLE users (\n  role  INTEGER NOT NULL  DEFAULT 0,\n  roles TEXT    NOT NULL  DEFAULT '{0}'\n);\n```\n\n```\nrequire \"onyx-sql/converters/sqlite3\"\n\nclass User\n  include Onyx::SQL::Model\n\n  enum Role\n    Writer\n    Moderator\n    Admin\n  end\n\n  schema do\n    type role : Role, converter: SQLite3::EnumInt(User::Role)\n    type roles : Array(Role), converter: SQLite3::EnumInt(User::Role)\n  end\nend\n```","summary":"<p>Converts between the SQLite3 <code>INTEGER</code> (or <code>TEXT</code> for arrays) type and Crystal <code>Enum</code>s.</p>","class_methods":[{"id":"from_rs(rs):T?-class-method","html_id":"from_rs(rs):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_int.cr#L52","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"(rs.read(Int32 | Nil)).try do |i|\n  T.new(i)\nend"}},{"id":"from_rs_array(rs):::Array(T)?-class-method","html_id":"from_rs_array(rs):::Array(T)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : ::Array(T)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_int.cr#L56","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Array(T) | ::Nil","visibility":"Public","body":"(Any(Int32).from_rs_array(rs)).try(&.map do |i|\n  T.new(i)\nend)"}},{"id":"to_db(value:T)-class-method","html_id":"to_db(value:T)-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_int.cr#L44","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.to_i"}},{"id":"to_db(values:Enumerable(T))-class-method","html_id":"to_db(values:Enumerable(T))-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"args_string":"(values : Enumerable(T))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_int.cr#L48","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Any(Int32).to_db(values.map(&.to_i))"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3/EnumText","path":"Onyx/SQL/Converters/SQLite3/EnumText.html","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3::EnumText(T)","name":"EnumText","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/sqlite3/enum_text.cr","line_number":32,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_text.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3","name":"SQLite3"},"doc":"Converts between the SQLite3 `TEXT` type and Crystal `Enum`s.\nSee `Field` to read about of how to apply converters.\n\nSee the comparison of enum converters at `Converters::SQLite3::EnumInt`.\n\n```sql\nCREATE TABLE users (\n  permission  TEXT  NOT NULL  DEFAULT 'create_posts',\n  permissions TEXT  NOT NULL  DEFAULT '{create_posts,edit_posts}'\n);\n```\n\n```\nrequire \"onyx-sql/converters/sqlite3\"\n\nclass User\n  include Onyx::SQL::Model\n\n  enum Permission\n    CreatePosts\n    EditPosts\n  end\n\n  schema do\n    type permission : Permission, converter: SQLite3::EnumText(User::Permission))]\n    type permissions : Array(Permission), converter: SQLite3::EnumText(User::Permission)\n  end\nend\n```","summary":"<p>Converts between the SQLite3 <code>TEXT</code> type and Crystal <code>Enum</code>s.</p>","class_methods":[{"id":"from_rs(rs):T?-class-method","html_id":"from_rs(rs):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_text.cr#L41","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"(rs.read(String | Nil)).try do |s|\n  T.parse(s)\nend"}},{"id":"from_rs_array(rs):::Array(T)?-class-method","html_id":"from_rs_array(rs):::Array(T)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : ::Array(T)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_text.cr#L45","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Array(T) | ::Nil","visibility":"Public","body":"(Any(String).from_rs_array(rs)).try(&.map do |s|\n  T.parse(s)\nend)"}},{"id":"to_db(value:T)-class-method","html_id":"to_db(value:T)-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_text.cr#L33","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.to_s"}},{"id":"to_db(values:Enumerable(T))-class-method","html_id":"to_db(values:Enumerable(T))-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"args_string":"(values : Enumerable(T))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/enum_text.cr#L37","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Any(String).to_db(values.map(&.to_s))"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3/JSON","path":"Onyx/SQL/Converters/SQLite3/JSON.html","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3::JSON(T)","name":"JSON","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/sqlite3/json.cr","line_number":30,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/json.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3","name":"SQLite3"},"doc":"Converts between the SQLite3 `TEXT` type and Crystal objects with\n`#to_json` and `.from_json` methods (e.g. `JSON::Serializable`).\nSee `Field` to read about of how to apply converters.\n\n```sql\nCREATE TABLE users (\n  meta  TEXT  NOT NULL  DEFAULT '{\"foo\":\"bar\"}'\n);\n```\n\n```\nrequire \"onyx-sql/converters/sqlite3/json\"\n\nclass User\n  include Onyx::SQL::Model\n\n  struct Meta\n    include JSON::Serilalizable\n    property foo : String\n  end\n\n  schema do\n    type meta : Meta, converter: SQLite3::JSON(Meta)\n  end\nend\n```","summary":"<p>Converts between the SQLite3 <code>TEXT</code> type and Crystal objects with <code>#to_json</code> and <code>.from_json</code> methods (e.g.</p>","class_methods":[{"id":"from_rs(rs):T?-class-method","html_id":"from_rs(rs):T?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : T?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/json.cr#L39","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"(rs.read(String | Nil)).try do |json|\n  T.from_json(json)\nend"}},{"id":"from_rs_array(rs):::Array(T)?-class-method","html_id":"from_rs_array(rs):::Array(T)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : ::Array(T)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/json.cr#L43","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Array(T) | ::Nil","visibility":"Public","body":"{% raise(\"Not implemented\") %}"}},{"id":"to_db(value:T)-class-method","html_id":"to_db(value:T)-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"args_string":"(value : T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/json.cr#L31","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value.to_json"}},{"id":"to_db(values:Enumerable(T))-class-method","html_id":"to_db(values:Enumerable(T))-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"args_string":"(values : Enumerable(T))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/json.cr#L35","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% raise(\"Not implemented\") %}"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3/UUIDBlob","path":"Onyx/SQL/Converters/SQLite3/UUIDBlob.html","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3::UUIDBlob","name":"UUIDBlob","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/sqlite3/uuid_blob.cr","line_number":38,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_blob.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3","name":"SQLite3"},"doc":"Converts between the SQLite3 `BLOB` type and Crystal's `UUID`.\nSee `Field` to read about of how to apply converters.\n\nComparison of `Converters::SQLite3::UUIDBlob` and `Converters::SQLite3::UUIDText`:\n\n```text\n|                       | UUIDBlob | UUIDText |\n| --------------------- | -------- | -------- |\n| Bytes needed to store | 16       | ~32      |\n| Comparable            | No       | Yes      |\n| Can store array       | No       | Yes      |\n```\n\nWhen you use `BLOB` type for storing uuids, you cannot compare them with `WHERE uuid = ?`\n(making it useless as primary keys) and cannot store an array of uuids in a single column,\nbut it occupies less bytes.\n\n```sql\nCREATE TABLE users (\n  uuid  BLOB\n);\n```\n\n```\nrequire \"onyx-sql/converters/sqlite3/uuid_blob\"\n\nclass User\n  include Onyx::SQL::Model\n\n  schema do\n    type uuid : UUID = UUID.random, converter: SQLite3::UUIDBlob\n  end\nend\n```","summary":"<p>Converts between the SQLite3 <code>BLOB</code> type and Crystal's <code>UUID</code>.</p>","class_methods":[{"id":"from_rs(rs):UUID?-class-method","html_id":"from_rs(rs):UUID?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : UUID?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_blob.cr#L47","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::UUID | ::Nil","visibility":"Public","body":"(rs.read(Bytes | Nil)).try do |b|\n  ::UUID.new(b)\nend"}},{"id":"from_rs_array(rs):::Array(UUID)?-class-method","html_id":"from_rs_array(rs):::Array(UUID)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : ::Array(UUID)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_blob.cr#L51","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Array(::UUID) | ::Nil","visibility":"Public","body":"{% raise(\"Not implemented\") %}"}},{"id":"to_db(value:UUID):DB::Any-class-method","html_id":"to_db(value:UUID):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"::UUID"}],"args_string":"(value : UUID) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_blob.cr#L39","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"::UUID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"value.to_slice"}},{"id":"to_db(values:Enumerable(UUID)):DB::Any-class-method","html_id":"to_db(values:Enumerable(UUID)):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(::UUID)"}],"args_string":"(values : Enumerable(UUID)) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_blob.cr#L43","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(::UUID)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"{% raise(\"Not implemented\") %}"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3/UUIDText","path":"Onyx/SQL/Converters/SQLite3/UUIDText.html","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3::UUIDText","name":"UUIDText","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/converters/sqlite3/uuid_text.cr","line_number":28,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_text.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters/SQLite3","kind":"module","full_name":"Onyx::SQL::Converters::SQLite3","name":"SQLite3"},"doc":"Converts between the SQLite3 `BLOB` type and Crystal's `UUID`.\nSee `Field` to read about of how to apply converters.\n\nSee the comparison of uuid converters at `Converters::SQLite3::UUIDBlob`.\n\n```sql\nCREATE TABLE users (\n  uuid  TEXT,\n  uuids TEXT\n);\n```\n\n```\nrequire \"onyx-sql/converters/sqlite3/uuid_text\"\n\nclass User\n  include Onyx::SQL::Model\n\n  schema do\n    pkey uuid : UUID = UUID.random, converter: SQLite3::UUIDText\n    type uuids : Array(UUID), converter: SQLite3::UUIDText\n  end\nend\n```","summary":"<p>Converts between the SQLite3 <code>BLOB</code> type and Crystal's <code>UUID</code>.</p>","class_methods":[{"id":"from_rs(rs):UUID?-class-method","html_id":"from_rs(rs):UUID?-class-method","name":"from_rs","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : UUID?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_text.cr#L37","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::UUID | ::Nil","visibility":"Public","body":"(rs.read(String | Nil)).try do |s|\n  ::UUID.new(s)\nend"}},{"id":"from_rs_array(rs):::Array(UUID)?-class-method","html_id":"from_rs_array(rs):::Array(UUID)?-class-method","name":"from_rs_array","doc":null,"summary":null,"abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"args_string":"(rs) : ::Array(UUID)?","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_text.cr#L41","def":{"name":"from_rs_array","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"::Array(::UUID) | ::Nil","visibility":"Public","body":"(Any(String).from_rs_array(rs)).try(&.map do |s|\n  ::UUID.new(s)\nend)"}},{"id":"to_db(value:UUID):DB::Any-class-method","html_id":"to_db(value:UUID):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"::UUID"}],"args_string":"(value : UUID) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_text.cr#L29","def":{"name":"to_db","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"::UUID"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"value.to_s"}},{"id":"to_db(values:Enumerable(UUID)):DB::Any-class-method","html_id":"to_db(values:Enumerable(UUID)):DB::Any-class-method","name":"to_db","doc":null,"summary":null,"abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(::UUID)"}],"args_string":"(values : Enumerable(UUID)) : DB::Any","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/converters/sqlite3/uuid_text.cr#L33","def":{"name":"to_db","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(::UUID)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::Any","visibility":"Public","body":"Any(String).to_db(values.map(&.to_s))"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Field","path":"Onyx/SQL/Field.html","kind":"annotation","full_name":"Onyx::SQL::Field","name":"Field","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql.cr","line_number":150,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL","kind":"module","full_name":"Onyx::SQL","name":"SQL"},"doc":"Use this annotation to mark an Object's instance variable as an SQL field.\nIt's not mandatory, though, as including `Serializable` and `Model` has meaningful defaults.\n\n## `:key` option\n\nThe serialization process would rely on a variable name when mapping a database column\nby default. You can alter this behaviour with the `:key` option. For example:\n\n```\nclass User\n  include Onyx::SQL::Model\n  @id : Int32?\nend\n\nUser.db_column(:id)    # => \"id\"\nUser.db_values(id: 42) # => 42\n```\n\nBy default, the serialization code would look for column named `\"id\"`.\nBut you can change it:\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  @[Onyx::SQL::Field(key: \"the_id\")]\n  @id : Int32?\nend\n\nUser.db_column(:id) # => \"the_id\"\n```\n\nNow the serialization will map from `\"the_id\"` column to the `@id` instance variable.\n\n## `:converter` option\n\nThere is a `:converter` option which would define a converter to use for the\nserialization. For example, you have an integer enum column with value `0` stored in\nan SQLite database. In this case, the `Converters::SQLite3::EnumInt` would be helpful:\n\n```\nclass User\n  enum Role\n    Writer\n    Moderator\n  end\n\n  @[Onyx::SQL::Field(converter: SQLite3::EnumInt(Role))]\n  @role : Role\nend\n\nUser.db_values(role: User::Role::Writer) # => 1\n```\n\nFrom now on, the serialization would expect an `INT` column and try to parse\nthe `User::Role` enum out from it.\n\n## `:not_null` option\n\nSet to `true` if a field column is `NOT NULL` in the DB. It is used in `Query`\nbuilder. For example, it would prohibit doing some queries with `not_null` fields\nwith an actual `nil` value:\n\n```\nclass User\n  @[Onyx::SQL::Field(not_null: true)]\n  @name : String?\nend\n\nUser.update.set(name: nil) # Compilation-time error\nUser.insert(name: nil)     # Compilation-time error\n```\n\nNOTE: `User.new(name: nil).insert` (the instance-level `Model#insert` shortcut) would\nraise `NilAssertionError` in **runtime**, not in compilation-time! So, for increased\ntype-safety, consider using class-level `User.insert(name: nil)`, which would raise\nin compilation time instead.\n\n`Model::Changeset` will also get affected by this option: you will not be able to call\n`Model::Changeset#update` with a `nil` value on a `not_null` field.\n\nYou will also be unable to **set** the field to a `nil` value when\nusing `schema` (see below):\n\n```\nclass User\n  schema users do\n    type name : String, not_null: true\n  end\nend\n\nuser.name = nil # Compilation-time error\npp user.name    # String only, raise `NilAssertionError` if `nil`\n```\n\n## `:default` option\n\nWill mark a field as having `DEFAULT` value in the DB. From now on, a `nil` value\nwill be ignored on inserting the model instance:\n\n```\nclass User\n  @name : String?\n\n  @[Onyx::SQL::Field(default: true)]\n  @created_at : Time?\nend\n\nUser.new(name: \"John\").insert.to_s # INSERT INTO users (name) VALUES (?)\n# But\nUser.new(name: \"John\", created_at: Time.now).to_s # INSERT INTO users (name, created_at) VALUES (?, ?)\n```\n\n## Usage in schema\n\n`Model.schema` DSL macro automatically passes `Model.type` and `Model.pkey` options to a `Field` annotation,\nunless it's a `Model` reference. See `Reference` docs.\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32, converter: PG::Any(Int32)\n    type username : String, key: \"the_username\", not_null: true\n    type age : Int32\n  end\nend\n\n# Expands to\n\n@[Onyx::SQL::Model::Options(table: \"users\", primary_key: @id)]\nclass User\n  include Onyx::SQL::Model\n\n  @[Onyx::SQL::Field(converter: PG::Any(Int32))]\n  property! id : Int32\n\n  @[Onyx::SQL::Field(key: \"the_username\", not_null: true)]\n  property! username : String\n\n  property age : Int32?\nend\n```","summary":"<p>Use this annotation to mark an Object's instance variable as an SQL field.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model","path":"Onyx/SQL/Model.html","kind":"module","full_name":"Onyx::SQL::Model","name":"Model","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters","kind":"module","full_name":"Onyx::SQL::Converters","name":"Converters"}],"locations":[{"filename":"onyx-sql/model/changes.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr"},{"filename":"onyx-sql/model/enums.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/enums.cr"},{"filename":"onyx-sql/model/instance_query_shortcuts.cr","line_number":4,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/instance_query_shortcuts.cr"},{"filename":"onyx-sql/model/schema.cr","line_number":1,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/schema.cr"},{"filename":"onyx-sql/model.cr","line_number":83,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters","kind":"module","full_name":"Onyx::SQL::Converters","name":"Converters"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL","kind":"module","full_name":"Onyx::SQL","name":"SQL"},"doc":"Model (also *record*) is a business unit.\nModels usually have fields and relations with other models.\nThe `Model` module allows to represent an SQL model as a plain Crystal object.\n\n```sql\nCREATE TABLE users (\n  id        SERIAL  PRIMARY KEY,\n  username  TEXT    NOT NULL\n);\n\nCREATE TABLE posts (\n  id        SERIAL  PRIMARY KEY,\n  content   TEXT    NOT NULL,\n  cover     TEXT,\n  author_id INT     NOT NULL  REFERENCES users (id),\n);\n```\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32\n    type username : String, not_null: true\n    type authored_posts : Array(Post), foreign_key: \"author_id\"\n  end\nend\n\nclass Post\n  include Onyx::SQL::Model\n\n  schema posts do\n    pkey id : Int32\n    type content : String, not_null: true\n    type cover : String\n    type author : User, key: \"author_id\", not_null: true\n  end\nend\n```\n\nIn this example, `User` and `Post` are models. `User` has primary key `id`, field `username` and\nforeign enumerable reference `authored_posts`. `Post` also has primary key `id`,\nnon-nilable field `content` and nilable field `cover`, and direct reference `author`.\nIt's pretty simple and straightforward mapping.\nRead more about references in `Serializable` docs.\n\n## Serialization\n\n`Model` module includes `Serializable`, which enables deserializing models from a `DB::ResultSet`,\neffectively allowing this:\n\n```\ndb = DB.open(ENV[\"DATABASE_URL\"])\nusers = User.from_rs(db.query(\"SELECT * FROM users\"))\n```\n\nBut it's more convenient to use `Repository` to interact with the database:\n\n```\nrepo = Onyx::SQL::Repository.new(db)\nusers = repo.query(User, \"SELECT * FROM users\")\n```\n\nThat's not much less code, but the repo, for example, handles query arguments\n(`?` -> `$1` for PostrgreSQL queries) and also logs the requests.\nThe real power of repository is handling `Query` arguments:\n\n```\nuser = repo.query(User.where(id: 42)).first\n```\n\n## Schema\n\nOnyx::SQL is based on Crystal annotations to keep composition and simplify the underlying code.\nBut since annotations are quite low-level, they are masked under the convenient `.schema` DSL.\nIt's a good idea to understand what the `.schema` macro generates, but it's not mandatory\nfor most of developers.","summary":"<p>Model (also <em>record</em>) is a business unit.</p>","class_methods":[],"constructors":[{"id":"new(**values:**T)forallT-class-method","html_id":"new(**values:**T)forallT-class-method","name":"new","doc":"Initialize an instance of `self`. It accepts an arbitrary amount of arguments,\nbut they must match the variable names, raising in compile-time instead:\n\n```\nUser.new(id: 42, username: \"John\") # => <User @id=42 @username=\"John\">\nUser.new(foo: \"bar\")               # Compilation-time error\n```","summary":"<p>Initialize an instance of <code>self</code>.</p>","abstract":false,"args":[],"args_string":"(**values : **T) forall T","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model.cr#L120","def":{"name":"new","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**T"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(**values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Compare `self` against *other* model of the same type by their primary keys.\nReturns `false` if the `self` primary key is `nil`.","summary":"<p>Compare <code>self</code> against <em>other</em> model of the same type by their primary keys.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model.cr#L94","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      {% options = @type.annotation(Onyx::SQL::Model::Options)\nunless options\n  raise(\"Onyx::SQL::Model::Options annotation must be defined for #{@type}\")\nend\npk = options[:primary_key]\nunless pk\n  raise(\"#{@type} must have Onyx::SQL::Model::Options annotation with :primary_key option\")\nend\npk_rivar = @type.instance_vars.find do |riv|\n  \"@#{riv.name}\".id == pk.id\nend\nunless pk_rivar\n  raise(\"Cannot find primary key field #{pk} in #{@type}\")\nend\n %}\n\n      unless primary_key.nil?\n        primary_key == other.{{ pk_rivar.name }}\n      end\n    {% end %}"}},{"id":"apply(changeset:Onyx::SQL::Model::Changeset(self,U)):selfforallU-instance-method","html_id":"apply(changeset:Onyx::SQL::Model::Changeset(self,U)):selfforallU-instance-method","name":"apply","doc":"Apply a *changeset*, merging self values with the changeset's.","summary":"<p>Apply a <em>changeset</em>, merging self values with the changeset's.</p>","abstract":false,"args":[{"name":"changeset","doc":null,"default_value":"","external_name":"changeset","restriction":"Changeset(self, U)"}],"args_string":"(changeset : Onyx::SQL::Model::Changeset(<span class=\"k\">self</span>, U)) : <span class=\"k\">self</span> forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L135","def":{"name":"apply","args":[{"name":"changeset","doc":null,"default_value":"","external_name":"changeset","restriction":"Changeset(self, U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"changeset.changes.each do |key, value|\n  {% if true %}\n        case key\n        {% for ivar in @type.instance_vars %}\n          when {{ ivar.stringify }}\n            @{{ ivar }} = value.as({{ ivar.type }})\n        {% end %}\n        else\n          raise \"BUG: Unknown key :#{key} for Changeset(#{self})\"\n        end\n      {% end %}\nend\nself\n"}},{"id":"changeset-instance-method","html_id":"changeset-instance-method","name":"changeset","doc":"Create a new changeset for this instance with snapshot of actual values.\nIt is then likely to be passed to the `#update` method.\n\n```\nuser = User.new(id: 42, name: \"John\")\nchangeset = user.changeset\npp changeset.initial_values # => {\"id\" => 42, \"name\" => \"John\"}\npp changeset.values         # => {\"id\" => 42, \"name\" => \"John\"}\n\nchangeset.update(name: \"Jake\")\npp changeset.values  # => {\"id\" => 42, \"name\" => \"Jake\"}\npp changeset.empty?  # => false\npp changeset.changes # => {\"name\" => \"Jake\"}\n\nuser.update(changeset) == User.update.set(name: \"Jake\").where(id: 42)\n```","summary":"<p>Create a new changeset for this instance with snapshot of actual values.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L112","def":{"name":"changeset","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n      hash = Hash(String, Union(\n        {% for ivar in @type.instance_vars %}\n          {{ ivar.type }},\n        {% end %}\n      )).new\n\n      {% for ivar in @type.instance_vars %}\n        unless @{{ ivar.name }}.nil?\n          hash[{{ ivar.name.stringify }}] = @{{ ivar.name }}\n        end\n      {% end %}\n\n      Changeset(self, Union(\n        {% for ivar in @type.instance_vars %}\n          {{ ivar.type }},\n        {% end %}\n      )).new(hash)\n    {% end %}"}},{"id":"delete:Query-instance-method","html_id":"delete:Query-instance-method","name":"delete","doc":"A shortcut method to genereate a delete `Query`.\nSee `Query#delete`.\n\n```\nuser = User.new(id: 42)\nuser.delete == Query(User).new.delete.where(id: 42)\n```","summary":"<p>A shortcut method to genereate a delete <code><a href=\"../../Onyx/SQL/Query.html\">Query</a></code>.</p>","abstract":false,"args":[],"args_string":" : Query","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/instance_query_shortcuts.cr#L77","def":{"name":"delete","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Query","visibility":"Public","body":"query = Query(self).new.delete\nwhere_self(query)\n"}},{"id":"insert:Query-instance-method","html_id":"insert:Query-instance-method","name":"insert","doc":"A shortcut method to genereate an insert `Query` pre-filled with actual `self` values.\nSee `Query#insert`.\n\nNOTE: Will raise `NilAssertionError` in runtime if a field has `not_null: true` option and\nis actually `nil`. Conisder using `ClassQueryShortcuts#insert` instead.\n\n```\nuser = User.new(id: 42, name: \"John\")\nuser.insert == Query(User).new.insert(id: 42, name: \"John\")\n```","summary":"<p>A shortcut method to genereate an insert <code><a href=\"../../Onyx/SQL/Query.html\">Query</a></code> pre-filled with actual <code>self</code> values.</p>","abstract":false,"args":[],"args_string":" : Query","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/instance_query_shortcuts.cr#L15","def":{"name":"insert","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Query","visibility":"Public","body":"query = Query(self).new\n{% for ivar in @type.instance_vars %}\n      # Skip foreign references. Because they are foreign, you know\n      {% if ((a = ivar.annotation(Reference)) && (!a[:key])) %}{% else %}\n        {% ann = (ivar.annotation(Field)) || (ivar.annotation(Reference)) %}\n\n        {% if (ann && ann[:default]) || ((@type.annotation(Model::Options))[:primary_key].id == \"@#{ivar.name}\".id) %}\n          unless @{{ ivar.name }}.nil?\n            query.insert({{ ivar.name }}: @{{ ivar.name }}.not_nil!)\n          end\n        {% else %}{% if ann && ann[:not_null] %}\n          query.insert({{ ivar.name }}: @{{ ivar.name }}.not_nil!)\n        {% else %}\n          query.insert({{ ivar.name }}: @{{ ivar.name }})\n        {% end %}{% end %}\n      {% end %}\n    {% end %}\nquery\n"}},{"id":"update(changeset:Onyx::SQL::Model::Changeset(self,U)):QueryforallU-instance-method","html_id":"update(changeset:Onyx::SQL::Model::Changeset(self,U)):QueryforallU-instance-method","name":"update","doc":"A shortcut method to genereate an update `Query` with *changeset* values.\nSee `Query#update` and `Query#set`.\n\n```\nuser = User.new(id: 42, name: \"John\")\nchangeset = user.changeset\nchangeset.update(name: \"Jake\")\nuser.update(changeset) == Query(User).new.update.set(name: \"Jake\").where(id: 42)\n```","summary":"<p>A shortcut method to genereate an update <code><a href=\"../../Onyx/SQL/Query.html\">Query</a></code> with <em>changeset</em> values.</p>","abstract":false,"args":[{"name":"changeset","doc":null,"default_value":"","external_name":"changeset","restriction":"Changeset(self, U)"}],"args_string":"(changeset : Onyx::SQL::Model::Changeset(<span class=\"k\">self</span>, U)) : Query forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/instance_query_shortcuts.cr#L47","def":{"name":"update","args":[{"name":"changeset","doc":null,"default_value":"","external_name":"changeset","restriction":"Changeset(self, U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Query","visibility":"Public","body":"query = Query(self).new.update\n{% if true %}\n      changeset.changes!.each do |key, value|\n        case key\n        {% for ivar in @type.instance_vars %}\n          when {{ ivar.name.stringify }}\n            {% if (a = (ivar.annotation(Field)) || (ivar.annotation(Reference))) && a[:not_null] %}\n              query.set({{ ivar.name }}: value.as({{ ivar.type }}).not_nil!)\n            {% else %}\n              query.set({{ ivar.name }}: value.as({{ ivar.type }}))\n            {% end %}\n        {% end %}\n        else\n          raise \"BUG: Unrecognized Changeset({{ @type }}) key :#{key}\"\n        end\n      end\n    {% end %}\nwhere_self(query)\n"}}],"macros":[{"id":"pkey(declaration,**options)-macro","html_id":"pkey(declaration,**options)-macro","name":"pkey","doc":"Declare a model primary key, **must** be called within `.schema` block.\nIt is equal to `.type`, but also passes `not_null: true` and\ndefines the `:primary_key` option for the `Options` annotation.\nIt's currently mandatory to have a primary key in a model, which may change in the future.\n\n```\nclass User\n  schema users do\n    pkey id : Int32\n  end\nend\n\n# Expands to\n\n@[Onyx::SQL::Model::Options(primary_key: @id)]\nclass User\n  @[Onyx::SQL::Field(not_null: true)]\n  property! id : Int32\nend","summary":"<p>Declare a model primary key, <strong>must</strong> be called within <code><a href=\"../../Onyx/SQL/Model.html#schema%28table%2C%26block%29-macro\">.schema</a></code> block.</p>","abstract":false,"args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"args_string":"(declaration, **options)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/schema.cr#L153","def":{"name":"pkey","args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"    private ONYX_SQL_MODEL_SCHEMA_PK = \n{{ \"@#{declaration.var}\".id }}\n\n    type(\n{{ declaration }}\n, not_null: true, \n{{ **options }}\n)\n  \n"}},{"id":"schema(table,&block)-macro","html_id":"schema(table,&amp;block)-macro","name":"schema","doc":"`.schema` is a convenient DSL to avoid dealing with cumbersome (but extremely powerful)\nannotations directly. Consider this code:\n\n```\n@[Onyx::SQL::Model::Options(table: \"users\", primary_key: @id)]\nclass User\n  include Onyx::SQL::Model\n\n  property! id : Int32?\n\n  @[Onyx::SQL::Field(not_null: true)]\n  property! username : String\n\n  @[Onyx::SQL::Reference(foreign_key: \"author_id\")]\n  property! authored_posts : Array(Post)?\nend\n\n@[Onyx::SQL::Model::Options(table: \"posts\", primary_key: @id)]\nclass Post\n  include Onyx::SQL::Model\n\n  @[Onyx::SQL::Field(converter: PG::Any(Int32))]\n  property! id : Int32?\n\n  @[Onyx::SQL::Field(not_null: true)]\n  property! content : String?\n\n  property cover : String?\n\n  @[Onyx::SQL::Reference(key: \"author_id\", not_null: true)]\n  property! author : User?\nend\n```\n\nWith the DSL, it could be simplifed to:\n\n```\nclass User\n  schema users do\n    pkey id : Int32\n    type username : String, not_null: true\n    type authored_posts : Array(Post), foreign_key: \"author_id\"\n  end\nend\n\nclass Post\n  schema posts do\n    pkey id : Int32\n    type content : String, not_null: true\n    type cover : String\n    type author : User, key: \"author_id\", not_null: true\n  end\nend\n```\n\nThis macro has a single mandatory argument *table*, which is, obviously, the model's table name.\nThe schema currently **requires** a `.pkey` variable.\n\nTODO: Make the primary key optional.","summary":"<p><code><a href=\"../../Onyx/SQL/Model.html#schema%28table%2C%26block%29-macro\">.schema</a></code> is a convenient DSL to avoid dealing with cumbersome (but extremely powerful) annotations directly.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":""}],"args_string":"(table, &block)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/schema.cr#L61","def":{"name":"schema","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"visibility":"Public","body":"    \n{{ (yield).id }}\n\n    define_options(\n{{ table }}\n)\n  \n"}},{"id":"type(declaration,**options)-macro","html_id":"type(declaration,**options)-macro","name":"type","doc":"Declare a model field or reference. **Must** be called within `.schema` block.\nExpands `type` to either nilable `property` or raise-on-nil `property!`, depending on\nthe `not_null` option. The latter would raise in runtime if accessed or tried to\nbe set with the `nil` value.\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32\n    type name : String, not_null: true\n    type age : Int32\n  end\nend\n\nuser = User.new\n\nuser.id   # => nil\nuser.name # => nil\nuser.age  # => nil\n\nuser.insert                  # Will raise in runtime, because name is `nil`\nUser.insert(name: user.name) # Safer alternative, would raise in compilation time instead\n\nuser = User.new(name: \"John\", age: 18)\nuser.name = nil # Would raise in compilation time, cannot set to `nil`\nuser.age = nil  # OK\n```","summary":"<p>Declare a model field or reference.</p>","abstract":false,"args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"args_string":"(declaration, **options)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/schema.cr#L95","def":{"name":"type","args":[{"name":"declaration","doc":null,"default_value":"","external_name":"declaration","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"    property \n{{ declaration.var }}\n : \n{{ declaration.type }}\n | Nil\n\n    def \n{{ declaration.var }}\n!\n      @\n{{ declaration.var }}\n.not_nil!\n    \nend\n\n    macro finished\n      \n{% if options.empty? %}{% else %}\n        \\{%\n          type = {{ declaration.type }}\n\n          if type.union?\n            if type.union_types.size != 2\n              raise \"Only T | Nil unions can be an Onyx::SQL::Model's variables (got #{type} type for #{@type}@#{declaration.var})\"\n            end\n\n            type = type.union_types.find { |t| t != Nil }\n          end\n\n          if type <= Enumerable\n            if !(type <= Array) || type.type_vars.size != 1\n              raise \"Cannot use #{type} as an Onyx::SQL instance variable for #{@type}. Only Array(T) is supported for Enumerable\"\n            end\n\n            type = type.type_vars.first\n          end\n        %}\n\n        \\{% if type < Onyx::SQL::Model %}\n          \\{{\"@[Onyx::SQL::Reference(key: #{{{ options[:key] }}}, foreign_key: #{{{ options[:foreign_key] }}}, not_null: #{{{ options[:not_null] }}})]\".id}}\n        \\{% else %}\n          \\{{\"@[Onyx::SQL::Field(key: #{{{ options[:key] }}}, default: #{{{ options[:default] }}}, converter: #{{{ options[:converter] }}}, not_null: #{{{ options[:not_null] }}})]\".id}}\n        \\{% end %}\n\n        @{{ declaration.var }} : {{ declaration.type }} | Nil{{ if declaration.value\n  \" = #{declaration.value}\".id\nend }}\n      {% end %}\n\n    \nend\n  \n"}}],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model/Changeset","path":"Onyx/SQL/Model/Changeset.html","kind":"class","full_name":"Onyx::SQL::Model::Changeset(T, U)","name":"Changeset","abstract":false,"superclass":{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/model/changes.cr","line_number":17,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model","kind":"module","full_name":"Onyx::SQL::Model","name":"Model"},"doc":"A changeset for a model. Used to track changes made to it.\nTo update a value in a changeset, call `#update`. This will **not** affect the original model.\n\nIt is instantiated via `Model#changeset`:\n\n```\nuser = User.new(name: \"John\")\nchangeset = user.changeset\nchangeset.update(name: \"Jake\")\npp changeset.changes # => {\"name\" => \"Jake\"}\n```\n\nIt is handy to use a changeset with `Model#update` method.\nNote that `Model#update` may raise `NoChanges` error\nif the changeset is empty.","summary":"<p>A changeset for a model.</p>","class_methods":[],"constructors":[{"id":"new(initial_values:Hash(String,U))-class-method","html_id":"new(initial_values:Hash(String,U))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial_values","doc":null,"default_value":"","external_name":"initial_values","restriction":"Hash(String, U)"}],"args_string":"(initial_values : Hash(String, U))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L21","def":{"name":"new","args":[{"name":"initial_values","doc":null,"default_value":"","external_name":"initial_values","restriction":"Hash(String, U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Changeset(T, U).allocate\n_.initialize(initial_values)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"changes:Hash(String,U)-instance-method","html_id":"changes:Hash(String,U)-instance-method","name":"changes","doc":"Return changes on this changeset.","summary":"<p>Return changes on this changeset.</p>","abstract":false,"args":[],"args_string":" : Hash(String, U)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L61","def":{"name":"changes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, U)","visibility":"Public","body":"hash = Hash(String, U).new\nvalues.each do |key, value|\n  if value.responds_to?(:primary_key)\n    if (!(initial_values.has_key?(key))) || (value.primary_key && (initial_values[key] != value))\n      hash[key] = value\n    end\n  else\n    if (!(initial_values.has_key?(key))) || (initial_values[key] != value)\n      hash[key] = value\n    end\n  end\nend\nhash\n"}},{"id":"changes!-instance-method","html_id":"changes!-instance-method","name":"changes!","doc":"Return `#changes` on this changeset or raise `NoChanges` if it's empty.","summary":"<p>Return <code><a href=\"../../../Onyx/SQL/Model/Changeset.html#changes%3AHash%28String%2CU%29-instance-method\">#changes</a></code> on this changeset or raise <code><a href=\"../../../Onyx/SQL/Model/Changeset/NoChanges.html\">NoChanges</a></code> if it's empty.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L85","def":{"name":"changes!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"actual_changes = changes\nif actual_changes.empty?\n  raise(NoChanges.new)\nend\nactual_changes\n"}},{"id":"empty?-instance-method","html_id":"empty?-instance-method","name":"empty?","doc":"Return `true` if there are no changes on this changeset.","summary":"<p>Return <code>true</code> if there are no changes on this changeset.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L80","def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"changes.empty?"}},{"id":"initial_values:Hash(String,U)-instance-method","html_id":"initial_values:Hash(String,U)-instance-method","name":"initial_values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, U)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L21","def":{"name":"initial_values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, U)","visibility":"Public","body":"@initial_values"}},{"id":"update(**values:**V):NilforallV-instance-method","html_id":"update(**values:**V):NilforallV-instance-method","name":"update","doc":"Update a changeset value by `T` instance varialbe.\nThis will **not** affect the original model.","summary":"<p>Update a changeset value by <code>T</code> instance varialbe.</p>","abstract":false,"args":[],"args_string":"(**values : **V) : Nil forall V","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L27","def":{"name":"update","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**V"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"values.each do |key, value|\n  {% if true %}\n          case key\n          {% for key, value in V %}\n            {% found = false %}\n\n            {% for ivar in T.instance_vars %}\n              {% if ivar.name == key %}\n                {% if ann = (ivar.annotation(Field)) || (ivar.annotation(Reference)) %}\n                  {%   if ann[:not_null] && value.nilable?\n    raise(\"On Changeset#update: #{key} is nilable in compilation time (#{value}), but @#{ivar.name} has `not_null` option set to `true`. Consider calling `.not_nil!` on the value\")\n  end\n  if (ann = ivar.annotation(Reference)) && ann[:foreign_key]\n    raise(\"On Changeset#update: #{T}@#{key} is a foreign reference, therefore it cannot be updated\")\n  end\n %}\n                {% end %}\n\n                {% found = true %}\n\n                when {{ ivar.name.symbolize }}\n                  @values[{{ ivar.name.stringify }}] = value.as({{ value }})\n              {% end %}\n            {% end %}\n\n            {% unless found\n    raise(\"Cannot find instance variable by key :#{key} in #{T}\")\n  end %}\n          {% end %}\n          else\n            raise \"BUG: Unmatched :#{key} in runtime\"\n          end\n        {% end %}\nend"}},{"id":"values:Hash(String,U)-instance-method","html_id":"values:Hash(String,U)-instance-method","name":"values","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, U)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr#L20","def":{"name":"values","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, U)","visibility":"Public","body":"@values"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model/Changeset/NoChanges","path":"Onyx/SQL/Model/Changeset/NoChanges.html","kind":"class","full_name":"Onyx::SQL::Model::Changeset::NoChanges","name":"NoChanges","abstract":false,"superclass":{"html_id":"github.com/onyxframework/sql/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/model/changes.cr","line_number":92,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/changes.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model/Changeset","kind":"class","full_name":"Onyx::SQL::Model::Changeset(T, U)","name":"Changeset"},"doc":"Raised when there are no actual changes on a changeset on `Changeset#changes!` call.","summary":"<p>Raised when there are no actual changes on a changeset on <code><a href=\"../../../../Onyx/SQL/Model/Changeset.html#changes%21-instance-method\">Changeset#changes!</a></code> call.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model/ClassQueryShortcuts","path":"Onyx/SQL/Model/ClassQueryShortcuts.html","kind":"module","full_name":"Onyx::SQL::Model::ClassQueryShortcuts(T)","name":"ClassQueryShortcuts","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/model/class_query_shortcuts.cr","line_number":13,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model","kind":"module","full_name":"Onyx::SQL::Model","name":"Model"},"doc":"This module is **extended** by an object whenever it includes the `Model` module.\nIt brings shortucts to a matching query initialization:\n\n```\nclass User\n  include Onyx::SQL::Model\nend\n\nUser.query == Query(User).new\n```","summary":"<p>This module is <strong>extended</strong> by an object whenever it includes the <code><a href=\"../../../Onyx/SQL/Model.html\">Model</a></code> module.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"all(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"all(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"all","doc":"Create a new `Query(self)` and call `Query#all` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#all-instance-method\">Query#all</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"all","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.all(*args, **nargs)"}},{"id":"delete(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"delete(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"delete","doc":"Create a new `Query(self)` and call `Query#delete` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#delete-instance-method\">Query#delete</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"delete","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.delete(*args, **nargs)"}},{"id":"group_by(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"group_by(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"group_by","doc":"Create a new `Query(self)` and call `Query#group_by` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#group_by%28values%3AEnumerable%28String%29%29-instance-method\">Query#group_by</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"group_by","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.group_by(*args, **nargs)"}},{"id":"having(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"having(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"having","doc":"Create a new `Query(self)` and call `Query#having` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#having%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">Query#having</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"having","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.having(*args, **nargs)"}},{"id":"insert(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"insert(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"insert","doc":"Create a new `Query(self)` and call `Query#insert` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#insert%28%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">Query#insert</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"insert","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.insert(*args, **nargs)"}},{"id":"join(reference:T::Reference,klass,*,on:String?=nil,as_as:String=reference.to_s.underscore,type:JoinType=:inner,&block)-instance-method","html_id":"join(reference:T::Reference,klass,*,on:String?=nil,as_as:String=reference.to_s.underscore,type:JoinType=:inner,&amp;block)-instance-method","name":"join","doc":"Create a new `Query(self)` and call `Query#join` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#join%28table%3AString%2Con%3AString%2Cas_as%3AString%3F%3Dnil%2Ctype%3AJoinType%3D%3Ainner%29-instance-method\">Query#join</a></code> on it.</p>","abstract":false,"args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"args_string":"(reference : T::Reference, klass, *, on : String? = <span class=\"n\">nil</span>, as _as : String = reference.to_s.underscore, type : JoinType = <span class=\"n\">:inner</span>, &block)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L84","def":{"name":"join","args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":""},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"double_splat":null,"splat_index":2,"yields":0,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":""},"return_type":"","visibility":"Public","body":"query.join(reference, klass, on: on, as: _as, type: type, &block)"}},{"id":"join(reference:T::Reference,on:String?=nil,as_as:String=reference.to_s.underscore,type:Onyx::SQL::Query::JoinType=:inner):Onyx::SQL::Query(T)-instance-method","html_id":"join(reference:T::Reference,on:String?=nil,as_as:String=reference.to_s.underscore,type:Onyx::SQL::Query::JoinType=:inner):Onyx::SQL::Query(T)-instance-method","name":"join","doc":"Create a new `Query(self)` and call `Query#join` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#join%28table%3AString%2Con%3AString%2Cas_as%3AString%3F%3Dnil%2Ctype%3AJoinType%3D%3Ainner%29-instance-method\">Query#join</a></code> on it.</p>","abstract":false,"args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"Onyx::SQL::Query::JoinType"}],"args_string":"(reference : T::Reference, on : String? = <span class=\"n\">nil</span>, as _as : String = reference.to_s.underscore, type : Onyx::SQL::Query::JoinType = <span class=\"n\">:inner</span>) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L79","def":{"name":"join","args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"Onyx::SQL::Query::JoinType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.join(reference, on, _as, type)"}},{"id":"join(table:String,on:String,as_as:String?=nil,type:Onyx::SQL::Query::JoinType=:inner):Onyx::SQL::Query(T)-instance-method","html_id":"join(table:String,on:String,as_as:String?=nil,type:Onyx::SQL::Query::JoinType=:inner):Onyx::SQL::Query(T)-instance-method","name":"join","doc":"Create a new `Query(self)` and call `Query#join` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#join%28table%3AString%2Con%3AString%2Cas_as%3AString%3F%3Dnil%2Ctype%3AJoinType%3D%3Ainner%29-instance-method\">Query#join</a></code> on it.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | ::Nil"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"Onyx::SQL::Query::JoinType"}],"args_string":"(table : String, on : String, as _as : String? = <span class=\"n\">nil</span>, type : Onyx::SQL::Query::JoinType = <span class=\"n\">:inner</span>) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L74","def":{"name":"join","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | ::Nil"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"Onyx::SQL::Query::JoinType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.join(table, on, _as, type)"}},{"id":"limit(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"limit(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"limit","doc":"Create a new `Query(self)` and call `Query#limit` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#limit%28limit%3AInt32%3F%29-instance-method\">Query#limit</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"limit","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.limit(*args, **nargs)"}},{"id":"offset(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"offset(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"offset","doc":"Create a new `Query(self)` and call `Query#offset` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#offset%28offset%3AInt32%3F%29-instance-method\">Query#offset</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"offset","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.offset(*args, **nargs)"}},{"id":"one(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"one(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"one","doc":"Create a new `Query(self)` and call `Query#one` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#one-instance-method\">Query#one</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"one","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.one(*args, **nargs)"}},{"id":"order_by(value:T::Field|String,order:Query::Order?=nil):Onyx::SQL::Query(T)-instance-method","html_id":"order_by(value:T::Field|String,order:Query::Order?=nil):Onyx::SQL::Query(T)-instance-method","name":"order_by","doc":"Create a new `Query(self)` and call `Query#order_by` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#order_by%28value%3AT%3A%3AField%7CString%2Corder%3AOrder%3F%3Dnil%29-instance-method\">Query#order_by</a></code> on it.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T::Field | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Query::Order | ::Nil"}],"args_string":"(value : T::Field | String, order : Query::Order? = <span class=\"n\">nil</span>) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L39","def":{"name":"order_by","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T::Field | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Query::Order | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.order_by(value, order)"}},{"id":"query:Query-instance-method","html_id":"query:Query-instance-method","name":"query","doc":"Create a new `Query(T)`.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(T)</code>.</p>","abstract":false,"args":[],"args_string":" : Query","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L15","def":{"name":"query","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Query","visibility":"Public","body":"Query(T).new"}},{"id":"returning(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","html_id":"returning(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","name":"returning","doc":"Create a new `Query(self)` and call `Query#returning` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#returning%28values%3AEnumerable%28T%3A%3AField%7CT%3A%3AReference%7CChar%7CString%29%29-instance-method\">Query#returning</a></code> on it.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"args_string":"(values : Enumerable(T::Field | T::Reference | Char | String))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L44","def":{"name":"returning","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query.returning(values)"}},{"id":"returning(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"returning(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","name":"returning","doc":"Create a new `Query(self)` and call `Query#returning` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#returning%28values%3AEnumerable%28T%3A%3AField%7CT%3A%3AReference%7CChar%7CString%29%29-instance-method\">Query#returning</a></code> on it.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>, *values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L54","def":{"name":"returning","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query.returning(klass, *values)"}},{"id":"returning(*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"returning(*values:T::Field|T::Reference|Char|String)-instance-method","name":"returning","doc":"Create a new `Query(self)` and call `Query#returning` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#returning%28values%3AEnumerable%28T%3A%3AField%7CT%3A%3AReference%7CChar%7CString%29%29-instance-method\">Query#returning</a></code> on it.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(*values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L49","def":{"name":"returning","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"returning(values)"}},{"id":"select(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","html_id":"select(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","name":"select","doc":"Create a new `Query(self)` and call `Query#select` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#select%28values%3AEnumerable%28T%3A%3AField%7CT%3A%3AReference%7CChar%7CString%29%29-instance-method\">Query#select</a></code> on it.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"args_string":"(values : Enumerable(T::Field | T::Reference | Char | String))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L59","def":{"name":"select","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query.select(values)"}},{"id":"select(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"select(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","name":"select","doc":"Create a new `Query(self)` and call `Query#select` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#select%28values%3AEnumerable%28T%3A%3AField%7CT%3A%3AReference%7CChar%7CString%29%29-instance-method\">Query#select</a></code> on it.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>, *values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L69","def":{"name":"select","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query.select(klass, *values)"}},{"id":"select(*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"select(*values:T::Field|T::Reference|Char|String)-instance-method","name":"select","doc":"Create a new `Query(self)` and call `Query#select` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#select%28values%3AEnumerable%28T%3A%3AField%7CT%3A%3AReference%7CChar%7CString%29%29-instance-method\">Query#select</a></code> on it.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(*values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L64","def":{"name":"select","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.select(values)"}},{"id":"set(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"set(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"set","doc":"Create a new `Query(self)` and call `Query#set` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#set%28%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">Query#set</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"set","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.set(*args, **nargs)"}},{"id":"update(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"update(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"update","doc":"Create a new `Query(self)` and call `Query#update` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#update-instance-method\">Query#update</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"update","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.update(*args, **nargs)"}},{"id":"where(*args,**nargs):Onyx::SQL::Query(T)-instance-method","html_id":"where(*args,**nargs):Onyx::SQL::Query(T)-instance-method","name":"where","doc":"Create a new `Query(self)` and call `Query#where` on it.","summary":"<p>Create a new <code><a href=\"../../../Onyx/SQL/Query.html\">Query</a>(self)</code> and call <code><a href=\"../../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">Query#where</a></code> on it.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **nargs) : Onyx::SQL::Query(T)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/class_query_shortcuts.cr#L19","def":{"name":"where","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"nargs","doc":null,"default_value":"","external_name":"nargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Query(T)","visibility":"Public","body":"query.where(*args, **nargs)"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model/Mappable","path":"Onyx/SQL/Model/Mappable.html","kind":"module","full_name":"Onyx::SQL::Model::Mappable(T)","name":"Mappable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/model/mappable.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/mappable.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model","kind":"module","full_name":"Onyx::SQL::Model","name":"Model"},"doc":"This module allows to map a `Model` **to** the database.","summary":"<p>This module allows to map a <code><a href=\"../../../Onyx/SQL/Model.html\">Model</a></code> <strong>to</strong> the database.</p>","class_methods":[{"id":"db_column(variable:T::Field|T::Reference):String-class-method","html_id":"db_column(variable:T::Field|T::Reference):String-class-method","name":"db_column","doc":"Return a instance *variable* SQL column name.\n\n```\nUser.db_column(:id)      # \"id\"\nUser.db_column(:unknown) # Compilation-time error\n```","summary":"<p>Return a instance <em>variable</em> SQL column name.</p>","abstract":false,"args":[{"name":"variable","doc":null,"default_value":"","external_name":"variable","restriction":"T::Field | T::Reference"}],"args_string":"(variable : T::Field | T::Reference) : String","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/mappable.cr#L23","def":{"name":"db_column","args":[{"name":"variable","doc":null,"default_value":"","external_name":"variable","restriction":"T::Field | T::Reference"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":""}},{"id":"db_values(**values:**U):TupleforallU-class-method","html_id":"db_values(**values:**U):TupleforallU-class-method","name":"db_values","doc":"Return a `Tuple` of DB-ready values. It respects `Field` and `Reference` annotations,\nalso working with `Converter`s.\n\nIt ignores `not_null` option. It will call `.not_nil!` on enumerable references'\nprimary keys, thus can raise `NilAssertionError`.\n\n```\nUser.db_values(id: user.id)  # => {42}\nUser.db_values(foo: \"bar\")   # => Compilation-time error: unknown User instance variable foo\nPost.db_values(author: user) # => May raise NilAssertionError if `user.id` is `nil`\n```","summary":"<p>Return a <code>Tuple</code> of DB-ready values.</p>","abstract":false,"args":[],"args_string":"(**values : **U) : Tuple forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model/mappable.cr#L14","def":{"name":"db_values","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple","visibility":"Public","body":""}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model/Options","path":"Onyx/SQL/Model/Options.html","kind":"annotation","full_name":"Onyx::SQL::Model::Options","name":"Options","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql/model.cr","line_number":208,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/model.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Model","kind":"module","full_name":"Onyx::SQL::Model","name":"Model"},"doc":"This annotation specifies options for a `Model`. It has two mandatory options itself:\n\n* `:table` -- the table name in the DB, e.g. \"users\"\n* `:primary_key` -- the primary key **variable**, for example:\n\n```\n@[Onyx::SQL::Options(table: \"users\", primary_key: @id)]\nclass User\n  include Onyx::SQL::Model\n  @id : Int32?\nend\n```\n\nThe `Model.schema` macro defines the `Options` annotation for you:\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do   # \"users\" is going to be the :table option\n    pkey id : Int32 # @id is the :primary_key\n  end\nend\n```\n\nTODO: Handle different `:primary_key` variants:\n\n```\n@[Options(primary_key: {@a, @b})] # Composite\n\n@[Options(primary_key: {x: @a, y: @b})] # With different getters (and composite)\nclass User\n  def x\n    @a\n  end\nend\n```","summary":"<p>This annotation specifies options for a <code><a href=\"../../../Onyx/SQL/Model.html\">Model</a></code>.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Query","path":"Onyx/SQL/Query.html","kind":"class","full_name":"Onyx::SQL::Query(T)","name":"Query","abstract":false,"superclass":{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/query/delete.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/delete.cr"},{"filename":"onyx-sql/query/group_by.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/group_by.cr"},{"filename":"onyx-sql/query/having.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/having.cr"},{"filename":"onyx-sql/query/insert.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/insert.cr"},{"filename":"onyx-sql/query/join.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr"},{"filename":"onyx-sql/query/limit.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/limit.cr"},{"filename":"onyx-sql/query/offset.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/offset.cr"},{"filename":"onyx-sql/query/order_by.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/order_by.cr"},{"filename":"onyx-sql/query/returning.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/returning.cr"},{"filename":"onyx-sql/query/select.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/select.cr"},{"filename":"onyx-sql/query/set.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/set.cr"},{"filename":"onyx-sql/query/update.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/update.cr"},{"filename":"onyx-sql/query/where.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr"},{"filename":"onyx-sql/query/wherish.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr"},{"filename":"onyx-sql/query.cr","line_number":170,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL","kind":"module","full_name":"Onyx::SQL","name":"SQL"},"doc":"Type-safe SQL query builder.\n\n## Cheatsheet\n\nFor your convenience, here is the full list of `Query` methods:\n\n* Shortcuts:\n  * `#one`\n  * `#all`\n  * `#and`\n  * `#or`\n  * `#and_not`\n  * `#or_not`\n* `#insert`\n* `#update` -- must call `Set` afterwards ‚Ü¥\n* Set:\n  * `#set`\n  * `#set(clause)` -- expilicit SQL clause\n  * `#set(clause, params)` -- explicit SQL clause with params\n* `#returning`\n* `#select`\n* Where:\n  * `#where` -- by variable and value\n  * [`#where(clause)`](#where%28clause%3AString%2Cor%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%29-instance-method) -- expilicit SQL clause\n  * `#where(clause, params)` -- explicit SQL clause with params\n  * `#where_not(clause)`\n  * `#where_not(clause, params)`\n  * `#and_where`\n  * `#and_where(clause)`\n  * `#and_where(clause, params)`\n  * `#and_where_not`\n  * `#and_where_not(clause)`\n  * `#and_where_not(clause, params)`\n  * `#or_where`\n  * `#or_where(clause)`\n  * `#or_where(clause, params)`\n  * `#or_where_not`\n  * `#or_where_not(clause)`\n  * `#or_where_not(clause, params)`\n* Join:\n  * `#join` -- yielding sub-query\n  * `#join(reference, on, as, type)` -- without yielding sub-query\n  * `#join(table, on, as, type)` -- explicit\n* `#group_by(string_values)`\n* Having:\n  * [`#having(clause)`](file:///home/faust/Projects/onyxframework/sql/docs/Onyx/SQL/Query.html#having%28clause%3AString%2Cor%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%29-instance-method) -- expilicit clause\n  * `#having(clause, params)` -- explicit clause with params\n  * `#having_not(clause)`\n  * `#having_not(clause, params)`\n  * `#and_having(clause)`\n  * `#and_having(clause, params)`\n  * `#and_having_not(clause)`\n  * `#and_having_not(clause, params)`\n  * `#or_having(clause)`\n  * `#or_having(clause, params)`\n  * `#or_having_not(clause)`\n  * `#or_having_not(clause, params)`\n* `#limit(number)`\n* `#offset(number)`\n* `#order_by(value, order)`\n\n## Basics\n\n`Query` is a generic class and it can be only of a `Model` type (not bare `Serializable`s).\nThe model must have `Model::Options` annotation with both `:table` and `:primary_key` options set.\n\n`Query` implements most of the SQL syntax. It does **not** make queries to a DB itself,\nit only **builds** the SQL string with SQL-ready params.\nIts main purposes are to make the application less error-prone with type-safety and reduce\nthe usage of raw SQL within the code-base. However, it's **not** a complete replacement\nfor SQL. You have to know SQL and may be would have to still use it in some cases.\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32\n  end\nend\n\nquery = Query(User).new  # OK\nquery = Query(Int32).new # Totally not OK\n```\n\nTo build a query, call `#build` on it:\n\n```\nquery.select(\"*\")\nquery.build # => {\"SELECT users.* FROM users\", <EmptyParams>}\n```\n\nOnce the query is built, pass it either to a raw `DB` instance:\n\n```\nsql, params = query.build\nresult_set = db.query(sql, params)\n\n# Or you can *splat* the two-element Tuple resulting from Query#build\nresult_set = db.query(*query.build)\n\nusers = User.from_rs(result_set)\npp typeof(users) # => Array(User)\n```\n\nOr give it to a `Repository` instance so it builds it and extracts its generic type implicitly:\n\n```\nusers = repo.query(query)\n\n# query has User as its generic type, and the repo knows it\npp typeof(users) # => Array(User)\n```\n\nAs `#build` returns a pair of raw SQL string and params, you can combine its usage as you want:\n\n```\ndb.scalar(*query.build)\ndb.exec(query.build[0]) # Will omit params\nrepo.scalar(query)\nrepo.query(User, query.build[0], query.build[1])\nrepo.exec(*query)\n```\n\n## Type safety\n\nMost of the `Query` methods are type-safe. For example, `#where`:\n\n```\nquery = Query(User).new.where(name: \"John\")\n```\n\nIn this example, the query would look for an instance variable with getter called `#name`\nin the `User` class. And if it does not find it, it raises in compilation time with meaningful\nerror message:\n\n```text\nClass `User` has neither field nor reference with key `:name` eligible for `Query(User)#where` call\n```\n\nAnd if you pass the wrong type to the `where` call, it would raise as well:\n\n```\nquery.where(name: 42)\n```\n\n```text\nInvalid compile-time type `Int32` for argument `:name` in `Query(User)#where` call. Expected: `(String | Nil)`\n```\n\nOther methods, such as `#select` or `#join` without block are a bit hacky and rely on\nCrystal's enum autocasting feature. If you mistyped a field or reference name, you'll\nsee a error like `No overload matches ... with types Symbol`. If you get such an error,\nthen you are very much likely to have a typo in your code, check the query call arguments.\n\n## Model shortucts\n\n`Model` has both class and instance shortcuts. Class shortcuts are available for almost\nevery `Query` method, for example:\n\n```\nUser.where(id: 42) == Query(User).new.where(id: 42)\n```\n\nSee `Model::ClassQueryShortcuts`. Instance shortucts are `Model#insert`, `Model#update`\nand `Model#delete`.","summary":"<p>Type-safe SQL query builder.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"==(other:self)-instance-method","html_id":"==(other:self)-instance-method","name":"==","doc":"Compare queries.","summary":"<p>Compare queries.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : <span class=\"k\">self</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L191","def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if type == other.type\nelse\n  return false\nend\nif get_limit == other.get_limit\nelse\n  return false\nend\nif get_offset == other.get_offset\nelse\n  return false\nend\nif get_group_by == other.get_group_by\nelse\n  return false\nend\nif get_order_by == other.get_order_by\nelse\n  return false\nend\nif get_returning == other.get_returning\nelse\n  return false\nend\nif self.get_select == other.get_select\nelse\n  return false\nend\nif get_having == other.get_having\nelse\n  return false\nend\nif get_insert == other.get_insert\nelse\n  return false\nend\nif get_join == other.get_join\nelse\n  return false\nend\nif get_set == other.get_set\nelse\n  return false\nend\nif get_where == other.get_where\nelse\n  return false\nend\nreturn true\n"}},{"id":"all-instance-method","html_id":"all-instance-method","name":"all","doc":"Alias of `#limit(nil)`.","summary":"<p>Alias of <code><a href=\"../../Onyx/SQL/Query.html#limit%28limit%3AInt32%3F%29-instance-method\">#limit(nil)</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L209","def":{"name":"all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(nil)"}},{"id":"and(clause:String)-instance-method","html_id":"and(clause:String)-instance-method","name":"and","doc":"A shorthand for calling `and_where` or `and_having` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#and_where%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_where</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#and_having%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_having</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"and","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  and_having(clause)\nelse\n  and_where(clause)\nend"}},{"id":"and(clause:String,*params)-instance-method","html_id":"and(clause:String,*params)-instance-method","name":"and","doc":"A shorthand for calling `and_where` or `and_having` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#and_where%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_where</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#and_having%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_having</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"and","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  and_having(clause, *params)\nelse\n  and_where(clause, *params)\nend"}},{"id":"and(**args:**U)forallU-instance-method","html_id":"and(**args:**U)forallU-instance-method","name":"and","doc":"A shorthand for calling `and_where` or `and_having` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#and_where%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_where</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#and_having%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_having</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[],"args_string":"(**args : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"and","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"BUG: Cannot call 'Onyx::SQL::Query(#{T})#having with named arguments'\")\nelse\n  and_where(**args)\nend"}},{"id":"and_having(clause:String)-instance-method","html_id":"and_having(clause:String)-instance-method","name":"and_having","doc":"Add `AND` *clause* to `HAVING`.\n\n```\nquery.and_having(\"foo IS NULL\") # => \"HAVING (...) AND (foo IS NULL)\"\n```","summary":"<p>Add <code>AND</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: false, not: false)"}},{"id":"and_having(clause:String,*params)-instance-method","html_id":"and_having(clause:String,*params)-instance-method","name":"and_having","doc":"Add `AND` *clause* with *params* to `HAVING`.\n\n```\nquery.and_having(\"foo = ?\", \"bar\") # => \"HAVING (...) AND (foo = ?)\"\n```","summary":"<p>Add <code>AND</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: false, not: false)"}},{"id":"and_having(**values:**U)forallU-instance-method","html_id":"and_having(**values:**U)forallU-instance-method","name":"and_having","doc":"This method will raise in compilation-time,\nbecause having a `HAVING` query with a `Model`'s attributes makes no sense.","summary":"<p>This method will raise in compilation-time, because having a <code>HAVING</code> query with a <code><a href=\"../../Onyx/SQL/Model.html\">Model</a></code>'s attributes makes no sense.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"and_having","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n            {% pretty_values = \"\" %}\n\n            {% for key, value, index in U %}\n              {% pretty_values = pretty_values + \"#{key}: #{value}\" %}\n              {% if index < (U.size - 1)\n  pretty_values = pretty_values + \", \"\nend %}\n            {% end %}\n\n            {% raise(\"Cannot call `Query(#{T})#and_having(#{pretty_values.id})` because `HAVING` clause with direct `#{T}` fields or references makes no sense. Use the string clause version instead\") %}\n          {% end %}"}},{"id":"and_having_not(clause:String)-instance-method","html_id":"and_having_not(clause:String)-instance-method","name":"and_having_not","doc":"Add `AND NOT` *clause* to `HAVING`.\n\n```\nquery.and_having_not(\"foo IS NULL\") # => \"HAVING (...) AND NOT (foo IS NULL)\"\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: false, not: true)"}},{"id":"and_having_not(clause:String,*params)-instance-method","html_id":"and_having_not(clause:String,*params)-instance-method","name":"and_having_not","doc":"Add `AND NOT` *clause* with *params* to `HAVING`.\n\n```\nquery.and_having_not(\"foo = ?\", \"bar\") # => \"HAVING (...) AND NOT (foo = ?)\"\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: false, not: true)"}},{"id":"and_having_not(**values:**U)forallU-instance-method","html_id":"and_having_not(**values:**U)forallU-instance-method","name":"and_having_not","doc":"This method will raise in compilation-time,\nbecause having a `HAVING` query with a `Model`'s attributes makes no sense.","summary":"<p>This method will raise in compilation-time, because having a <code>HAVING</code> query with a <code><a href=\"../../Onyx/SQL/Model.html\">Model</a></code>'s attributes makes no sense.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"and_having_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n            {% pretty_values = \"\" %}\n\n            {% for key, value, index in U %}\n              {% pretty_values = pretty_values + \"#{key}: #{value}\" %}\n              {% if index < (U.size - 1)\n  pretty_values = pretty_values + \", \"\nend %}\n            {% end %}\n\n            {% raise(\"Cannot call `Query(#{T})#and_having_not(#{pretty_values.id})` because `HAVING` clause with direct `#{T}` fields or references makes no sense. Use the string clause version instead\") %}\n          {% end %}"}},{"id":"and_not(clause:String)-instance-method","html_id":"and_not(clause:String)-instance-method","name":"and_not","doc":"A shorthand for calling `and_where_not` or `and_having_not` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#and_where_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_where_not</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#and_having_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_having_not</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"and_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  and_having_not(clause)\nelse\n  and_where_not(clause)\nend"}},{"id":"and_not(clause:String,*params)-instance-method","html_id":"and_not(clause:String,*params)-instance-method","name":"and_not","doc":"A shorthand for calling `and_where_not` or `and_having_not` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#and_where_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_where_not</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#and_having_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_having_not</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"and_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  and_having_not(clause, *params)\nelse\n  and_where_not(clause, *params)\nend"}},{"id":"and_not(**args:**U)forallU-instance-method","html_id":"and_not(**args:**U)forallU-instance-method","name":"and_not","doc":"A shorthand for calling `and_where_not` or `and_having_not` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#and_where_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_where_not</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#and_having_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#and_having_not</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[],"args_string":"(**args : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"and_not","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"BUG: Cannot call 'Onyx::SQL::Query(#{T})#having with named arguments'\")\nelse\n  and_where_not(**args)\nend"}},{"id":"and_where(**values:**U)forallU-instance-method","html_id":"and_where(**values:**U)forallU-instance-method","name":"and_where","doc":"Add `AND` clause with *values* to `WHERE`.\n\n```\nand_where(id: 42) # => \"WHERE (...) AND (id = ?)\"\n```","summary":"<p>Add <code>AND</code> clause with <em>values</em> to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"and_where","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: false, not: false)"}},{"id":"and_where(clause:String,*params)-instance-method","html_id":"and_where(clause:String,*params)-instance-method","name":"and_where","doc":"Add `AND` *clause* with *params* to `WHERE`.\n\n```\nquery.and_where(\"foo = ?\", \"bar\") # => \"WHERE (...) AND (foo = ?)\"\n```","summary":"<p>Add <code>AND</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: false, not: false)"}},{"id":"and_where(clause:String)-instance-method","html_id":"and_where(clause:String)-instance-method","name":"and_where","doc":"Add `AND` *clause* to `WHERE`.\n\n```\nquery.and_where(\"foo IS NULL\") # => \"WHERE (...) AND (foo IS NULL)\"\n```","summary":"<p>Add <code>AND</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: false, not: false)"}},{"id":"and_where_not(**values:**U)forallU-instance-method","html_id":"and_where_not(**values:**U)forallU-instance-method","name":"and_where_not","doc":"Add `AND NOT` clause with *values* to `WHERE`.\n\n```\nand_where_not(id: 42) # => \"WHERE (...) AND NOT (id = ?)\"\n```","summary":"<p>Add <code>AND NOT</code> clause with <em>values</em> to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"and_where_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: false, not: true)"}},{"id":"and_where_not(clause:String,*params)-instance-method","html_id":"and_where_not(clause:String,*params)-instance-method","name":"and_where_not","doc":"Add `AND NOT` *clause* with *params* to `WHERE`.\n\n```\nquery.and_where_not(\"foo = ?\", \"bar\") # => \"WHERE (...) AND NOT (foo = ?)\"\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: false, not: true)"}},{"id":"and_where_not(clause:String)-instance-method","html_id":"and_where_not(clause:String)-instance-method","name":"and_where_not","doc":"Add `AND NOT` *clause* to `WHERE`.\n\n```\nquery.and_where_not(\"foo IS NULL\") # => \"WHERE (...) AND NOT (foo IS NULL)\"\n```","summary":"<p>Add <code>AND NOT</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"and_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: false, not: true)"}},{"id":"build(index_params=false):Tuple(String,Enumerable(DB::Any))-instance-method","html_id":"build(index_params=false):Tuple(String,Enumerable(DB::Any))-instance-method","name":"build","doc":"Build this query, returning its SQL representation and `Enumerable` of DB-ready params.\nPass `true` to replace `\"?\"` query arguments with `\"$n\"`, which would work for PostgreSQL.","summary":"<p>Build this query, returning its SQL representation and <code>Enumerable</code> of DB-ready params.</p>","abstract":false,"args":[{"name":"index_params","doc":null,"default_value":"false","external_name":"index_params","restriction":""}],"args_string":"(index_params = <span class=\"n\">false</span>) : Tuple(String, Enumerable(DB::Any))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L235","def":{"name":"build","args":[{"name":"index_params","doc":null,"default_value":"false","external_name":"index_params","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(String, Enumerable(DB::Any))","visibility":"Public","body":"sql = IO::Memory.new\nparams = Array(DB::Any).new\nto_s(sql, params, index_params)\nreturn {sql.to_s, params}\n"}},{"id":"delete-instance-method","html_id":"delete-instance-method","name":"delete","doc":"Mark this query as a `DELETE` one. It's recommended to call `#where` as well:\n\n```\nquery = User.delete.where(id: 17)\nquery.build # => {\"DELETE FROM users WHERE id = ?\", {17}}\n```\n\n`Model`s have a handy `Model#delete` shortcut:\n\n```\nuser.delete == User.delete.where(id: user.id)\n```","summary":"<p>Mark this query as a <code>DELETE</code> one.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/delete.cr#L15","def":{"name":"delete","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = :delete\nself\n"}},{"id":"group_by(values:Enumerable(String))-instance-method","html_id":"group_by(values:Enumerable(String))-instance-method","name":"group_by","doc":"Add `GROUP_BY` clause.","summary":"<p>Add <code>GROUP_BY</code> clause.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(String)"}],"args_string":"(values : Enumerable(String))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/group_by.cr#L4","def":{"name":"group_by","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"values.each do |value|\n  ensure_group_by << value\nend\nself\n"}},{"id":"group_by(*values:String)-instance-method","html_id":"group_by(*values:String)-instance-method","name":"group_by","doc":"Add `GROUP_BY` clause.","summary":"<p>Add <code>GROUP_BY</code> clause.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"args_string":"(*values : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/group_by.cr#L13","def":{"name":"group_by","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"group_by(values)"}},{"id":"having(or:Bool=false,not:Bool=false,**values:**U):selfforallU-instance-method","html_id":"having(or:Bool=false,not:Bool=false,**values:**U):selfforallU-instance-method","name":"having","doc":"This method will raise in compilation-time,\nbecause having a `HAVING` query with a `Model`'s attributes makes no sense.","summary":"<p>This method will raise in compilation-time, because having a <code>HAVING</code> query with a <code><a href=\"../../Onyx/SQL/Model.html\">Model</a></code>'s attributes makes no sense.</p>","abstract":false,"args":[{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>, **values : **U) : <span class=\"k\">self</span> forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/having.cr#L5","def":{"name":"having","args":[{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if true %}\n        {% pretty_values = \"\" %}\n\n        {% for key, value, index in U %}\n          {% pretty_values = pretty_values + \"#{key}: #{value}\" %}\n          {% if index < (U.size - 1)\n  pretty_values = pretty_values + \", \"\nend %}\n        {% end %}\n\n        {% raise(\"Cannot call `Query(#{T})#having(#{pretty_values.id})` because `HAVING` clause with direct `#{T}` fields or references makes no sense. Use the string clause version instead\") %}\n      {% end %}"}},{"id":"having(clause:String,or:Bool=false,not:Bool=false)-instance-method","html_id":"having(clause:String,or:Bool=false,not:Bool=false)-instance-method","name":"having","doc":"Add `HAVING` *clause* without params.\n\n```\nquery = User.having(\"foo IS NULL\")\nquery.build # => {\"HAVING (foo IS NULL)\", {}}\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery = User.having(\"foo IS NULL\").having(\"bar IS NOT NULL\")\nquery.build # => {\"HAVING (foo IS NULL) AND (bar IS NOT NULL)\", {}}\n```","summary":"<p>Add <code>HAVING</code> <em>clause</em> without params.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_having << Having.new(clause: clause, params: nil, or: or, not: not)\n@latest_wherish_clause = :having\nself\n"}},{"id":"having(clause:String,*params:DB::Any,or:Bool=false,not:Bool=false)-instance-method","html_id":"having(clause:String,*params:DB::Any,or:Bool=false,not:Bool=false)-instance-method","name":"having","doc":"Add `HAVING` *clause* with *params*.\n\n```\nquery = User.having(\"foo = ?\", \"bar\")\nquery.build # => {\"HAVING (foo = ?)\", {\"bar\"}}\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery = User.having(\"foo = ?\", \"bar\").having(\"baz = ?\", 42)\nquery.build # => {\"HAVING (foo = ?) AND (baz = ?)\", {\"bar\", 42}}\n```","summary":"<p>Add <code>HAVING</code> <em>clause</em> with <em>params</em>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, *params : DB::Any, or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_having << Having.new(clause: clause, params: params.to_a.map do |__arg1|\n  __arg1.as(DB::Any)\nend, or: or, not: not)\n@latest_wherish_clause = :having\nself\n"}},{"id":"having_not(clause,*params)-instance-method","html_id":"having_not(clause,*params)-instance-method","name":"having_not","doc":"Add `NOT` *clause* with *params* to `HAVING`.\n\n```\nquery.having_not(\"foo = ?\", \"bar\") # => \"HAVING (...) AND NOT (foo = ?)\"\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, not: true)"}},{"id":"having_not(clause)-instance-method","html_id":"having_not(clause)-instance-method","name":"having_not","doc":"Add `NOT` *clause* to `HAVING`.\n\n```\nquery.having_not(\"foo IS NULL\") # => \"HAVING (...) AND NOT (foo IS NULL)\"\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"args_string":"(clause)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, not: true)"}},{"id":"insert(name:T::Field|T::Reference|String,value:String)-instance-method","html_id":"insert(name:T::Field|T::Reference|String,value:String)-instance-method","name":"insert","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"T::Field | T::Reference | String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(name : T::Field | T::Reference | String, value : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/insert.cr#L62","def":{"name":"insert","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"T::Field | T::Reference | String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if name.is_a?(T::Field) || name.is_a?(T::Reference)\n  ensure_insert << (Insert.new(T.db_column(name), value))\nelse\n  ensure_insert << (Insert.new(name, value))\nend\n@type = :insert\nself\n"}},{"id":"insert(**values:**U):selfforallU-instance-method","html_id":"insert(**values:**U):selfforallU-instance-method","name":"insert","doc":"Mark this query as `INSERT` one and insert the arguments. It's a **type-safe** method.\nHowever, it will call `.not_nil!` on references' primary keys, thus it can raise\n`NilAssertionError` in runtime:\n\n```\nPost.insert(content: \"foo\", author: user) # Will raise NilAssertionError in runtime if `user.id` is `nil`\n```\n\nTODO: Consider inserting explicit reference keys instead, e.g.\n`Post.insert(author_id: user.id.not_nil!)` (when `Model.db_values` allows to).\n\n## Example:\n\n```\nquery = User.insert(name: \"John\", age: 18)\nquery.build # => {\"INSERT INTO users (name, age) VALUES (?, ?)\", {\"John\", 18}}\n```\n\n`Model`s have a handy `Model#insert` shortcut. But it is less type-safe (regarding to\n`not_null` variables, see in `Model#insert` docs):\n\n```\nuser.insert == User.insert(id: user.id, name: user.name.not_nil!)\n```","summary":"<p>Mark this query as <code>INSERT</code> one and insert the arguments.</p>","abstract":false,"args":[],"args_string":"(**values : **U) : <span class=\"k\">self</span> forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/insert.cr#L27","def":{"name":"insert","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"values.each do |key, value|\n  {% if true %}\n          case key\n          {% for key, value in U %}\n            {%   ivar = T.instance_vars.find do |__arg0|\n    __arg0.name == key\n  end\n  not_null = (a = (ivar.annotation(Field)) || (ivar.annotation(Reference))) && a[:not_null]\n  if not_null && value.nilable?\n    raise(\"On Query#insert: #{key} is nilable in compilation time (#{value}), but @#{ivar.name} has `not_null` option set to `true`. Consider calling `.not_nil!` on the value\")\n  end\n  db_default = (a = ivar.annotation(Field)) && a[:default]\n  is_pk = \"@#{ivar.name}\".id == (T.annotation(Model::Options))[:primary_key].id\n %}\n\n            {% unless ivar\n    raise(\"Cannot find an instance variable named @#{key} in #{T}\")\n  end %}\n\n            when {{ key.symbolize }}\n              if !value.nil? || !({{ db_default }} || {{ is_pk }})\n                ensure_insert << Insert.new(\n                  T.db_column({{ ivar.name.symbolize }}),\n                  Box(DB::Any).new(T.db_values({{ ivar.name }}: value.as({{ value }}))[0]).as(Void*)\n                )\n              end\n          {% end %}\n          else\n            raise \"BUG: Runtime case didn't match anything\"\n          end\n        {% end %}\nend\n@type = :insert\nself\n"}},{"id":"join(table:String,on:String,as_as:String?=nil,type:JoinType=:inner)-instance-method","html_id":"join(table:String,on:String,as_as:String?=nil,type:JoinType=:inner)-instance-method","name":"join","doc":"Add explicit `JOIN` clause.\nIf the query hasn't had any `#select` calls before, then `#select(T)` is called on it.\n\n```\nquery.join(\"a\", on: \"a.id = b.id\", as: \"c\", :right) # => RIGHT JOIN a ON a.id = b.id AS c\n```","summary":"<p>Add explicit <code>JOIN</code> clause.</p>","abstract":false,"args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | ::Nil"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"args_string":"(table : String, on : String, as _as : String? = <span class=\"n\">nil</span>, type : JoinType = <span class=\"n\">:inner</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr#L17","def":{"name":"join","args":[{"name":"table","doc":null,"default_value":"","external_name":"table","restriction":"String"},{"name":"on","doc":null,"default_value":"","external_name":"on","restriction":"String"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | ::Nil"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_join << Join.new(table: table, on: on, as: _as, type: type)\nif @select.nil?\n  self.select(T)\nend\nself\n"}},{"id":"join(*,on:String?=nil,as_as:String?=nil,type:JoinType=:inner,**values:**U,&block):selfforallU-instance-method","html_id":"join(*,on:String?=nil,as_as:String?=nil,type:JoinType=:inner,**values:**U,&amp;block):selfforallU-instance-method","name":"join","doc":"Add `JOIN` clause by a model reference.\nYields another `Query` instance which has the reference's type.\nIt then merges the yielded query with the main query.\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32\n    type username : String\n    type authored_posts : Array(Post), foreign_key: \"author_id\"\n  end\nend\n\nclass Post\n  include Onyx::SQL::Model\n\n  schema posts do\n    pkey id : Int32\n    type body : String\n    type author : User, key: \"author_id\"\n  end\nend\n\nquery = Post\n  .join(author: true) do |q|\n    pp typeof(q)        # => Query(User)\n    q.select(:username) # :username is looked up in User in compilation time\n    q.where(id: 42)\n  end\n\nquery.build # => {\"SELECT posts.*, author.username FROM posts INNER JOIN users ON posts.author_id = author.id AS author WHERE author.id = ?\", {42}}\n```\n\nIn fact, the resulting SQL slightly differs from the example above:\n\n```text\nSELECT posts.*, '' AS _author, author.username, '' AS _author FROM posts ...\n```\n\nThe `\"AS _author\"` thing is a *marker*, which is used to preload references on\n`Serializable.from_rs` call:\n\n```\nposts = repo.query(query)\npp posts # => [<Post @author=<User @id=42 @username=\"John\">>, <Post @author=<User @id=42 @username=\"John\">>, ...]\n```\n\nRead more about preloading references in `Serializable` docs.\n\nIf parent query hasn't had any `#select` calls before, then `#select(T)` is called on it.\n\nNOTE: The syntax is about to be improved from `join(author: true)` to `join(:author)`.\nSee the relevant [forum topic](https://forum.crystal-lang.org/t/symbols/391).","summary":"<p>Add <code>JOIN</code> clause by a model reference.</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | ::Nil"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"args_string":"(*, on : String? = <span class=\"n\">nil</span>, as _as : String? = <span class=\"n\">nil</span>, type : JoinType = <span class=\"n\">:inner</span>, **values : **U, &block) : <span class=\"k\">self</span> forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr#L87","def":{"name":"join","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"nil","external_name":"as","restriction":"String | ::Nil"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":0,"yields":0,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if true %}\n        {% if U.keys.size != 1\n  raise(\"Can only join a single reference\")\nend\nkey = U.keys.first\nivar = T.instance_vars.find do |iv|\n  iv.name == key\nend\nunless ivar\n  raise(\"Cannot find instance variable @#{key} in #{T}\")\nend\nann = ivar.annotation(Reference)\nunless ann\n  raise(\"Instance variable @#{key} of #{T} must have Onyx::SQL::Reference annotation\")\nend\n %}\n\n        join({{ ivar.name.symbolize }}, on: on, as: _as || {{ ivar.name.stringify }}, type: type)\n\n        {% type = ivar.type.union_types.find do |t|\n  t != Nil\nend\nappend_select = true\nif type <= Enumerable\n  unless ann[:key]\n    append_select = false\n  end\n  type = type.type_vars.first\nend\n %}\n\n        subquery =  Query({{ type }}).new(_as || {{ ivar.name.stringify }})\n        yield subquery\n\n        {% if append_select %}\n          if sub_select = subquery.get_select\n            self.select(\"'' AS _{{ ivar.name }}\")\n            ensure_select.concat(sub_select)\n            self.select(\"'' AS _{{ ivar.name }}\")\n          end\n\n          ensure_order_by.concat(subquery.get_order_by.not_nil!) if subquery.get_order_by\n        {% end %}\n\n        ensure_join.concat(subquery.get_join.not_nil!) if subquery.get_join\n        ensure_where.concat(subquery.get_where.not_nil!) if subquery.get_where\n      {% end %}\nself\n"}},{"id":"join(reference:T::Reference,on:String?=nil,as_as:String=reference.to_s.underscore,type:JoinType=:inner)-instance-method","html_id":"join(reference:T::Reference,on:String?=nil,as_as:String=reference.to_s.underscore,type:JoinType=:inner)-instance-method","name":"join","doc":"Add `JOIN` clause by a model *reference* without yielding a sub-query.\nIf the query hasn't had any `#select` calls before, then `#select(T)` is called on it.\n\n```\nquery = Post.join(:author).where(id: 17)\nquery.build # => {\"SELECT posts.* FROM posts INNER JOIN users AS author ON posts.author_id = author.id WHERE posts.id = ?\", {17}}\n```\n\nNote that in this case there are no markers, so a post's `@author` reference would\n**not** have `@username` variable filled. However, the reference itself would\nstill present, as a post row itself contains the `\"author_id\"` column, which would\nbe put into a post's `@author` instance upon calling `Serializable.from_rs`:\n\n```\npost = repo.query(Post.select(Post, \"author.username\").join(:author)).first\n# SELECT posts.*, author.username FROM posts ...\npp post # => <Post @author=<User @id=17 @username=nil>>\n```","summary":"<p>Add <code>JOIN</code> clause by a model <em>reference</em> without yielding a sub-query.</p>","abstract":false,"args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"args_string":"(reference : T::Reference, on : String? = <span class=\"n\">nil</span>, as _as : String = reference.to_s.underscore, type : JoinType = <span class=\"n\">:inner</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr#L153","def":{"name":"join","args":[{"name":"reference","doc":null,"default_value":"","external_name":"reference","restriction":"T::Reference"},{"name":"on","doc":null,"default_value":"nil","external_name":"on","restriction":"String | ::Nil"},{"name":"_as","doc":null,"default_value":"reference.to_s.underscore","external_name":"as","restriction":"String"},{"name":"type","doc":null,"default_value":":inner","external_name":"type","restriction":"JoinType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n        {% table = (T.annotation(Model::Options))[:table].id\npkey = T.instance_vars.find do |ivar|\n  \"@#{ivar.name}\".id == (T.annotation(Model::Options))[:primary_key].id\nend\n %}\n\n        case reference\n        {% for ivar in T.instance_vars.select(&.annotation(Reference)) %}\n          {% type = ivar.type.union_types.find do |t|\n  t != Nil\nend\nenumerable = false\nif type <= Enumerable\n  enumerable = true\n  type = type.type_vars.first\nend\nroptions = type.annotation(Model::Options)\nunless roptions\n  raise(\"Onyx::SQL::Model::Options annotation must be defined for #{type}\")\nend\nrtable = roptions[:table].id\nunless rtable\n  raise(\"Onyx::SQL::Model::Options annotation is missing :table option for #{type}\")\nend\n %}\n\n          when .{{ ivar.name }}?\n            {% if key = (ivar.annotation(Reference))[:key] %}\n              {% rpk = roptions[:primary_key]\nunless rpk\n  raise(\"Onyx::SQL::Model::Options annotation is missing :primary_key option for #{type}\")\nend\nrpk = (rpk.name.stringify.split('@'))[1].id\non_op = (enumerable ? \"IN\".id : \"=\".id)\n %}\n\n              ensure_join << Join.new(\n                table: {{ rtable.stringify }},\n                on: on || \"#{_as}.#{ {{ type }}.db_column({{ rpk.symbolize }}) } {{ on_op }} #{@alias || {{ table.stringify }}}.{{ key.id }}\",\n                as: _as,\n                type: type\n              )\n            {% else %}{% if foreign_key = (ivar.annotation(Reference))[:foreign_key] %}\n              {% rivar = type.instance_vars.find do |rivar|\n  (a = rivar.annotation(Reference)) && (a[:key].id == foreign_key.id)\nend\nunless rivar\n  raise(\"Cannot find matching reference for #{T}@#{ivar.name} in #{type}\")\nend\nrtype = rivar.type.union_types.find do |t|\n  t != Nil\nend\nkey = (rivar.annotation(Reference))[:key].id\non_op = rtype <= Enumerable ? \"IN\".id : \"=\".id\n %}\n\n              ensure_join << Join.new(\n                table: {{ rtable.stringify }},\n                on: on || \"#{@alias || {{ table.stringify }}}.#{T.db_column({{ pkey.name.symbolize }})} {{ on_op }} #{_as}.{{ key }}\",\n                as: _as,\n                type: type\n              )\n            {% else %}\n              {% raise(\"Neither `key` nor `foreign_key` option is set for reference @#{ivar.name} in #{T}\") %}\n            {% end %}{% end %}\n        {% end %}\n        else\n          raise \"BUG: Cannot find reference #{reference} in #{T}::Reference\"\n        end\n      {% end %}\nif @select.nil?\n  self.select(T)\nend\nself\n"}},{"id":"limit(limit:Int32?)-instance-method","html_id":"limit(limit:Int32?)-instance-method","name":"limit","doc":"Add `LIMIT` clause. `nil` argument cancels it.","summary":"<p>Add <code>LIMIT</code> clause.</p>","abstract":false,"args":[{"name":"limit","doc":null,"default_value":"","external_name":"limit","restriction":"Int32 | ::Nil"}],"args_string":"(limit : Int32?)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/limit.cr#L4","def":{"name":"limit","args":[{"name":"limit","doc":null,"default_value":"","external_name":"limit","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@limit = limit\nself\n"}},{"id":"offset(offset:Int32?)-instance-method","html_id":"offset(offset:Int32?)-instance-method","name":"offset","doc":"Add `OFFSET` clause. `nil` argument cancels it.","summary":"<p>Add <code>OFFSET</code> clause.</p>","abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Int32 | ::Nil"}],"args_string":"(offset : Int32?)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/offset.cr#L4","def":{"name":"offset","args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@offset = offset\nself\n"}},{"id":"one-instance-method","html_id":"one-instance-method","name":"one","doc":"Alias of `#limit(1)`.","summary":"<p>Alias of <code><a href=\"../../Onyx/SQL/Query.html#limit%28limit%3AInt32%3F%29-instance-method\">#limit(1)</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L214","def":{"name":"one","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"limit(1)"}},{"id":"or(clause:String)-instance-method","html_id":"or(clause:String)-instance-method","name":"or","doc":"A shorthand for calling `or_where` or `or_having` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#or_where%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_where</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#or_having%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_having</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"or","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  or_having(clause)\nelse\n  or_where(clause)\nend"}},{"id":"or(clause:String,*params)-instance-method","html_id":"or(clause:String,*params)-instance-method","name":"or","doc":"A shorthand for calling `or_where` or `or_having` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#or_where%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_where</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#or_having%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_having</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"or","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  or_having(clause, *params)\nelse\n  or_where(clause, *params)\nend"}},{"id":"or(**args:**U)forallU-instance-method","html_id":"or(**args:**U)forallU-instance-method","name":"or","doc":"A shorthand for calling `or_where` or `or_having` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#or_where%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_where</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#or_having%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_having</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[],"args_string":"(**args : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"or","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"BUG: Cannot call 'Onyx::SQL::Query(#{T})#having with named arguments'\")\nelse\n  or_where(**args)\nend"}},{"id":"or_having(clause:String)-instance-method","html_id":"or_having(clause:String)-instance-method","name":"or_having","doc":"Add `OR` *clause* to `HAVING`.\n\n```\nquery.or_having(\"foo IS NULL\") # => \"HAVING (...) OR (foo IS NULL)\"\n```","summary":"<p>Add <code>OR</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: true, not: false)"}},{"id":"or_having(clause:String,*params)-instance-method","html_id":"or_having(clause:String,*params)-instance-method","name":"or_having","doc":"Add `OR` *clause* with *params* to `HAVING`.\n\n```\nquery.or_having(\"foo = ?\", \"bar\") # => \"HAVING (...) OR (foo = ?)\"\n```","summary":"<p>Add <code>OR</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_having","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: true, not: false)"}},{"id":"or_having(**values:**U)forallU-instance-method","html_id":"or_having(**values:**U)forallU-instance-method","name":"or_having","doc":"This method will raise in compilation-time,\nbecause having a `HAVING` query with a `Model`'s attributes makes no sense.","summary":"<p>This method will raise in compilation-time, because having a <code>HAVING</code> query with a <code><a href=\"../../Onyx/SQL/Model.html\">Model</a></code>'s attributes makes no sense.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"or_having","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n            {% pretty_values = \"\" %}\n\n            {% for key, value, index in U %}\n              {% pretty_values = pretty_values + \"#{key}: #{value}\" %}\n              {% if index < (U.size - 1)\n  pretty_values = pretty_values + \", \"\nend %}\n            {% end %}\n\n            {% raise(\"Cannot call `Query(#{T})#or_having(#{pretty_values.id})` because `HAVING` clause with direct `#{T}` fields or references makes no sense. Use the string clause version instead\") %}\n          {% end %}"}},{"id":"or_having_not(**values:**U)forallU-instance-method","html_id":"or_having_not(**values:**U)forallU-instance-method","name":"or_having_not","doc":"This method will raise in compilation-time,\nbecause having a `HAVING` query with a `Model`'s attributes makes no sense.","summary":"<p>This method will raise in compilation-time, because having a <code>HAVING</code> query with a <code><a href=\"../../Onyx/SQL/Model.html\">Model</a></code>'s attributes makes no sense.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"or_having_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n            {% pretty_values = \"\" %}\n\n            {% for key, value, index in U %}\n              {% pretty_values = pretty_values + \"#{key}: #{value}\" %}\n              {% if index < (U.size - 1)\n  pretty_values = pretty_values + \", \"\nend %}\n            {% end %}\n\n            {% raise(\"Cannot call `Query(#{T})#or_having_not(#{pretty_values.id})` because `HAVING` clause with direct `#{T}` fields or references makes no sense. Use the string clause version instead\") %}\n          {% end %}"}},{"id":"or_having_not(clause:String,*params)-instance-method","html_id":"or_having_not(clause:String,*params)-instance-method","name":"or_having_not","doc":"Add `OR NOT` *clause* with *params* to `HAVING`.\n\n```\nquery.or_having_not(\"foo = ?\", \"bar\") # => \"HAVING (...) OR NOT (foo = ?)\"\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> with <em>params</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, *params, or: true, not: true)"}},{"id":"or_having_not(clause:String)-instance-method","html_id":"or_having_not(clause:String)-instance-method","name":"or_having_not","doc":"Add `OR NOT` *clause* to `HAVING`.\n\n```\nquery.or_having_not(\"foo IS NULL\") # => \"HAVING (...) OR NOT (foo IS NULL)\"\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> to <code>HAVING</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_having_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"having(clause, or: true, not: true)"}},{"id":"or_not(**args:**U)forallU-instance-method","html_id":"or_not(**args:**U)forallU-instance-method","name":"or_not","doc":"A shorthand for calling `or_where_not` or `or_having_not` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#or_where_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_where_not</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#or_having_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_having_not</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[],"args_string":"(**args : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"or_not","args":[],"double_splat":{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  raise(\"BUG: Cannot call 'Onyx::SQL::Query(#{T})#having with named arguments'\")\nelse\n  or_where_not(**args)\nend"}},{"id":"or_not(clause:String,*params)-instance-method","html_id":"or_not(clause:String,*params)-instance-method","name":"or_not","doc":"A shorthand for calling `or_where_not` or `or_having_not` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#or_where_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_where_not</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#or_having_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_having_not</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"or_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  or_having_not(clause, *params)\nelse\n  or_where_not(clause, *params)\nend"}},{"id":"or_not(clause:String)-instance-method","html_id":"or_not(clause:String)-instance-method","name":"or_not","doc":"A shorthand for calling `or_where_not` or `or_having_not` depending on the latest call (`#where` by default).\n\nBUG: It will raise in runtime if called after `having`.","summary":"<p>A shorthand for calling <code><a href=\"../../Onyx/SQL/Query.html#or_where_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_where_not</a></code> or <code><a href=\"../../Onyx/SQL/Query.html#or_having_not%28%2A%2Avalues%3A%2A%2AU%29forallU-instance-method\">#or_having_not</a></code> depending on the latest call (<code><a href=\"../../Onyx/SQL/Query.html#where%28or%3ABool%3Dfalse%2Cnot%3ABool%3Dfalse%2C%2A%2Avalues%3A%2A%2AU%29%3AselfforallU-instance-method\">#where</a></code> by default).</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L253","def":{"name":"or_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @latest_wherish_clause == LatestWherishClause::Having\n  or_having_not(clause)\nelse\n  or_where_not(clause)\nend"}},{"id":"or_where(clause:String)-instance-method","html_id":"or_where(clause:String)-instance-method","name":"or_where","doc":"Add `OR` *clause* to `WHERE`.\n\n```\nquery.or_where(\"foo IS NULL\") # => \"WHERE (...) OR (foo IS NULL)\"\n```","summary":"<p>Add <code>OR</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: true, not: false)"}},{"id":"or_where(clause:String,*params)-instance-method","html_id":"or_where(clause:String,*params)-instance-method","name":"or_where","doc":"Add `OR` *clause* with *params* to `WHERE`.\n\n```\nquery.or_where(\"foo = ?\", \"bar\") # => \"WHERE (...) OR (foo = ?)\"\n```","summary":"<p>Add <code>OR</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: true, not: false)"}},{"id":"or_where(**values:**U)forallU-instance-method","html_id":"or_where(**values:**U)forallU-instance-method","name":"or_where","doc":"Add `OR` clause with *values* to `WHERE`.\n\n```\nor_where(id: 42) # => \"WHERE (...) OR (id = ?)\"\n```","summary":"<p>Add <code>OR</code> clause with <em>values</em> to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"or_where","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: true, not: false)"}},{"id":"or_where_not(clause:String)-instance-method","html_id":"or_where_not(clause:String)-instance-method","name":"or_where_not","doc":"Add `OR NOT` *clause* to `WHERE`.\n\n```\nquery.or_where_not(\"foo IS NULL\") # => \"WHERE (...) OR NOT (foo IS NULL)\"\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, or: true, not: true)"}},{"id":"or_where_not(**values:**U)forallU-instance-method","html_id":"or_where_not(**values:**U)forallU-instance-method","name":"or_where_not","doc":"Add `OR NOT` clause with *values* to `WHERE`.\n\n```\nor_where_not(id: 42) # => \"WHERE (...) OR NOT (id = ?)\"\n```","summary":"<p>Add <code>OR NOT</code> clause with <em>values</em> to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"(**values : **U) forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L143","def":{"name":"or_where_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, or: true, not: true)"}},{"id":"or_where_not(clause:String,*params)-instance-method","html_id":"or_where_not(clause:String,*params)-instance-method","name":"or_where_not","doc":"Add `OR NOT` *clause* with *params* to `WHERE`.\n\n```\nquery.or_where_not(\"foo = ?\", \"bar\") # => \"WHERE (...) OR NOT (foo = ?)\"\n```","summary":"<p>Add <code>OR NOT</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause : String, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"or_where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, or: true, not: true)"}},{"id":"order_by(value:T::Field|String,order:Order?=nil)-instance-method","html_id":"order_by(value:T::Field|String,order:Order?=nil)-instance-method","name":"order_by","doc":"Add `ORDER BY` clause by either a model field or explicit `String` *value*.\n\n```\nq = User.all.order_by(:id, :desc)\nq.build # => {\"SELECT users.* FROM users ORDER BY id DESC\"}\n\nq = User.all.order_by(\"foo(bar)\")\nq.build # => {\"SELECT users.* FROM users ORDER BY foo(bar)\"}\n```","summary":"<p>Add <code>ORDER BY</code> clause by either a model field or explicit <code>String</code> <em>value</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T::Field | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Order | ::Nil"}],"args_string":"(value : T::Field | String, order : Order? = <span class=\"n\">nil</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/order_by.cr#L18","def":{"name":"order_by","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"T::Field | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Order | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value.is_a?(T::Field)\n  {% if true %}\n          case value\n          {% for ivar in T.instance_vars.reject do |iv|\n    iv.annotation(Reference)\n  end %}\n            when .{{ ivar.name }}?\n              ensure_order_by.add(OrderBy.new(\n                \"#{@alias || {{ (T.annotation(Model::Options))[:table].id.stringify }}}.#{T.db_column({{ ivar.name.symbolize }})}\",\n                order\n              ))\n          {% end %}\n          else\n            raise \"BUG: #{value} didn't match any of #{T} instance variables\"\n          end\n        {% end %}\nelse\n  ensure_order_by.add(OrderBy.new(value, order))\nend\nself\n"}},{"id":"returning(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","html_id":"returning(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","name":"returning","doc":"Add `RETURNING` clause by either model field or reference or explicit Char or String.\n\nNOTE: All `RETURNING` clauses are removed on `Repository#exec(query)` call.\nNOTE: SQLite does **not** support `RETURNING` clause.\n\n```\nq = user.insert.returning(:id, :name)\nq.build # => {\"INSERT INTO users ... RETURNING id, name\"}\n\nq = user.insert.returning(\"foo\")\nq.build # => {\"INSERT INTO users ... RETURNING foo\"}\n```","summary":"<p>Add <code>RETURNING</code> clause by either model field or reference or explicit Char or String.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"args_string":"(values : Enumerable(T::Field | T::Reference | Char | String))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/returning.cr#L15","def":{"name":"returning","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"values.each do |value|\n  {% if true %}\n          {% table = (T.annotation(Model::Options))[:table] %}\n\n          if value.is_a?(T::Field)\n            case value\n            {% for ivar in T.instance_vars.reject(&.annotation(Reference)) %}\n              when .{{ ivar.name }}?\n                column = T.db_column({{ ivar.name.symbolize }})\n\n                ensure_returning << if @alias\n                  \"#{@alias}.#{column}\"\n                else\n                  \"{{ table.id }}.#{column}\"\n                end\n            {% end %}\n            else\n              raise \"BUG: #{value} didn't match any of #{T} instance variables\"\n            end\n          elsif value.is_a?(T::Reference)\n            case value\n            {% for ivar in T.instance_vars.select(&.annotation(Reference)).reject do |__arg2|\n    (__arg2.annotation(Reference))[:foreign_key]\n  end %}\n              when .{{ ivar.name }}?\n                column = T.db_column({{ ivar.name.symbolize }})\n\n                ensure_returning << if @alias\n                  \"#{@alias}.#{column}\"\n                else\n                  \"{{ table.id }}.#{column}\"\n                end\n            {% end %}\n            else\n              raise \"BUG: #{value} didn't match any of #{T} instance variables\"\n            end\n          else\n            ensure_returning << value.to_s\n          end\n        {% end %}\nend\nself\n"}},{"id":"returning(klass:T.class)-instance-method","html_id":"returning(klass:T.class)-instance-method","name":"returning","doc":"Add `RETURNING` asterisk clause for the whole `T` table.\n\nNOTE: All `RETURNING` clauses are removed on `Repository#exec(query)` call.\nNOTE: SQLite does **not** support `RETURNING` clause.\n\n```\nPost.returning(Post) # => RETURNING posts.*\n```","summary":"<p>Add <code>RETURNING</code> asterisk clause for the whole <code>T</code> table.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/returning.cr#L72","def":{"name":"returning","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_returning << (if @alias\n  \"#{@alias}.*\"\nelse\n  ({{ (T.annotation(Model::Options))[:table].id.stringify }}) + \".*\"\nend)\nself\n"}},{"id":"returning(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"returning(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","name":"returning","doc":"Add `RETURNING` asterisk clause for the whole `T` table and optionally *values*.\n\nNOTE: All `RETURNING` clauses are removed on `Repository#exec(query)` call.\nNOTE: SQLite does **not** support `RETURNING` clause.\n\n```\nPost.returning(Post, :id) # => RETURNING posts.*, posts.id\n```","summary":"<p>Add <code>RETURNING</code> asterisk clause for the whole <code>T</code> table and optionally <em>values</em>.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>, *values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/returning.cr#L90","def":{"name":"returning","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_returning << (if @alias\n  \"#{@alias}.*\"\nelse\n  ({{ (T.annotation(Model::Options))[:table].id.stringify }}) + \".*\"\nend)\nif values.empty?\nelse\n  returning(values)\nend\nself\n"}},{"id":"returning(*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"returning(*values:T::Field|T::Reference|Char|String)-instance-method","name":"returning","doc":"Add `RETURNING` clause by either model field or reference or explicit Char or String.\n\nNOTE: All `RETURNING` clauses are removed on `Repository#exec(query)` call.\nNOTE: SQLite does **not** support `RETURNING` clause.\n\n```\nq = user.insert.returning(:id, :name)\nq.build # => {\"INSERT INTO users ... RETURNING id, name\"}\n\nq = user.insert.returning(\"foo\")\nq.build # => {\"INSERT INTO users ... RETURNING foo\"}\n```","summary":"<p>Add <code>RETURNING</code> clause by either model field or reference or explicit Char or String.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(*values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/returning.cr#L60","def":{"name":"returning","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"returning(values)"}},{"id":"select(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","html_id":"select(values:Enumerable(T::Field|T::Reference|Char|String))-instance-method","name":"select","doc":"Add `SELECT` clause by either model field or reference or explicit Char or String.\n\nIf no `#select` is called on this query, then it would select everything (`\"*\"`).\nOtherwise it would select those columns only which were specified explicitly.\n\n```\nq = User.all\nq.build # => {\"SELECT * FROM users\"}\n\nq = User.select(:id, :name)\nq.build # => {\"SELECT users.id, users.name FROM users\"}\n\nq = User.select(\"foo\")\nq.build # => {\"SELECT foo FROM users\"}\n\n# Note that in this case the author reference would not be\n# actually preloaded, because the resulting query is missing markers\nq = Post.join(:author)\nq.build # => {\"SELECT * FROM posts JOIN users ...\"}\n\n# That's better\nq = Post.select(Post).join(author: true) { |x| x.select(:name) }\nq.build # => {\"SELECT posts.*, '' AS _author, author.name ...\"}\n```","summary":"<p>Add <code>SELECT</code> clause by either model field or reference or explicit Char or String.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"args_string":"(values : Enumerable(T::Field | T::Reference | Char | String))","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/select.cr#L27","def":{"name":"select","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T::Field | T::Reference | Char | String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"values.each do |value|\n  {% if true %}\n          {% table = (T.annotation(Model::Options))[:table] %}\n\n          if value.is_a?(T::Field)\n            case value\n            {% for ivar in T.instance_vars.reject(&.annotation(Reference)) %}\n              when .{{ ivar.name }}?\n                column = T.db_column({{ ivar.name.symbolize }})\n\n                ensure_select << if @alias\n                  \"#{@alias}.#{column}\"\n                else\n                  \"{{ table.id }}.#{column}\"\n                end\n            {% end %}\n            else\n              raise \"BUG: #{value} didn't match any of #{T} instance variables\"\n            end\n          elsif value.is_a?(T::Reference)\n            case value\n            {% for ivar in T.instance_vars.select(&.annotation(Reference)).reject do |__arg2|\n    (__arg2.annotation(Reference))[:foreign_key]\n  end %}\n              when .{{ ivar.name }}?\n                column = T.db_column({{ ivar.name.symbolize }})\n\n                ensure_select << if @alias\n                  \"#{@alias}.#{column}\"\n                else\n                  \"{{ table.id }}.#{column}\"\n                end\n            {% end %}\n            else\n              raise \"BUG: #{value} didn't match any of #{T} instance variables\"\n            end\n          else\n            ensure_select << value.to_s\n          end\n        {% end %}\nend\n@type = :select\nself\n"}},{"id":"select(klass:T.class)-instance-method","html_id":"select(klass:T.class)-instance-method","name":"select","doc":"Add `SELECT` asterisk clause for the whole `T` table.\n\n```\nPost.select(Post, :id) # => SELECT posts.*, posts.id\n```","summary":"<p>Add <code>SELECT</code> asterisk clause for the whole <code>T</code> table.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/select.cr#L82","def":{"name":"select","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_select << (if @alias\n  \"#{@alias}.*\"\nelse\n  ({{ (T.annotation(Model::Options))[:table].stringify }}) + \".*\"\nend)\n@type = :select\nself\n"}},{"id":"select(nil_value:Nil)-instance-method","html_id":"select(nil_value:Nil)-instance-method","name":"select","doc":"Reset current query selects. This will lead to empty select clause for this partucular\nquery. It's useful when on joining. However, it would raise in runtime if the resulting\nquery has no actual selects.\n\n```\nPost.select(nil).build # \"Cannot build a query with empty SELECT clause\" runtime error\n\nq = Post.select(nil).join(author: true) { |x| x.select(:username) }\nq.build # => {\"SELECT author.username FROM posts JOIN user AS author ...\"}\n```\n\nNOTE: If you call it *after* join, then it will erase everything:\n\n```crystal\nPost.join(author: true) { |x| x.select(:username) }.select(nil).build\n# Cannot build a query with empty SELECT clause\n```","summary":"<p>Reset current query selects.</p>","abstract":false,"args":[{"name":"nil_value","doc":null,"default_value":"","external_name":"nil_value","restriction":"Nil"}],"args_string":"(nil_value : Nil)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/select.cr#L130","def":{"name":"select","args":[{"name":"nil_value","doc":null,"default_value":"","external_name":"nil_value","restriction":"Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@select = Deque(String).new\nself\n"}},{"id":"select(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"select(klass:T.class,*values:T::Field|T::Reference|Char|String)-instance-method","name":"select","doc":"Add `SELECT` asterisk clause for the whole `T` table and *values*.\n\n```\nPost.select(Post, :id) # => SELECT posts.*, posts.id\n```","summary":"<p>Add <code>SELECT</code> asterisk clause for the whole <code>T</code> table and <em>values</em>.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>, *values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/select.cr#L98","def":{"name":"select","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_select << (if @alias\n  \"#{@alias}.*\"\nelse\n  ({{ (T.annotation(Model::Options))[:table].stringify }}) + \".*\"\nend)\nif values.empty?\nelse\n  self.select(values)\nend\n@type = :select\nself\n"}},{"id":"select(*values:T::Field|T::Reference|Char|String)-instance-method","html_id":"select(*values:T::Field|T::Reference|Char|String)-instance-method","name":"select","doc":"Add `SELECT` clause by either model field or reference or explicit Char or String.\n\nIf no `#select` is called on this query, then it would select everything (`\"*\"`).\nOtherwise it would select those columns only which were specified explicitly.\n\n```\nq = User.all\nq.build # => {\"SELECT * FROM users\"}\n\nq = User.select(:id, :name)\nq.build # => {\"SELECT users.id, users.name FROM users\"}\n\nq = User.select(\"foo\")\nq.build # => {\"SELECT foo FROM users\"}\n\n# Note that in this case the author reference would not be\n# actually preloaded, because the resulting query is missing markers\nq = Post.join(:author)\nq.build # => {\"SELECT * FROM posts JOIN users ...\"}\n\n# That's better\nq = Post.select(Post).join(author: true) { |x| x.select(:name) }\nq.build # => {\"SELECT posts.*, '' AS _author, author.name ...\"}\n```","summary":"<p>Add <code>SELECT</code> clause by either model field or reference or explicit Char or String.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"args_string":"(*values : T::Field | T::Reference | Char | String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/select.cr#L73","def":{"name":"select","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"T::Field | T::Reference | Char | String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.select(values)"}},{"id":"set(clause:String)-instance-method","html_id":"set(clause:String)-instance-method","name":"set","doc":"Add explicit `SET` *clause* and mark this query as `UPDATE` one.\n\n```\nquery.set(\"salary = salary * 2\")\n```","summary":"<p>Add explicit <code>SET</code> <em>clause</em> and mark this query as <code>UPDATE</code> one.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"args_string":"(clause : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/set.cr#L8","def":{"name":"set","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_set << (Set.new(clause))\n@type = :update\nself\n"}},{"id":"set(clause:String,*params:DB::Any)-instance-method","html_id":"set(clause:String,*params:DB::Any)-instance-method","name":"set","doc":"Add explicit `SET` *clause* with *params* and mark this query as `UPDATE` one.\n\n```\nquery.set(\"salary = salary * ?\", 2)\n```","summary":"<p>Add explicit <code>SET</code> <em>clause</em> with <em>params</em> and mark this query as <code>UPDATE</code> one.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"args_string":"(clause : String, *params : DB::Any)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/set.cr#L20","def":{"name":"set","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_set << Set.new(clause: clause, explicit: false, values: params)\n@type = :update\nself\n"}},{"id":"set(**values:**U):selfforallU-instance-method","html_id":"set(**values:**U):selfforallU-instance-method","name":"set","doc":"Add `SET` clauses from *values* and mark this query as `UPDATE` one.\nIt's a **type-safe** method.\nHowever, it will call `.not_nil!` on references' primary keys, thus it can raise\n`NilAssertionError` in runtime:\n\n```\nPost.update.set(author: user) # Will raise NilAssertionError in runtime if `user.id` is `nil`\n```\n\nTODO: Consider updating explicit reference keys instead, e.g.\n`Post.update.set(author_id: user.id.not_nil!)` (when `Model.db_values` allows to).\n\n## Example:\n\n```\nquery = User.update.set(name: \"Jake\", age: 17)\nquery.build # => {\"UPDATE users SET name = ?, age = ?\", {\"Jake\", 17}}\n```","summary":"<p>Add <code>SET</code> clauses from <em>values</em> and mark this query as <code>UPDATE</code> one.</p>","abstract":false,"args":[],"args_string":"(**values : **U) : <span class=\"k\">self</span> forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/set.cr#L49","def":{"name":"set","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"values.each do |key, value|\n  {% if true %}\n          case key\n          {% for key, value in U %}\n            {%   ivar = T.instance_vars.find do |__arg0|\n    __arg0.name == key\n  end\n  not_null = (a = (ivar.annotation(Field)) || (ivar.annotation(Reference))) && a[:not_null]\n  if not_null && value.nilable?\n    raise(\"On Query#set: #{key} is nilable in compilation time (#{value}), but @#{ivar.name} has `not_null` option set to `true`. Consider calling `.not_nil!` on the value\")\n  end\n %}\n\n            {% unless ivar\n    raise(\"Cannot find an instance variable named @#{key} in #{T}\")\n  end %}\n\n            when {{ key.symbolize }}\n              ensure_set << Set.new(\n                clause: T.db_column({{ ivar.name.symbolize }}),\n                explicit: true,\n                values: T.db_values({{ ivar.name }}: value.as({{ value }})).to_a\n              )\n          {% end %}\n          else\n            raise \"BUG: Runtime case didn't match anything\"\n          end\n        {% end %}\nend\n@type = :update\nself\n"}},{"id":"type:Type-instance-method","html_id":"type:Type-instance-method","name":"type","doc":"The query type. It's automatically updated on appropriate methods call\n(e.g. it changes to `:insert` on `#insert` call)","summary":"<p>The query type.</p>","abstract":false,"args":[],"args_string":" : Type","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L183","def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Type","visibility":"Public","body":"@type"}},{"id":"update-instance-method","html_id":"update-instance-method","name":"update","doc":"Mark this query as `UPDATE` one. This is for convenience only, and the `#build` would\nraise if there are no `SET` clauses in the query.\n\n```\nUser.update.build             # Runtime error: No values to SET in the UPDATE query\nUser.update.set(name: \"Jane\") # OK\n```\n\n`Model`s have a handy `Model#update` shortcut:\n\n```\nchangeset = user.changeset\nchangeset.update(name: \"Jake\")\nuser.update(changeset) == User.update.set(name: \"Jake\").where(id: user.id)\n```","summary":"<p>Mark this query as <code>UPDATE</code> one.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/update.cr#L18","def":{"name":"update","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@type = :update\nself\n"}},{"id":"where(or:Bool=false,not:Bool=false,**values:**U):selfforallU-instance-method","html_id":"where(or:Bool=false,not:Bool=false,**values:**U):selfforallU-instance-method","name":"where","doc":"Add `WHERE` clause with *values*. All clauses in a single call are concatenated with `AND`.\n\nIt's a **type-safe** method. However, it will call `.not_nil!` on references'\nprimary keys, thus it can raise `NilAssertionError` in runtime:\n\n```\nPost.where(author: user) # Will raise NilAssertionError in runtime if `user.id` is `nil`\n```\n\nConsider using explicit reference keys instead in this case, e.g.\n\n```\nPost.where(author_id: user.id.not_nil!)\n```\n\n## Example:\n\n```\nquery = User.where(name: \"John\", age: 18)\nquery.build # => {\"SELECT ... FROM users WHERE (name = ? AND age = ?)\", {\"John\", 18}}\n```","summary":"<p>Add <code>WHERE</code> clause with <em>values</em>.</p>","abstract":false,"args":[{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>, **values : **U) : <span class=\"k\">self</span> forall U","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L24","def":{"name":"where","args":[{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"**U"},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if true %}\n        internal_clauses = uninitialized String[{{ U.size }}]\n        internal_params = Deque(DB::Any).new\n\n        {% table = (T.annotation(Model::Options))[:table].id %}\n\n        values.each_with_index do |key, value, index|\n          case key\n          {% for key, value in U %}\n            {% found = false %}\n\n            {% for ivar in T.instance_vars %}\n              # If the ivar is a reference\n              {% if ann = ivar.annotation(Reference) %}\n                {% if (key == ivar.name) || (key == ann[:key].id) %}\n                  {% type = ivar.type.union_types.find do |t|\n  t != Nil\nend\npk = (type.annotation(Model::Options))[:primary_key]\n %}\n\n                  # Iterate through reference instance vars to find the primary key var\n                  #\n\n                  {% pk_rivar = nil %}\n\n                  {% for rivar in type.instance_vars %}\n                    {% if \"@#{rivar.name}\".id == pk.name.id %}\n                      {% pk_rivar = rivar %}\n                    {% end %}\n                  {% end %}\n\n                  {% unless pk_rivar\n  raise(\"`primary_key: #{pk}` option didn't match any of `#{type}` instance variables\")\nend %}\n\n                  {% if ann[:not_null] && value.nilable?\n  raise(\"On Query#where: #{key} is nilable in compilation time (#{value}), but @#{ivar.name} has `not_null` option set to `true`. Consider calling `.not_nil!` on the value\")\nend %}\n\n                  {% reference_sql_key = (ivar.annotation(Reference))[:key].id %}\n\n                  # If the key is a reference key (e.g. `#where(author_id: 42)`)\n                  {% if key.id == ann[:key].id %}\n                    {% unless value <= pk_rivar.type\n  raise(\"Invalid compile-time type `#{value}` for argument `#{key.symbolize}` in `Query(#{T})#where` call. Expected: `#{pk_rivar.type}`\")\nend %}\n\n                    {% found = true %}\n\n                    when {{ key.symbolize }}\n                      if value.nil?\n                        internal_clauses[index] = (@alias || {{ table.stringify }}) + \".{{ reference_sql_key }} IS NULL\"\n                      else\n                        internal_clauses[index] = (@alias || {{ table.stringify }}) + \".{{ reference_sql_key }} = ?\"\n                        internal_params << {{ type }}.db_values({{ pk_rivar.name }}: value.as({{ value }}))[0]\n                      end\n\n                  # If the key is a reference name (e.g. `#where(author: user)`)\n                  {% else %}{% if key.id == ivar.name %}\n                    {% unless value <= ivar.type\n  raise(\"Invalid compile-time type `#{value}` for argument `#{key.symbolize}` in `Query(#{T})#where` call. Expected: `#{ivar.type}`\")\nend %}\n\n                    {% found = true %}\n\n                    when {{ key.symbolize }}\n                      if value.nil?\n                        internal_clauses[index] = (@alias || {{ table.stringify }}) + \".{{ reference_sql_key }} IS NULL\"\n                      else\n                        internal_clauses[index] = (@alias || {{ table.stringify }}) + \".{{ reference_sql_key }} = ?\"\n                        internal_params << {{ type }}.db_values({{ pk_rivar.name }}: value.as({{ value }}).{{ pk_rivar.name }})[0]\n                      end\n                  {% end %}{% end %}\n                {% else %}{% if key == ann[:foreign_key].id %}\n                  {% raise(\"Cannot call `Query(#{T})#where` with foreign reference key argument `#{key.symbolize}`\") %}\n                {% end %}{% end %}\n\n              # If the ivar is not a reference, but a field\n              {% else %}{% if key.id == ivar.name %}\n                {% not_null = (a = ivar.annotation(Field)) && a[:not_null] %}\n\n                {% if not_null && value.nilable?\n  raise(\"On Query#where: argument `#{key}:` is nilable in compilation time #{value}, but #{T}@#{ivar.name} has `not_null` option set to `true`. Consider calling `.not_nil!` on the `#{key}:` argument\")\nend %}\n\n                {% unless value <= ivar.type\n  raise(\"Invalid compile-time type `#{value}` for argument `#{key.symbolize}` in `Query(#{T})#where` call. Expected: `#{ivar.type}`\")\nend %}\n\n                {% found = true %}\n\n                {% field_sql_key = (((a = ivar.annotation(Field)) && (k = a[:key])) && k.id) || ivar.name %}\n\n                when {{ key.symbolize }}\n                  if value.nil?\n                    internal_clauses[index] = (@alias || {{ table.stringify }}) + \".{{ field_sql_key }} IS NULL\"\n                  else\n                    internal_clauses[index] = (@alias || {{ table.stringify }}) + \".{{ field_sql_key }} = ?\"\n                    internal_params << T.db_values({{ ivar.name }}: value.as({{ value }}))[0]\n                  end\n              {% end %}{% end %}\n            {% end %}\n\n            {% unless found\n  raise(\"Class `#{T}` has neither field nor reference with key `#{key.symbolize}` eligible for `Query(#{T})#where` call\")\nend %}\n          {% end %}\n          end\n        end\n\n        ensure_where << Where.new(\n          clause: internal_clauses.join(\" AND \"),\n          params: internal_params,\n          or: or,\n          not: not\n        )\n\n        @latest_wherish_clause = :where\n      {% end %}\nself\n"}},{"id":"where(clause:String,or:Bool=false,not:Bool=false)-instance-method","html_id":"where(clause:String,or:Bool=false,not:Bool=false)-instance-method","name":"where","doc":"Add `WHERE` *clause* without params.\n\n```\nquery = User.where(\"foo IS NULL\")\nquery.build # => {\"WHERE (foo IS NULL)\", {}}\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery = User.where(\"foo IS NULL\").where(\"bar IS NOT NULL\")\nquery.build # => {\"WHERE (foo IS NULL) AND (bar IS NOT NULL)\", {}}\n```","summary":"<p>Add <code>WHERE</code> <em>clause</em> without params.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_where << Where.new(clause: clause, params: nil, or: or, not: not)\n@latest_wherish_clause = :where\nself\n"}},{"id":"where(clause:String,*params:DB::Any,or:Bool=false,not:Bool=false)-instance-method","html_id":"where(clause:String,*params:DB::Any,or:Bool=false,not:Bool=false)-instance-method","name":"where","doc":"Add `WHERE` *clause* with *params*.\n\n```\nquery = User.where(\"foo = ?\", \"bar\")\nquery.build # => {\"WHERE (foo = ?)\", {\"bar\"}}\n```\n\nMultiple calls concatenate clauses with `AND`:\n\n```\nquery = User.where(\"foo = ?\", \"bar\").where(\"baz = ?\", 42)\nquery.build # => {\"WHERE (foo = ?) AND (baz = ?)\", {\"bar\", 42}}\n```","summary":"<p>Add <code>WHERE</code> <em>clause</em> with <em>params</em>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"args_string":"(clause : String, *params : DB::Any, or : Bool = <span class=\"n\">false</span>, not : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"where","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"},{"name":"or","doc":null,"default_value":"false","external_name":"or","restriction":"Bool"},{"name":"not","doc":null,"default_value":"false","external_name":"not","restriction":"Bool"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ensure_where << Where.new(clause: clause, params: params.to_a.map do |__arg0|\n  __arg0.as(DB::Any)\nend, or: or, not: not)\n@latest_wherish_clause = :where\nself\n"}},{"id":"where_not(clause)-instance-method","html_id":"where_not(clause)-instance-method","name":"where_not","doc":"Add `NOT` *clause* to `WHERE`.\n\n```\nquery.where_not(\"foo IS NULL\") # => \"WHERE (...) AND NOT (foo IS NULL)\"\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"args_string":"(clause)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, not: true)"}},{"id":"where_not(clause,*params)-instance-method","html_id":"where_not(clause,*params)-instance-method","name":"where_not","doc":"Add `NOT` *clause* with *params* to `WHERE`.\n\n```\nquery.where_not(\"foo = ?\", \"bar\") # => \"WHERE (...) AND NOT (foo = ?)\"\n```","summary":"<p>Add <code>NOT</code> <em>clause</em> with <em>params</em> to <code>WHERE</code>.</p>","abstract":false,"args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"args_string":"(clause, *params)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/wherish.cr#L3","def":{"name":"where_not","args":[{"name":"clause","doc":null,"default_value":"","external_name":"clause","restriction":""},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(clause, *params, not: true)"}},{"id":"where_not(**values)-instance-method","html_id":"where_not(**values)-instance-method","name":"where_not","doc":"Add `NOT` clause with *values* to `WHERE`.\n\n```\nquery.where_not(id: 42) # => \"WHERE (...) AND NOT (id = ?)\"\n```","summary":"<p>Add <code>NOT</code> clause with <em>values</em> to <code>WHERE</code>.</p>","abstract":false,"args":[],"args_string":"(**values)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/where.cr#L139","def":{"name":"where_not","args":[],"double_splat":{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"where(**values, not: true)"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Query/JoinType","path":"Onyx/SQL/Query/JoinType.html","kind":"enum","full_name":"Onyx::SQL::Query::JoinType","name":"JoinType","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/sql/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/onyxframework/sql/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/onyxframework/sql/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/query/join.cr","line_number":4,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Inner","name":"Inner","value":"0","doc":null,"summary":null},{"id":"Left","name":"Left","value":"1","doc":null,"summary":null},{"id":"Right","name":"Right","value":"2","doc":null,"summary":null},{"id":"Full","name":"Full","value":"3","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Query","kind":"class","full_name":"Onyx::SQL::Query(T)","name":"Query"},"doc":"The SQL join type.","summary":"<p>The SQL join type.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"full?-instance-method","html_id":"full?-instance-method","name":"full?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr#L8","def":{"name":"full?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Full"}},{"id":"inner?-instance-method","html_id":"inner?-instance-method","name":"inner?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr#L5","def":{"name":"inner?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Inner"}},{"id":"left?-instance-method","html_id":"left?-instance-method","name":"left?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr#L6","def":{"name":"left?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Left"}},{"id":"right?-instance-method","html_id":"right?-instance-method","name":"right?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/join.cr#L7","def":{"name":"right?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Right"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Query/Order","path":"Onyx/SQL/Query/Order.html","kind":"enum","full_name":"Onyx::SQL::Query::Order","name":"Order","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/sql/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/onyxframework/sql/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/onyxframework/sql/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/query/order_by.cr","line_number":4,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/order_by.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Desc","name":"Desc","value":"0","doc":null,"summary":null},{"id":"Asc","name":"Asc","value":"1","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Query","kind":"class","full_name":"Onyx::SQL::Query(T)","name":"Query"},"doc":"The `ORDER BY` clause order.","summary":"<p>The <code>ORDER BY</code> clause order.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"asc?-instance-method","html_id":"asc?-instance-method","name":"asc?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/order_by.cr#L6","def":{"name":"asc?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Asc"}},{"id":"desc?-instance-method","html_id":"desc?-instance-method","name":"desc?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query/order_by.cr#L5","def":{"name":"desc?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Desc"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Query/Type","path":"Onyx/SQL/Query/Type.html","kind":"enum","full_name":"Onyx::SQL::Query::Type","name":"Type","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/sql/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/onyxframework/sql/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/onyxframework/sql/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/query.cr","line_number":172,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Insert","name":"Insert","value":"0","doc":null,"summary":null},{"id":"Select","name":"Select","value":"1","doc":null,"summary":null},{"id":"Update","name":"Update","value":"2","doc":null,"summary":null},{"id":"Delete","name":"Delete","value":"3","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Query","kind":"class","full_name":"Onyx::SQL::Query(T)","name":"Query"},"doc":"The query type.","summary":"<p>The query type.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"delete?-instance-method","html_id":"delete?-instance-method","name":"delete?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L176","def":{"name":"delete?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Delete"}},{"id":"insert?-instance-method","html_id":"insert?-instance-method","name":"insert?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L173","def":{"name":"insert?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Insert"}},{"id":"select?-instance-method","html_id":"select?-instance-method","name":"select?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L174","def":{"name":"select?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Select"}},{"id":"update?-instance-method","html_id":"update?-instance-method","name":"update?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/query.cr#L175","def":{"name":"update?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Update"}}],"macros":[],"types":[]}]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Reference","path":"Onyx/SQL/Reference.html","kind":"annotation","full_name":"Onyx::SQL::Reference","name":"Reference","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"onyx-sql.cr","line_number":288,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL","kind":"module","full_name":"Onyx::SQL","name":"SQL"},"doc":"Use this annotation to mark an Object's variable as an SQL Reference.\nBoth `Model` and bare `Serializable` object can have `Reference` instance variables.\n\nYou have to decide what type of reference to use. There are two options -- *direct references*\nand *foreign references*.\n\n## Direct references\n\nDirect reference should be understood as *this record stores an another record reference\nin this instance variable* and it is determined by the `:key` option. The referenced object\n**must** have `Model::Options` annotation with `:table` and `:primary_key` options.\nAdditionaly, a matching accessor must be defined for the primary key (e.g. `User#id`\nin the example below)):\n\n```\n@[Onyx::SQL::Model::Options(table: \"users\", primary_key: @id)]\nclass User\n  include Onyx::SQL::Model\n  property! id : Int32\nend\n\nclass Post\n  include Onyx::SQL::Model\n\n  @[Onyx::SQL::Reference(key: \"author_id\")]\n  property! author : User\nend\n```\n\nIn this example, a `Post` might have a `User` instance stored in the `@author` variable,\nwhich is a *direct reference*. When making an SQL query, this instance is implicitly cast to\na database type -- an `\"author_id\"` column with `Int32` type:\n\n```\nPost.db_column(:author)           # => \"author_id\"\nPost.db_values(author: post.user) # => 42 (the user's ID)\n```\n\nIf a reference is direct (i.e. has the `:key` option), a referenced instance is initialized\nas soon as a database result set reads that key. For example, if the result set has \"author_id\"\nkey with value `42`, the `Post` instance will be initialized as\n\n```\n<Post @author=<User @id=42>>\n```\n\nAnd if you want to preload a reference field (or sub-reference), you should use `JOIN`.\nSee `Query#join` for more details.\n\nYou can make both enumerable and non-enumerable variables references.\nIt is impossible to preload enumerable references, though, because the result set is read\nrow-by-row.\n\n## Foreign references\n\nLet's extend the previous example:\n\n```\n@[Onyx::SQL::Model::Options(table: \"users\", primary_key: @id)]\nclass User\n  include Onyx::SQL::Model\n\n  property! id : Int32\n\n  @[Onyx::SQL::Reference(foreign_key: \"author_id\")]\n  property! authored_posts : Array(Post)\nend\n\n@[Onyx::SQL::Model::Options(table: \"posts\", primary_key: @id)]\nclass Post\n  include Onyx::SQL::Model\n\n  property! id : Int32\n\n  @[Onyx::SQL::Reference(key: \"author_id\")]\n  property! author : User\nend\n```\n\nAs you may notice, the `User` class now got the `authored_posts` reference and the `Post` class\nnow has the `Model::Options` annotation. A user has a list of all the posts authored by them,\nwhich is essentialy a *foreign reference*. Basically, the ORM requires that both classes\nhave the link defined -- a direct reference in the first and a foreign in the second. But\ndon't you worry, it will raise in compilation time and tell you about that.\n\nForeign references can be joined as well, but it also implies the inability to preload enumerable\nreferences. However, it works with single foreign references like in this example:\n\n```\nclass User\n  @[Onyx::SQL::Reference(foreign_key: \"user_id\")]\n  property! settings : Settings\nend\n\nclass Settings\n  property! foo : String\n\n  @[Onyx::SQL::Reference(key: \"user_id\")]\n  property! user : User\nend\n\nuser = repo.query(User.join(:settings)(&.select(:foo)).where(id: 42))\npp user # => <User @id=42 @settings=<Settings @foo=\"bar\">>\n```\n\nNOTE: You must not use both `:key` and `:foreign_key` options on a single instance variable.\n\n`Reference` annotation also accepts `not_null` option, which is equal to the `Field`s.\nMark a reference `not_null` if it has a `NOT NULL` clause in the database.\n\n## Usage in schema\n\n`Model.schema` DSL macro effectively reduces and beautifies the code,\nas the `Reference` annotation is automatically applied if a `Model.type` type is `Model` itself\nand has either `:key` or `:foreign_key` option:\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32, converter: PG::Any(Int32)\n    type authored_posts : Array(Post), foreign_key: \"author_id\" # This\n  end\nend\n\nclass Post\n  include Onyx::SQL::Model\n\n  schema posts do\n    pkey id : Int32, converter: PG::Any(Int32)\n    type author : User, key: \"author_id\", not_null: true # And this\n  end\nend\n```","summary":"<p>Use this annotation to mark an Object's variable as an SQL Reference.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository","path":"Onyx/SQL/Repository.html","kind":"class","full_name":"Onyx::SQL::Repository","name":"Repository","abstract":false,"superclass":{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/repository/exec.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/exec.cr"},{"filename":"onyx-sql/repository/logger.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger.cr"},{"filename":"onyx-sql/repository/query.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/query.cr"},{"filename":"onyx-sql/repository/scalar.cr","line_number":2,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/scalar.cr"},{"filename":"onyx-sql/repository.cr","line_number":24,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL","kind":"module","full_name":"Onyx::SQL","name":"SQL"},"doc":"A gateway between `Serializable` and DB. Its main features are logging,\nexpanding `Onyx::SQL::Query` instances and serializing from resulting `DB::ResultSet`.\n\n```\ndb = DB.open(ENV[\"DATABASE_URL\"])\nrepo = Onyx::SQL::Repository.new(db)\n\nrepo.scalar(\"SELECT 1\").as(Int32)\n# [sql] SELECT 1\n# 593Œºs\n\nrepo.scalar(\"SELECT ?\", 1).as(Int32)\n# ditto\n\nrepo.query(\"SELECT * FROM users\")       # Returns raw `DB::ResultSet`\nrepo.query(User, \"SELECT * FROM users\") # Returns `Array(User)`\nrepo.query(User.all)                    # Returns `Array(User)` as well\n# [sql] SELECT users.* FROM users\n# 442Œºs\n```","summary":"<p>A gateway between <code><a href=\"../../Onyx/SQL/Serializable.html\">Serializable</a></code> and DB.</p>","class_methods":[],"constructors":[{"id":"new(db:DB::Database,logger:Logger=Logger::Standard.new)-class-method","html_id":"new(db:DB::Database,logger:Logger=Logger::Standard.new)-class-method","name":"new","doc":"Initialize the repository.","summary":"<p>Initialize the repository.</p>","abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"DB::Database"},{"name":"logger","doc":null,"default_value":"Logger::Standard.new","external_name":"logger","restriction":"Logger"}],"args_string":"(db : DB::Database, logger : Logger = <span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">Standard</span>.<span class=\"k\">new</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr#L32","def":{"name":"new","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":"DB::Database"},{"name":"logger","doc":null,"default_value":"Logger::Standard.new","external_name":"logger","restriction":"Logger"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(db, logger)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"db:DB::Database-instance-method","html_id":"db:DB::Database-instance-method","name":"db","doc":"A `DB::Database` instance for this repository.","summary":"<p>A <code>DB::Database</code> instance for this repository.</p>","abstract":false,"args":[],"args_string":" : DB::Database","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr#L26","def":{"name":"db","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@db"}},{"id":"db=(db)-instance-method","html_id":"db=(db)-instance-method","name":"db=","doc":"A `DB::Database` instance for this repository.","summary":"<p>A <code>DB::Database</code> instance for this repository.</p>","abstract":false,"args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"args_string":"(db)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr#L26","def":{"name":"db=","args":[{"name":"db","doc":null,"default_value":"","external_name":"db","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@db = db"}},{"id":"driver-instance-method","html_id":"driver-instance-method","name":"driver","doc":"Return `#db` driver name, e.g. `\"postgresql\"` for `PG::Driver`.","summary":"<p>Return <code><a href=\"../../Onyx/SQL/Repository.html#db%3ADB%3A%3ADatabase-instance-method\">#db</a></code> driver name, e.g.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr#L60","def":{"name":"driver","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n        case db.driver\n        {% if Object.all_subclasses.any? do |sc|\n  sc.stringify == \"PG::Driver\"\nend %}\n          when PG::Driver then \"postgresql\"\n        {% end %}\n        {% if Object.all_subclasses.any? do |sc|\n  sc.stringify == \"SQLite3::Driver\"\nend %}\n          when SQLite3::Driver then \"sqlite3\"\n        {% end %}\n        else \"sql\"\n        end\n      {% end %}"}},{"id":"exec(sql:String,params:Enumerable(DB::Any)?=nil):DB::ExecResult-instance-method","html_id":"exec(sql:String,params:Enumerable(DB::Any)?=nil):DB::ExecResult-instance-method","name":"exec","doc":"Call `db.exec(sql, params)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#exec%28sql%3AString%2Cparams%3AEnumerable%28DB%3A%3AAny%29%3F%3Dnil%29%3ADB%3A%3AExecResult-instance-method\">.exec(sql, params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"args_string":"(sql : String, params : Enumerable(DB::Any)? = <span class=\"n\">nil</span>) : DB::ExecResult","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/exec.cr#L4","def":{"name":"exec","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::ExecResult","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver}] #{sql}\") do\n  if params\n    db.exec(sql, params.to_a)\n  else\n    db.exec(sql)\n  end\nend\n"}},{"id":"exec(sql:String,*params:DB::Any):DB::ExecResult-instance-method","html_id":"exec(sql:String,*params:DB::Any):DB::ExecResult-instance-method","name":"exec","doc":"Call `db.exec(sql, *params)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#exec%28sql%3AString%2Cparams%3AEnumerable%28DB%3A%3AAny%29%3F%3Dnil%29%3ADB%3A%3AExecResult-instance-method\">.exec(sql, *params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"args_string":"(sql : String, *params : DB::Any) : DB::ExecResult","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/exec.cr#L17","def":{"name":"exec","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"DB::ExecResult","visibility":"Public","body":"exec(sql, params)"}},{"id":"exec(query:Query):DB::ExecResult-instance-method","html_id":"exec(query:Query):DB::ExecResult-instance-method","name":"exec","doc":"Call `db.exec(*query.build)`. It removes any `Query#returning` clauses to avoid DB hanging.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#exec%28query%3AQuery%29%3ADB%3A%3AExecResult-instance-method\">.exec(*query.build)</a></code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"args_string":"(query : Query) : DB::ExecResult","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/exec.cr#L22","def":{"name":"exec","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"DB::ExecResult","visibility":"Public","body":"if query.type.select?\n  raise(ArgumentError.new(\"Must not call 'Repository#exec' with SELECT Query. Consider using 'Repository#scalar' or 'Repository#query' instead\"))\nend\nquery.returning = nil\nexec(*query.build(postgresql?))\n"}},{"id":"logger:Onyx::SQL::Repository::Logger-instance-method","html_id":"logger:Onyx::SQL::Repository::Logger-instance-method","name":"logger","doc":"A `Repository::Logger` instance for this repository.","summary":"<p>A <code><a href=\"../../Onyx/SQL/Repository/Logger.html\">Repository::Logger</a></code> instance for this repository.</p>","abstract":false,"args":[],"args_string":" : Onyx::SQL::Repository::Logger","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr#L29","def":{"name":"logger","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logger"}},{"id":"logger=(logger)-instance-method","html_id":"logger=(logger)-instance-method","name":"logger=","doc":"A `Repository::Logger` instance for this repository.","summary":"<p>A <code><a href=\"../../Onyx/SQL/Repository/Logger.html\">Repository::Logger</a></code> instance for this repository.</p>","abstract":false,"args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":""}],"args_string":"(logger)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr#L29","def":{"name":"logger=","args":[{"name":"logger","doc":null,"default_value":"","external_name":"logger","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@logger = logger"}},{"id":"prepare_query(sql_query:String)-instance-method","html_id":"prepare_query(sql_query:String)-instance-method","name":"prepare_query","doc":"Prepare query for initialization.\n\nIf the `#db` driver is `PG::Driver`, replace all `?` with `$1`, `$2` etc. Otherwise return *sql_query* untouched.","summary":"<p>Prepare query for initialization.</p>","abstract":false,"args":[{"name":"sql_query","doc":null,"default_value":"","external_name":"sql_query","restriction":"String"}],"args_string":"(sql_query : String)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository.cr#L46","def":{"name":"prepare_query","args":[{"name":"sql_query","doc":null,"default_value":"","external_name":"sql_query","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{% if true %}\n        case db.driver\n        {% if Object.all_subclasses.any? do |sc|\n  sc.stringify == \"PG::Driver\"\nend %}\n          when PG::Driver\n            counter = 0\n            sql_query.gsub(\"?\") { '$' + (counter += 1).to_s }\n        {% end %}\n        else sql_query\n        end\n      {% end %}"}},{"id":"query(klass:T.class,sql:String,params:Enumerable(DB::Any)?=nil):Array(T)forallT-instance-method","html_id":"query(klass:T.class,sql:String,params:Enumerable(DB::Any)?=nil):Array(T)forallT-instance-method","name":"query","doc":"Call `db.query(sql, params)` and map the result to `Array(T)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%29-instance-method\">.query(sql, params)</a></code> and map the result to <code>Array(T)</code>.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>, sql : String, params : Enumerable(DB::Any)? = <span class=\"n\">nil</span>) : Array(T) forall T","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/query.cr#L22","def":{"name":"query","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"rs = query(sql, params)\nklass.from_rs(rs)\n"}},{"id":"query(query:Onyx::SQL::Query(T)):Array(T)forallT-instance-method","html_id":"query(query:Onyx::SQL::Query(T)):Array(T)forallT-instance-method","name":"query","doc":"Call `db.query(*query.build)` and map the result to `Array(T)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#query%28query%3AOnyx%3A%3ASQL%3A%3AQuery%28T%29%29%3AArray%28T%29forallT-instance-method\">.query(*query.build)</a></code> and map the result to <code>Array(T)</code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query(T)"}],"args_string":"(query : Onyx::SQL::Query(T)) : Array(T) forall T","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/query.cr#L33","def":{"name":"query","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"query(T, *query.build(postgresql?))"}},{"id":"query(sql:String,*params:DB::Any)-instance-method","html_id":"query(sql:String,*params:DB::Any)-instance-method","name":"query","doc":"Call `db.query(sql, *params)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%29-instance-method\">.query(sql, *params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"args_string":"(sql : String, *params : DB::Any)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/query.cr#L17","def":{"name":"query","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"query(sql, params)"}},{"id":"query(klass:T.class,sql:String,*params:DB::Any):Array(T)forallT-instance-method","html_id":"query(klass:T.class,sql:String,*params:DB::Any):Array(T)forallT-instance-method","name":"query","doc":"Call `db.query(sql, *params)` and map the result to `Array(T)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%29-instance-method\">.query(sql, *params)</a></code> and map the result to <code>Array(T)</code>.</p>","abstract":false,"args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"args_string":"(klass : <span class=\"t\">T</span>.<span class=\"k\">class</span>, sql : String, *params : DB::Any) : Array(T) forall T","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/query.cr#L28","def":{"name":"query","args":[{"name":"klass","doc":null,"default_value":"","external_name":"klass","restriction":"T.class"},{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"query(klass, sql, params)"}},{"id":"query(sql:String,params:Enumerable(DB::Any)?=nil)-instance-method","html_id":"query(sql:String,params:Enumerable(DB::Any)?=nil)-instance-method","name":"query","doc":"Call `db.query(sql, params)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#query%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%29-instance-method\">.query(sql, params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"args_string":"(sql : String, params : Enumerable(DB::Any)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/query.cr#L4","def":{"name":"query","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver}] #{sql}\") do\n  if params\n    db.query(sql, params.to_a)\n  else\n    db.query(sql)\n  end\nend\n"}},{"id":"scalar(query:Query)-instance-method","html_id":"scalar(query:Query)-instance-method","name":"scalar","doc":"Call `db.scalar(*query.build)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#scalar%28query%3AQuery%29-instance-method\">.scalar(*query.build)</a></code>.</p>","abstract":false,"args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"args_string":"(query : Query)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/scalar.cr#L22","def":{"name":"scalar","args":[{"name":"query","doc":null,"default_value":"","external_name":"query","restriction":"Query"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"scalar(*query.build(postgresql?))"}},{"id":"scalar(sql:String,*params:DB::Any)-instance-method","html_id":"scalar(sql:String,*params:DB::Any)-instance-method","name":"scalar","doc":"Call `db.scalar(sql, *params)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#scalar%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%29-instance-method\">.scalar(sql, *params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"args_string":"(sql : String, *params : DB::Any)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/scalar.cr#L17","def":{"name":"scalar","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"","external_name":"params","restriction":"DB::Any"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"scalar(sql, params)"}},{"id":"scalar(sql:String,params:Enumerable(DB::Any)?=nil)-instance-method","html_id":"scalar(sql:String,params:Enumerable(DB::Any)?=nil)-instance-method","name":"scalar","doc":"Call `db.scalar(sql, params)`.","summary":"<p>Call <code>db<a href=\"../../Onyx/SQL/Repository.html#scalar%28sql%3AString%2C%2Aparams%3ADB%3A%3AAny%29-instance-method\">.scalar(sql, params)</a></code>.</p>","abstract":false,"args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"args_string":"(sql : String, params : Enumerable(DB::Any)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/scalar.cr#L4","def":{"name":"scalar","args":[{"name":"sql","doc":null,"default_value":"","external_name":"sql","restriction":"String"},{"name":"params","doc":null,"default_value":"nil","external_name":"params","restriction":"Enumerable(DB::Any) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sql = prepare_query(sql)\n@logger.wrap(\"[#{driver}] #{sql}\") do\n  if params\n    db.scalar(sql, params.to_a)\n  else\n    db.scalar(sql)\n  end\nend\n"}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","path":"Onyx/SQL/Repository/Logger.html","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger","abstract":true,"superclass":{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/repository/logger.cr","line_number":4,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger/Dummy","kind":"class","full_name":"Onyx::SQL::Repository::Logger::Dummy","name":"Dummy"},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger/IO","kind":"class","full_name":"Onyx::SQL::Repository::Logger::IO","name":"IO"},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger/Standard","kind":"class","full_name":"Onyx::SQL::Repository::Logger::Standard","name":"Standard"}],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository","kind":"class","full_name":"Onyx::SQL::Repository","name":"Repository"},"doc":"Logs anything with time elapsed (presumably requests from `Repository`).","summary":"<p>Logs anything with time elapsed (presumably requests from <code><a href=\"../../../Onyx/SQL/Repository.html\">Repository</a></code>).</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":null,"summary":null,"abstract":true,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger.cr#L5","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger/Dummy","path":"Onyx/SQL/Repository/Logger/Dummy.html","kind":"class","full_name":"Onyx::SQL::Repository::Logger::Dummy","name":"Dummy","abstract":false,"superclass":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/repository/logger/dummy.cr","line_number":4,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/dummy.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},"doc":"Does not log anything.","summary":"<p>Does not log anything.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":"Does nothing except yielding the *block*.","summary":"<p>Does nothing except yielding the <em>block</em>.</p>","abstract":false,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/dummy.cr#L6","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"yield"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger/IO","path":"Onyx/SQL/Repository/Logger/IO.html","kind":"class","full_name":"Onyx::SQL::Repository::Logger::IO","name":"IO","abstract":false,"superclass":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/repository/logger/io.cr","line_number":18,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/io.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},"doc":"Logs anything followed by time elapsed by the block run into the specified `IO`.\n\n```\nlogger = Onyx::SQL::Repository::Logger::IO.new(STDOUT)\n\nresult = logger.wrap(\"SELECT * FROM users\") do\n  db.query(\"SELECT * FROM users\")\nend\n\n# => SELECT * FROM users\n# => 501Œºs\n```","summary":"<p>Logs anything followed by time elapsed by the block run into the specified <code><a href=\"../../../../Onyx/SQL/Repository/Logger/IO.html\">IO</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(io:::IO,colors=true)-class-method","html_id":"new(io:::IO,colors=true)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"::IO"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"args_string":"(io : ::IO, colors = <span class=\"n\">true</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/io.cr#L19","def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"::IO"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, colors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":"Wrap a block, logging elapsed time and returning the result.","summary":"<p>Wrap a block, logging elapsed time and returning the result.</p>","abstract":false,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/io.cr#L23","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"log(data_to_log)\nstarted_at = Time.monotonic\nresult = yield\nlog_elapsed(TimeFormat.auto(Time.monotonic - started_at))\nresult\n"}}],"macros":[],"types":[]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger/Standard","path":"Onyx/SQL/Repository/Logger/Standard.html","kind":"class","full_name":"Onyx::SQL::Repository::Logger::Standard","name":"Standard","abstract":false,"superclass":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},"ancestors":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},{"html_id":"github.com/onyxframework/sql/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/onyxframework/sql/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"onyx-sql/repository/logger/standard.cr","line_number":20,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/standard.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Repository/Logger","kind":"class","full_name":"Onyx::SQL::Repository::Logger","name":"Logger"},"doc":"Logs anything followed by elapsed time by the block into a standard `Logger`.\n\n```\nlogger = Logger.new(STDOUT, Logger::Severity::INFO)\nrepo_logger = Onyx::SQL::Repository::Logger::Standard.new(logger)\n\nresult = repo_logger.wrap(\"SELECT * FROM users\") do\n  db.query(\"SELECT * FROM users\")\nend\n\n# [21:54:51:068]  INFO > SELECT * FROM users\n# [21:54:51:068]  INFO > 501Œºs\n```","summary":"<p>Logs anything followed by elapsed time by the block into a standard <code><a href=\"../../../../Onyx/SQL/Repository/Logger.html\">Logger</a></code>.</p>","class_methods":[],"constructors":[{"id":"new(logger:::Logger=::Logger.new(STDOUT,::Logger::Severity::INFO),log_level:::Logger::Severity=::Logger::Severity::INFO,colors=true)-class-method","html_id":"new(logger:::Logger=::Logger.new(STDOUT,::Logger::Severity::INFO),log_level:::Logger::Severity=::Logger::Severity::INFO,colors=true)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT, ::Logger::Severity::INFO)","external_name":"logger","restriction":"::Logger"},{"name":"log_level","doc":null,"default_value":"::Logger::Severity::INFO","external_name":"log_level","restriction":"::Logger::Severity"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"args_string":"(logger : ::Logger = <span class=\"t\">::</span><span class=\"t\">Logger</span>.<span class=\"k\">new</span>(<span class=\"t\">STDOUT</span>, <span class=\"t\">::</span><span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">INFO</span>), log_level : ::Logger::Severity = <span class=\"t\">::</span><span class=\"t\">Logger</span><span class=\"t\">::</span><span class=\"t\">Severity</span><span class=\"t\">::</span><span class=\"t\">INFO</span>, colors = <span class=\"n\">true</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/standard.cr#L21","def":{"name":"new","args":[{"name":"logger","doc":null,"default_value":"::Logger.new(STDOUT, ::Logger::Severity::INFO)","external_name":"logger","restriction":"::Logger"},{"name":"log_level","doc":null,"default_value":"::Logger::Severity::INFO","external_name":"log_level","restriction":"::Logger::Severity"},{"name":"colors","doc":null,"default_value":"true","external_name":"colors","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(logger, log_level, colors)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"wrap(data_to_log:String,&block)-instance-method","html_id":"wrap(data_to_log:String,&amp;block)-instance-method","name":"wrap","doc":"Wrap a block, logging elapsed time at *log_level* and returning the result.","summary":"<p>Wrap a block, logging elapsed time at <em>log_level</em> and returning the result.</p>","abstract":false,"args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"args_string":"(data_to_log : String, &block)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/repository/logger/standard.cr#L29","def":{"name":"wrap","args":[{"name":"data_to_log","doc":null,"default_value":"","external_name":"data_to_log","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":0,"block_arg":null,"return_type":"","visibility":"Public","body":"log(data_to_log)\nstarted_at = Time.monotonic\nresult = yield\nlog_elapsed(TimeFormat.auto(Time.monotonic - started_at))\nresult\n"}}],"macros":[],"types":[]}]}]},{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Serializable","path":"Onyx/SQL/Serializable.html","kind":"module","full_name":"Onyx::SQL::Serializable","name":"Serializable","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters","kind":"module","full_name":"Onyx::SQL::Converters","name":"Converters"}],"locations":[{"filename":"onyx-sql/serializable.cr","line_number":151,"url":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/serializable.cr"}],"repository_name":"github.com/onyxframework/sql","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/onyxframework/sql/Onyx/SQL/Converters","kind":"module","full_name":"Onyx::SQL::Converters","name":"Converters"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/onyxframework/sql/Onyx/SQL","kind":"module","full_name":"Onyx::SQL","name":"SQL"},"doc":"Include this module to make an object serializable **from** `DB::ResultSet`.\nThis is particulary useful for reusable business objects. In an `Onyx::SQL::Serializable` object,\n**all** its instance variables must be nilable:\n\n```crystal\nstruct PopularProducts\n  include Onyx::SQL::Serializable\n\n  @id : Int32?\n  @popularity : Float64?\nend\n\nrs = db.query(\"SELECT id, popularity ...\")\npopular_products = PopularProducts.from_rs(rs) # => Array(PopularProducts)\n```\n\nRemember that a row's column names must match the object's instance variables.\nYou still can use `Field` and `Reference` annotations, though:\n\n```crystal\nstruct PopularProducts\n  include Onyx::SQL::Serializable\n\n  # .from_rs would now expect a column named \"the_id\" instead of \"id\"\n  @[Onyx::SQL::Field(key: \"the_id\")]\n  @id : Int32?\nend\n```\n\nRead more about `Reference` serialization below.\n\nYou can also use `Repository#query` method as soon as it calls `.from_rs` with result set\ncolumns matching the desired keys. Keep that in mind when using `Query`, because it could\nreturn columns with invalid or unknown (to this serializable object) names, resulting in\na `DB::MappingException` runtime error.\n\n`Model` includes `Serializable` and it also has `Model.schema` DSL macro, so if you want\nto map a model, using `Model` module over `Serializable` is preferrable.\n\n## Serializing references\n\nBefore reading this section, make yourself familiar with `Reference` annotation.\n\nLet's consider this classic example:\n\n```\nclass User\n  include Onyx::SQL::Model\n\n  schema users do\n    pkey id : Int32\n    type username : String\n    type authored_posts : Array(Post), foreign_key: \"author_id\"\n  end\nend\n\nclass Post\n  include Onyx::SQL::Model\n\n  schema posts do\n    pkey id : Int32\n    type body : String\n    type author : User, key: \"author_id\"\n  end\nend\n```\n\n### Direct non-enumerable references\n\n`Post#author` is a direct non-enumerable reference and it can be preloaded from a result set,\nas the row is linear and sufficient to store all the author's data:\n\n```text\n| post_id | post_content | author_id | author_username |\n| ------- + ------------ + --------- + --------------- |\n| 17      | \"Hello\"      | 42        | \"John\"          |\n```\n\nHowever, a `Post` can have multiple direct references and they all can have overlapping\ncolumn names, so to avoid it, there is a concept of *select markers*. A marker wraps a reference's\ncolumn in the result set, allowing to distinguish between references:\n\n```text\n| id | content | _author | id | username | _author |\n| -- + ------- + ------- + -- + -------- + ------- +\n| 17 | \"Hello\" |         | 42 | \"John\"   |         |\n```\n\nIn this example, columns named `\"_author\"` are markers and they're essentialy empty strings.\nIt results in ability to properly preload references, in this case:\n\n```\npost = Post.from_rs(rs).first\npp post # => <Post @id=17 @content=\"Hello\" @author=<User @id=42 @username=\"John\">>\n```\n\n### Foreign non-enumerable references\n\nIn one-to-one relations, a model can have a foreign non-enumerable reference, for example:\n\n```\nclass User\n  schema users do\n    pkey id : Int32\n    type settings : Settings, foreign_key: \"user_id\"\n  end\nend\n\nclass Settings\n  schema settings do\n    pkey id : Int32\n    type foo : String\n    type user : User, key: \"user_id\"\n  end\nend\n```\n\nIn this case, you can preload `User#settings` along with a `User` instance, because it\nfits a single row:\n\n```\nuser = User\n  .where(id: 42)\n  .select(:id, :username)\n  .join(settings: true) do |q|\n    q.select(:foo)\n  end\nend\n```\n\nThe row would look like this:\n\n```text\n| id | username | _settings | foo   | _settings |\n| -- + -------- + --------- + ----- + --------- +\n| 42 | \"John\"   |           | \"bar\" |           |\n```\n\nAnd it would be perfectly parseable by `.from_rs`.\n\n### Enumerable references\n\nNow let's consider `User#authored_posts`, which is a foreign enumerable reference.\nYou can not effectively put many posts in a single row, that's why it's impossible\nto preload enumerable references at all. If you want to get all posts authored by a user,\nyou should query the `\"posts\"` table, not the `\"users\"`, and receive a collection of `Post` rows.\n\nThis restriction applies both to direct and foreign *enumerable* references.","summary":"<p>Include this module to make an object serializable <strong>from</strong> <code>DB::ResultSet</code>.</p>","class_methods":[{"id":"from_rs(rs:DB::ResultSet):Array(self)-class-method","html_id":"from_rs(rs:DB::ResultSet):Array(self)-class-method","name":"from_rs","doc":"Initialize an array of `self` from a database result set.\nRaises `DB::MappingException` if there is an unknown column, so\nmake sure the result set's rows contain only well-known columns.","summary":"<p>Initialize an array of <code>self</code> from a database result set.</p>","abstract":false,"args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"args_string":"(rs : DB::ResultSet) : Array(<span class=\"k\">self</span>)","source_link":"https://github.com/onyxframework/sql/blob/84734a8803a475e94def3ed590896d1959fdc6b8/src/onyx-sql/serializable.cr#L162","def":{"name":"from_rs","args":[{"name":"rs","doc":null,"default_value":"","external_name":"rs","restriction":"DB::ResultSet"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(self)","visibility":"Public","body":""}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}]}}